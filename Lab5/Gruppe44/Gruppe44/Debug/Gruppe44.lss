
Gruppe44.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000d0  00800100  00001182  00001216  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001182  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000097  008001d0  008001d0  000012e6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000012e6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001344  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c8  00000000  00000000  00001380  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000239e  00000000  00000000  00001548  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e01  00000000  00000000  000038e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001158  00000000  00000000  000046e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000488  00000000  00000000  00005840  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000804  00000000  00000000  00005cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e02  00000000  00000000  000064cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000168  00000000  00000000  000072ce  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
       4:	0c 94 d7 01 	jmp	0x3ae	; 0x3ae <__vector_1>
       8:	0c 94 fd 01 	jmp	0x3fa	; 0x3fa <__vector_2>
       c:	0c 94 23 02 	jmp	0x446	; 0x446 <__vector_3>
      10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
      70:	11 24       	eor	r1, r1
      72:	1f be       	out	0x3f, r1	; 63
      74:	cf ef       	ldi	r28, 0xFF	; 255
      76:	d4 e0       	ldi	r29, 0x04	; 4
      78:	de bf       	out	0x3e, r29	; 62
      7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
      7c:	11 e0       	ldi	r17, 0x01	; 1
      7e:	a0 e0       	ldi	r26, 0x00	; 0
      80:	b1 e0       	ldi	r27, 0x01	; 1
      82:	e2 e8       	ldi	r30, 0x82	; 130
      84:	f1 e1       	ldi	r31, 0x11	; 17
      86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
      88:	05 90       	lpm	r0, Z+
      8a:	0d 92       	st	X+, r0
      8c:	a0 3d       	cpi	r26, 0xD0	; 208
      8e:	b1 07       	cpc	r27, r17
      90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
      92:	22 e0       	ldi	r18, 0x02	; 2
      94:	a0 ed       	ldi	r26, 0xD0	; 208
      96:	b1 e0       	ldi	r27, 0x01	; 1
      98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
      9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
      9c:	a7 36       	cpi	r26, 0x67	; 103
      9e:	b2 07       	cpc	r27, r18
      a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
      a2:	0e 94 9f 02 	call	0x53e	; 0x53e <main>
      a6:	0c 94 bf 08 	jmp	0x117e	; 0x117e <_exit>

000000aa <__bad_interrupt>:
      aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <adc_init>:
#include "util/delay.h"
#include <math.h>

void adc_init (void){
	
	DDRD |= (1 << PD5); // Set port PD5 to 1
      ae:	81 b3       	in	r24, 0x11	; 17
      b0:	80 62       	ori	r24, 0x20	; 32
      b2:	81 bb       	out	0x11, r24	; 17
	TCCR1A |= (1 << COM1A0)|(1 << COM1B0); // Timer/Counter1 Control Register A (TCCR1A): Setting bit 6 and 4 to 1 - "Toggle OCnA/OCnB on Compare Match."
      b4:	8f b5       	in	r24, 0x2f	; 47
      b6:	80 65       	ori	r24, 0x50	; 80
      b8:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1 << WGM12)|(1 << CS10); // Timer/Counter1 Control Register B (TCCR1B): Setting bit 3 to 1 - "CTC-mode", and bit 0 to 1 "clkI/O/1 (No prescaling)"
      ba:	8e b5       	in	r24, 0x2e	; 46
      bc:	89 60       	ori	r24, 0x09	; 9
      be:	8e bd       	out	0x2e, r24	; 46
	OCR1A = 0x1; // Setting Compare Match bit - which bit the counter triggers on
      c0:	81 e0       	ldi	r24, 0x01	; 1
      c2:	90 e0       	ldi	r25, 0x00	; 0
      c4:	9b bd       	out	0x2b, r25	; 43
      c6:	8a bd       	out	0x2a, r24	; 42
      c8:	08 95       	ret

000000ca <adc_read>:
}

void adc_read(void){
	// SEND TO ADC
	volatile char * adc = ( char *) 0x1400; // Set pointer at starting memory of ADC
	adc [0] = 0xff; // Send random value to initiate
      ca:	8f ef       	ldi	r24, 0xFF	; 255
      cc:	80 93 00 14 	sts	0x1400, r24	; 0x801400 <__bss_end+0x1199>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      d0:	84 e1       	ldi	r24, 0x14	; 20
      d2:	8a 95       	dec	r24
      d4:	f1 f7       	brne	.-4      	; 0xd2 <adc_read+0x8>
	
	// WAIT
	_delay_us(60); // Is this one necessary?
	
	// READ FROM ADC
	for (int i=0;i<4;i++) // Need to read 4 values - analog input 0 to 3
      d6:	80 e0       	ldi	r24, 0x00	; 0
      d8:	90 e0       	ldi	r25, 0x00	; 0
      da:	0b c0       	rjmp	.+22     	; 0xf2 <adc_read+0x28>
	{
		uint8_t number = adc [0]; // Read the ADC value and store it in variable
      dc:	20 91 00 14 	lds	r18, 0x1400	; 0x801400 <__bss_end+0x1199>
		ADC_states[i] = number;
      e0:	fc 01       	movw	r30, r24
      e2:	ee 0f       	add	r30, r30
      e4:	ff 1f       	adc	r31, r31
      e6:	e4 52       	subi	r30, 0x24	; 36
      e8:	fe 4f       	sbci	r31, 0xFE	; 254
      ea:	30 e0       	ldi	r19, 0x00	; 0
      ec:	31 83       	std	Z+1, r19	; 0x01
      ee:	20 83       	st	Z, r18
	
	// WAIT
	_delay_us(60); // Is this one necessary?
	
	// READ FROM ADC
	for (int i=0;i<4;i++) // Need to read 4 values - analog input 0 to 3
      f0:	01 96       	adiw	r24, 0x01	; 1
      f2:	84 30       	cpi	r24, 0x04	; 4
      f4:	91 05       	cpc	r25, r1
      f6:	94 f3       	brlt	.-28     	; 0xdc <adc_read+0x12>
		ADC_states[i] = number;
		//if (i == 0){
		//printf( "%d ", number); // Print analog input i TODO: Change this from debugging later
		//}
	}
}
      f8:	08 95       	ret

000000fa <adc_calibrate>:

void adc_calibrate(void){
	adc_read();
      fa:	0e 94 65 00 	call	0xca	; 0xca <adc_read>
	X_neutral = ADC_states[0];
      fe:	ec ed       	ldi	r30, 0xDC	; 220
     100:	f1 e0       	ldi	r31, 0x01	; 1
     102:	80 81       	ld	r24, Z
     104:	91 81       	ldd	r25, Z+1	; 0x01
     106:	90 93 d3 01 	sts	0x01D3, r25	; 0x8001d3 <X_neutral+0x1>
     10a:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <X_neutral>
	Y_neutral = ADC_states[1];
     10e:	82 81       	ldd	r24, Z+2	; 0x02
     110:	93 81       	ldd	r25, Z+3	; 0x03
     112:	90 93 d1 01 	sts	0x01D1, r25	; 0x8001d1 <__data_end+0x1>
     116:	80 93 d0 01 	sts	0x01D0, r24	; 0x8001d0 <__data_end>
     11a:	08 95       	ret

0000011c <CAN_read>:
	PORTB &= ~(1 << CAN_CS ); // Select CAN - controller
	SPI_transmit( MCP_CANSTAT ); // Read status
	received = SPI_transmit(0xff);
	PORTB |= (1 << CAN_CS ); // Deselect CAN - controller
	return received;
}
     11c:	cf 93       	push	r28
     11e:	c8 2f       	mov	r28, r24
     120:	88 b3       	in	r24, 0x18	; 24
     122:	8f 7e       	andi	r24, 0xEF	; 239
     124:	88 bb       	out	0x18, r24	; 24
     126:	83 e0       	ldi	r24, 0x03	; 3
     128:	90 e0       	ldi	r25, 0x00	; 0
     12a:	0e 94 18 04 	call	0x830	; 0x830 <SPI_write>
     12e:	8c 2f       	mov	r24, r28
     130:	90 e0       	ldi	r25, 0x00	; 0
     132:	0e 94 18 04 	call	0x830	; 0x830 <SPI_write>
     136:	0e 94 1c 04 	call	0x838	; 0x838 <SPI_read>
     13a:	98 b3       	in	r25, 0x18	; 24
     13c:	90 61       	ori	r25, 0x10	; 16
     13e:	98 bb       	out	0x18, r25	; 24
     140:	cf 91       	pop	r28
     142:	08 95       	ret

00000144 <CAN_write>:
     144:	cf 93       	push	r28
     146:	df 93       	push	r29
     148:	d8 2f       	mov	r29, r24
     14a:	c6 2f       	mov	r28, r22
     14c:	88 b3       	in	r24, 0x18	; 24
     14e:	8f 7e       	andi	r24, 0xEF	; 239
     150:	88 bb       	out	0x18, r24	; 24
     152:	82 e0       	ldi	r24, 0x02	; 2
     154:	90 e0       	ldi	r25, 0x00	; 0
     156:	0e 94 18 04 	call	0x830	; 0x830 <SPI_write>
     15a:	8d 2f       	mov	r24, r29
     15c:	90 e0       	ldi	r25, 0x00	; 0
     15e:	0e 94 18 04 	call	0x830	; 0x830 <SPI_write>
     162:	8c 2f       	mov	r24, r28
     164:	90 e0       	ldi	r25, 0x00	; 0
     166:	0e 94 18 04 	call	0x830	; 0x830 <SPI_write>
     16a:	88 b3       	in	r24, 0x18	; 24
     16c:	80 61       	ori	r24, 0x10	; 16
     16e:	88 bb       	out	0x18, r24	; 24
     170:	df 91       	pop	r29
     172:	cf 91       	pop	r28
     174:	08 95       	ret

00000176 <CAN_request_to_send>:
     176:	98 b3       	in	r25, 0x18	; 24
     178:	9f 7e       	andi	r25, 0xEF	; 239
     17a:	98 bb       	out	0x18, r25	; 24
     17c:	87 68       	ori	r24, 0x87	; 135
     17e:	90 e0       	ldi	r25, 0x00	; 0
     180:	0e 94 18 04 	call	0x830	; 0x830 <SPI_write>
     184:	88 b3       	in	r24, 0x18	; 24
     186:	80 61       	ori	r24, 0x10	; 16
     188:	88 bb       	out	0x18, r24	; 24
     18a:	08 95       	ret

0000018c <CAN_bit_modify>:
     18c:	1f 93       	push	r17
     18e:	cf 93       	push	r28
     190:	df 93       	push	r29
     192:	18 2f       	mov	r17, r24
     194:	d6 2f       	mov	r29, r22
     196:	c4 2f       	mov	r28, r20
     198:	88 b3       	in	r24, 0x18	; 24
     19a:	8f 7e       	andi	r24, 0xEF	; 239
     19c:	88 bb       	out	0x18, r24	; 24
     19e:	85 e0       	ldi	r24, 0x05	; 5
     1a0:	90 e0       	ldi	r25, 0x00	; 0
     1a2:	0e 94 18 04 	call	0x830	; 0x830 <SPI_write>
     1a6:	81 2f       	mov	r24, r17
     1a8:	90 e0       	ldi	r25, 0x00	; 0
     1aa:	0e 94 18 04 	call	0x830	; 0x830 <SPI_write>
     1ae:	8d 2f       	mov	r24, r29
     1b0:	90 e0       	ldi	r25, 0x00	; 0
     1b2:	0e 94 18 04 	call	0x830	; 0x830 <SPI_write>
     1b6:	8c 2f       	mov	r24, r28
     1b8:	90 e0       	ldi	r25, 0x00	; 0
     1ba:	0e 94 18 04 	call	0x830	; 0x830 <SPI_write>
     1be:	88 b3       	in	r24, 0x18	; 24
     1c0:	80 61       	ori	r24, 0x10	; 16
     1c2:	88 bb       	out	0x18, r24	; 24
     1c4:	df 91       	pop	r29
     1c6:	cf 91       	pop	r28
     1c8:	1f 91       	pop	r17
     1ca:	08 95       	ret

000001cc <CAN_reset>:
     1cc:	88 b3       	in	r24, 0x18	; 24
     1ce:	8f 7e       	andi	r24, 0xEF	; 239
     1d0:	88 bb       	out	0x18, r24	; 24
     1d2:	80 ec       	ldi	r24, 0xC0	; 192
     1d4:	90 e0       	ldi	r25, 0x00	; 0
     1d6:	0e 94 18 04 	call	0x830	; 0x830 <SPI_write>
     1da:	88 b3       	in	r24, 0x18	; 24
     1dc:	80 61       	ori	r24, 0x10	; 16
     1de:	88 bb       	out	0x18, r24	; 24
     1e0:	08 95       	ret

000001e2 <CAN_init>:
     1e2:	0e 94 0e 04 	call	0x81c	; 0x81c <SPI_init>
     1e6:	0e 94 e6 00 	call	0x1cc	; 0x1cc <CAN_reset>
     1ea:	8e e0       	ldi	r24, 0x0E	; 14
     1ec:	0e 94 8e 00 	call	0x11c	; 0x11c <CAN_read>
     1f0:	80 7e       	andi	r24, 0xE0	; 224
     1f2:	80 38       	cpi	r24, 0x80	; 128
     1f4:	31 f0       	breq	.+12     	; 0x202 <__EEPROM_REGION_LENGTH__+0x2>
     1f6:	86 e0       	ldi	r24, 0x06	; 6
     1f8:	91 e0       	ldi	r25, 0x01	; 1
     1fa:	0e 94 83 04 	call	0x906	; 0x906 <puts>
     1fe:	81 e0       	ldi	r24, 0x01	; 1
     200:	08 95       	ret
     202:	42 e8       	ldi	r20, 0x82	; 130
     204:	6f ef       	ldi	r22, 0xFF	; 255
     206:	8a e2       	ldi	r24, 0x2A	; 42
     208:	0e 94 c6 00 	call	0x18c	; 0x18c <CAN_bit_modify>
     20c:	49 ef       	ldi	r20, 0xF9	; 249
     20e:	6f ef       	ldi	r22, 0xFF	; 255
     210:	89 e2       	ldi	r24, 0x29	; 41
     212:	0e 94 c6 00 	call	0x18c	; 0x18c <CAN_bit_modify>
     216:	47 e0       	ldi	r20, 0x07	; 7
     218:	67 ec       	ldi	r22, 0xC7	; 199
     21a:	88 e2       	ldi	r24, 0x28	; 40
     21c:	0e 94 c6 00 	call	0x18c	; 0x18c <CAN_bit_modify>
     220:	40 e2       	ldi	r20, 0x20	; 32
     222:	60 e6       	ldi	r22, 0x60	; 96
     224:	80 e6       	ldi	r24, 0x60	; 96
     226:	0e 94 c6 00 	call	0x18c	; 0x18c <CAN_bit_modify>
     22a:	41 e0       	ldi	r20, 0x01	; 1
     22c:	61 e0       	ldi	r22, 0x01	; 1
     22e:	8b e2       	ldi	r24, 0x2B	; 43
     230:	0e 94 c6 00 	call	0x18c	; 0x18c <CAN_bit_modify>
     234:	40 e4       	ldi	r20, 0x40	; 64
     236:	60 ee       	ldi	r22, 0xE0	; 224
     238:	8f e0       	ldi	r24, 0x0F	; 15
     23a:	0e 94 c6 00 	call	0x18c	; 0x18c <CAN_bit_modify>
     23e:	80 e0       	ldi	r24, 0x00	; 0
     240:	08 95       	ret

00000242 <CAN_write_message>:

CAN_write_message(struct Can_Message message){
     242:	ff 92       	push	r15
     244:	0f 93       	push	r16
     246:	1f 93       	push	r17
     248:	cf 93       	push	r28
     24a:	df 93       	push	r29
     24c:	cd b7       	in	r28, 0x3d	; 61
     24e:	de b7       	in	r29, 0x3e	; 62
     250:	2a 97       	sbiw	r28, 0x0a	; 10
     252:	0f b6       	in	r0, 0x3f	; 63
     254:	f8 94       	cli
     256:	de bf       	out	0x3e, r29	; 62
     258:	0f be       	out	0x3f, r0	; 63
     25a:	cd bf       	out	0x3d, r28	; 61
     25c:	09 83       	std	Y+1, r16	; 0x01
     25e:	1a 83       	std	Y+2, r17	; 0x02
     260:	2b 83       	std	Y+3, r18	; 0x03
     262:	3c 83       	std	Y+4, r19	; 0x04
     264:	4d 83       	std	Y+5, r20	; 0x05
     266:	5e 83       	std	Y+6, r21	; 0x06
     268:	6f 83       	std	Y+7, r22	; 0x07
     26a:	78 87       	std	Y+8, r23	; 0x08
     26c:	89 87       	std	Y+9, r24	; 0x09
     26e:	9a 87       	std	Y+10, r25	; 0x0a
	
	while ((CAN_read(MCP_TXB0CTRL) & (1<<3))){}
     270:	80 e3       	ldi	r24, 0x30	; 48
     272:	0e 94 8e 00 	call	0x11c	; 0x11c <CAN_read>
     276:	83 fd       	sbrc	r24, 3
     278:	fb cf       	rjmp	.-10     	; 0x270 <CAN_write_message+0x2e>
	//TODO: Send id to two register, len to one, then data, then request to send.
	CAN_write(MCP_TXB0_ID_LOW, (message.id & 0x07) << 5);
     27a:	19 81       	ldd	r17, Y+1	; 0x01
     27c:	80 e2       	ldi	r24, 0x20	; 32
     27e:	18 9f       	mul	r17, r24
     280:	b0 01       	movw	r22, r0
     282:	11 24       	eor	r1, r1
     284:	82 e3       	ldi	r24, 0x32	; 50
     286:	0e 94 a2 00 	call	0x144	; 0x144 <CAN_write>
	
	CAN_write(MCP_TXB0_ID_HIGH, (message.id >> 3) & 0xFF );
     28a:	61 2f       	mov	r22, r17
     28c:	66 95       	lsr	r22
     28e:	66 95       	lsr	r22
     290:	66 95       	lsr	r22
     292:	81 e3       	ldi	r24, 0x31	; 49
     294:	0e 94 a2 00 	call	0x144	; 0x144 <CAN_write>
	
	
	//printf("%hd \r \n", (message.id << 5) & 0xFF);
	//printf("%hd \r \n", message.id >> 3);
	//printf("message length: %i \r \n", message.length);
	CAN_write(MCP_TXB0_LEN, message.length);
     298:	fa 80       	ldd	r15, Y+2	; 0x02
     29a:	6f 2d       	mov	r22, r15
     29c:	85 e3       	ldi	r24, 0x35	; 53
     29e:	0e 94 a2 00 	call	0x144	; 0x144 <CAN_write>
	
	for (int i = 0; i<message.length; i++){
     2a2:	00 e0       	ldi	r16, 0x00	; 0
     2a4:	10 e0       	ldi	r17, 0x00	; 0
     2a6:	13 c0       	rjmp	.+38     	; 0x2ce <CAN_write_message+0x8c>
		CAN_write(MCP_TXB0_DATA + i, message.data[i]);
     2a8:	e3 e0       	ldi	r30, 0x03	; 3
     2aa:	f0 e0       	ldi	r31, 0x00	; 0
     2ac:	ec 0f       	add	r30, r28
     2ae:	fd 1f       	adc	r31, r29
     2b0:	e0 0f       	add	r30, r16
     2b2:	f1 1f       	adc	r31, r17
     2b4:	60 81       	ld	r22, Z
     2b6:	86 e3       	ldi	r24, 0x36	; 54
     2b8:	80 0f       	add	r24, r16
     2ba:	0e 94 a2 00 	call	0x144	; 0x144 <CAN_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2be:	83 ec       	ldi	r24, 0xC3	; 195
     2c0:	99 e0       	ldi	r25, 0x09	; 9
     2c2:	01 97       	sbiw	r24, 0x01	; 1
     2c4:	f1 f7       	brne	.-4      	; 0x2c2 <CAN_write_message+0x80>
     2c6:	00 c0       	rjmp	.+0      	; 0x2c8 <CAN_write_message+0x86>
     2c8:	00 00       	nop
	//printf("%hd \r \n", (message.id << 5) & 0xFF);
	//printf("%hd \r \n", message.id >> 3);
	//printf("message length: %i \r \n", message.length);
	CAN_write(MCP_TXB0_LEN, message.length);
	
	for (int i = 0; i<message.length; i++){
     2ca:	0f 5f       	subi	r16, 0xFF	; 255
     2cc:	1f 4f       	sbci	r17, 0xFF	; 255
     2ce:	8f 2d       	mov	r24, r15
     2d0:	90 e0       	ldi	r25, 0x00	; 0
     2d2:	08 17       	cp	r16, r24
     2d4:	19 07       	cpc	r17, r25
     2d6:	44 f3       	brlt	.-48     	; 0x2a8 <CAN_write_message+0x66>
		CAN_write(MCP_TXB0_DATA + i, message.data[i]);
		_delay_ms(10);
	}
	
}
     2d8:	2a 96       	adiw	r28, 0x0a	; 10
     2da:	0f b6       	in	r0, 0x3f	; 63
     2dc:	f8 94       	cli
     2de:	de bf       	out	0x3e, r29	; 62
     2e0:	0f be       	out	0x3f, r0	; 63
     2e2:	cd bf       	out	0x3d, r28	; 61
     2e4:	df 91       	pop	r29
     2e6:	cf 91       	pop	r28
     2e8:	1f 91       	pop	r17
     2ea:	0f 91       	pop	r16
     2ec:	ff 90       	pop	r15
     2ee:	08 95       	ret

000002f0 <CAN_read_message>:

struct Can_Message CAN_read_message(){
     2f0:	ff 92       	push	r15
     2f2:	0f 93       	push	r16
     2f4:	1f 93       	push	r17
     2f6:	cf 93       	push	r28
     2f8:	df 93       	push	r29
     2fa:	8c 01       	movw	r16, r24
     2fc:	83 ec       	ldi	r24, 0xC3	; 195
     2fe:	99 e0       	ldi	r25, 0x09	; 9
     300:	01 97       	sbiw	r24, 0x01	; 1
     302:	f1 f7       	brne	.-4      	; 0x300 <CAN_read_message+0x10>
     304:	00 c0       	rjmp	.+0      	; 0x306 <CAN_read_message+0x16>
     306:	00 00       	nop
	
	
	struct Can_Message recieved_message;
	
	_delay_ms(10);
	recieved_message.length = CAN_read(MCP_RXB0_LEN) & 0x0F ;
     308:	85 e6       	ldi	r24, 0x65	; 101
     30a:	0e 94 8e 00 	call	0x11c	; 0x11c <CAN_read>
     30e:	8f 70       	andi	r24, 0x0F	; 15
     310:	f8 2e       	mov	r15, r24
     312:	f8 01       	movw	r30, r16
     314:	81 83       	std	Z+1, r24	; 0x01
     316:	83 ec       	ldi	r24, 0xC3	; 195
     318:	99 e0       	ldi	r25, 0x09	; 9
     31a:	01 97       	sbiw	r24, 0x01	; 1
     31c:	f1 f7       	brne	.-4      	; 0x31a <CAN_read_message+0x2a>
     31e:	00 c0       	rjmp	.+0      	; 0x320 <CAN_read_message+0x30>
     320:	00 00       	nop
	//recieved_message.length = CAN_read(MCP_RXB0_LEN) & 0x0F;
	
	_delay_ms(10);
	recieved_message.id = ((CAN_read(MCP_RXB0_ID_HIGH) << 3) | (CAN_read(MCP_RXB0_ID_LOW) >> 5)) & 0xFF;
     322:	81 e6       	ldi	r24, 0x61	; 97
     324:	0e 94 8e 00 	call	0x11c	; 0x11c <CAN_read>
     328:	c8 2f       	mov	r28, r24
     32a:	d0 e0       	ldi	r29, 0x00	; 0
     32c:	cc 0f       	add	r28, r28
     32e:	dd 1f       	adc	r29, r29
     330:	cc 0f       	add	r28, r28
     332:	dd 1f       	adc	r29, r29
     334:	cc 0f       	add	r28, r28
     336:	dd 1f       	adc	r29, r29
     338:	82 e6       	ldi	r24, 0x62	; 98
     33a:	0e 94 8e 00 	call	0x11c	; 0x11c <CAN_read>
     33e:	82 95       	swap	r24
     340:	86 95       	lsr	r24
     342:	87 70       	andi	r24, 0x07	; 7
     344:	c8 2b       	or	r28, r24
     346:	f8 01       	movw	r30, r16
     348:	c0 83       	st	Z, r28
	//printf("received length: %x \n", recieved_message.length);
	
	for (int i = 0; i<recieved_message.length; i++){
     34a:	c0 e0       	ldi	r28, 0x00	; 0
     34c:	d0 e0       	ldi	r29, 0x00	; 0
     34e:	0f c0       	rjmp	.+30     	; 0x36e <CAN_read_message+0x7e>
		recieved_message.data[i] = CAN_read(MCP_RXB0_DATA + i);
     350:	8c 2f       	mov	r24, r28
     352:	8a 59       	subi	r24, 0x9A	; 154
     354:	0e 94 8e 00 	call	0x11c	; 0x11c <CAN_read>
     358:	f8 01       	movw	r30, r16
     35a:	ec 0f       	add	r30, r28
     35c:	fd 1f       	adc	r31, r29
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	83 ec       	ldi	r24, 0xC3	; 195
     362:	99 e0       	ldi	r25, 0x09	; 9
     364:	01 97       	sbiw	r24, 0x01	; 1
     366:	f1 f7       	brne	.-4      	; 0x364 <CAN_read_message+0x74>
     368:	00 c0       	rjmp	.+0      	; 0x36a <CAN_read_message+0x7a>
     36a:	00 00       	nop
	
	_delay_ms(10);
	recieved_message.id = ((CAN_read(MCP_RXB0_ID_HIGH) << 3) | (CAN_read(MCP_RXB0_ID_LOW) >> 5)) & 0xFF;
	//printf("received length: %x \n", recieved_message.length);
	
	for (int i = 0; i<recieved_message.length; i++){
     36c:	21 96       	adiw	r28, 0x01	; 1
     36e:	8f 2d       	mov	r24, r15
     370:	90 e0       	ldi	r25, 0x00	; 0
     372:	c8 17       	cp	r28, r24
     374:	d9 07       	cpc	r29, r25
     376:	64 f3       	brlt	.-40     	; 0x350 <CAN_read_message+0x60>
		recieved_message.data[i] = CAN_read(MCP_RXB0_DATA + i);
		_delay_ms(10);
	}
	
	CAN_bit_modify(MCP_CANINTF, 0x01, 0x00);
     378:	40 e0       	ldi	r20, 0x00	; 0
     37a:	61 e0       	ldi	r22, 0x01	; 1
     37c:	8c e2       	ldi	r24, 0x2C	; 44
     37e:	0e 94 c6 00 	call	0x18c	; 0x18c <CAN_bit_modify>

	
	return recieved_message;
     382:	c8 01       	movw	r24, r16
     384:	df 91       	pop	r29
     386:	cf 91       	pop	r28
     388:	1f 91       	pop	r17
     38a:	0f 91       	pop	r16
     38c:	ff 90       	pop	r15
     38e:	08 95       	ret

00000390 <USART_Init>:
#include <unistd.h>

void USART_Init( unsigned int ubrr )
{
	/* Set baud rate */
	UBRR1H = (unsigned char)(ubrr>>8);
     390:	9c bf       	out	0x3c, r25	; 60
	UBRR1L = (unsigned char)ubrr;
     392:	80 b9       	out	0x00, r24	; 0
	/* Enable receiver and transmitter */
	UCSR1B = (1<<RXEN1)|(1<<TXEN1);
     394:	88 e1       	ldi	r24, 0x18	; 24
     396:	81 b9       	out	0x01, r24	; 1
	/* Set frame format: 8data, 2stop bit */
	UCSR1C = (1<<URSEL1)|(1<<USBS1)|(3<<UCSZ10);
     398:	8e e8       	ldi	r24, 0x8E	; 142
     39a:	8c bf       	out	0x3c, r24	; 60
     39c:	08 95       	ret

0000039e <USART_Transmit>:
}

void USART_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR1A & (1<<UDRE1)) )
     39e:	15 9b       	sbis	0x02, 5	; 2
     3a0:	fe cf       	rjmp	.-4      	; 0x39e <USART_Transmit>
	;
	/* Put data into buffer, sends the data */
	UDR1 = data;
     3a2:	83 b9       	out	0x03, r24	; 3
     3a4:	08 95       	ret

000003a6 <USART_Receive>:
}

unsigned char USART_Receive( void )
{
	/* Wait for data to be received */
	while ( !(UCSR1A & (1<<RXC1)) )
     3a6:	17 9b       	sbis	0x02, 7	; 2
     3a8:	fe cf       	rjmp	.-4      	; 0x3a6 <USART_Receive>
	;
	/* Get and return received data from buffer */
	return UDR1;
     3aa:	83 b1       	in	r24, 0x03	; 3
}
     3ac:	08 95       	ret

000003ae <__vector_1>:
#define F_CPU 16000000
#define MYUBRR FOSC/16/BAUD-1 // = 31

#include "util/delay.h"

ISR(INT0_vect){
     3ae:	1f 92       	push	r1
     3b0:	0f 92       	push	r0
     3b2:	0f b6       	in	r0, 0x3f	; 63
     3b4:	0f 92       	push	r0
     3b6:	11 24       	eor	r1, r1
     3b8:	2f 93       	push	r18
     3ba:	3f 93       	push	r19
     3bc:	4f 93       	push	r20
     3be:	5f 93       	push	r21
     3c0:	6f 93       	push	r22
     3c2:	7f 93       	push	r23
     3c4:	8f 93       	push	r24
     3c6:	9f 93       	push	r25
     3c8:	af 93       	push	r26
     3ca:	bf 93       	push	r27
     3cc:	ef 93       	push	r30
     3ce:	ff 93       	push	r31
	printf("\r\nRight button\r\n");
     3d0:	8a e3       	ldi	r24, 0x3A	; 58
     3d2:	91 e0       	ldi	r25, 0x01	; 1
     3d4:	0e 94 83 04 	call	0x906	; 0x906 <puts>
}
     3d8:	ff 91       	pop	r31
     3da:	ef 91       	pop	r30
     3dc:	bf 91       	pop	r27
     3de:	af 91       	pop	r26
     3e0:	9f 91       	pop	r25
     3e2:	8f 91       	pop	r24
     3e4:	7f 91       	pop	r23
     3e6:	6f 91       	pop	r22
     3e8:	5f 91       	pop	r21
     3ea:	4f 91       	pop	r20
     3ec:	3f 91       	pop	r19
     3ee:	2f 91       	pop	r18
     3f0:	0f 90       	pop	r0
     3f2:	0f be       	out	0x3f, r0	; 63
     3f4:	0f 90       	pop	r0
     3f6:	1f 90       	pop	r1
     3f8:	18 95       	reti

000003fa <__vector_2>:
ISR(INT1_vect){
     3fa:	1f 92       	push	r1
     3fc:	0f 92       	push	r0
     3fe:	0f b6       	in	r0, 0x3f	; 63
     400:	0f 92       	push	r0
     402:	11 24       	eor	r1, r1
     404:	2f 93       	push	r18
     406:	3f 93       	push	r19
     408:	4f 93       	push	r20
     40a:	5f 93       	push	r21
     40c:	6f 93       	push	r22
     40e:	7f 93       	push	r23
     410:	8f 93       	push	r24
     412:	9f 93       	push	r25
     414:	af 93       	push	r26
     416:	bf 93       	push	r27
     418:	ef 93       	push	r30
     41a:	ff 93       	push	r31
	printf("\r\nLeft button\r\n");
     41c:	8a e4       	ldi	r24, 0x4A	; 74
     41e:	91 e0       	ldi	r25, 0x01	; 1
     420:	0e 94 83 04 	call	0x906	; 0x906 <puts>
}
     424:	ff 91       	pop	r31
     426:	ef 91       	pop	r30
     428:	bf 91       	pop	r27
     42a:	af 91       	pop	r26
     42c:	9f 91       	pop	r25
     42e:	8f 91       	pop	r24
     430:	7f 91       	pop	r23
     432:	6f 91       	pop	r22
     434:	5f 91       	pop	r21
     436:	4f 91       	pop	r20
     438:	3f 91       	pop	r19
     43a:	2f 91       	pop	r18
     43c:	0f 90       	pop	r0
     43e:	0f be       	out	0x3f, r0	; 63
     440:	0f 90       	pop	r0
     442:	1f 90       	pop	r1
     444:	18 95       	reti

00000446 <__vector_3>:
ISR(INT2_vect){
     446:	1f 92       	push	r1
     448:	0f 92       	push	r0
     44a:	0f b6       	in	r0, 0x3f	; 63
     44c:	0f 92       	push	r0
     44e:	11 24       	eor	r1, r1
     450:	ef 92       	push	r14
     452:	ff 92       	push	r15
     454:	0f 93       	push	r16
     456:	1f 93       	push	r17
     458:	2f 93       	push	r18
     45a:	3f 93       	push	r19
     45c:	4f 93       	push	r20
     45e:	5f 93       	push	r21
     460:	6f 93       	push	r22
     462:	7f 93       	push	r23
     464:	8f 93       	push	r24
     466:	9f 93       	push	r25
     468:	af 93       	push	r26
     46a:	bf 93       	push	r27
     46c:	ef 93       	push	r30
     46e:	ff 93       	push	r31
     470:	cf 93       	push	r28
     472:	df 93       	push	r29
     474:	cd b7       	in	r28, 0x3d	; 61
     476:	de b7       	in	r29, 0x3e	; 62
     478:	2a 97       	sbiw	r28, 0x0a	; 10
     47a:	de bf       	out	0x3e, r29	; 62
     47c:	cd bf       	out	0x3d, r28	; 61
     47e:	87 ea       	ldi	r24, 0xA7	; 167
     480:	91 e6       	ldi	r25, 0x61	; 97
     482:	01 97       	sbiw	r24, 0x01	; 1
     484:	f1 f7       	brne	.-4      	; 0x482 <__vector_3+0x3c>
     486:	00 c0       	rjmp	.+0      	; 0x488 <__vector_3+0x42>
     488:	00 00       	nop
	//printf("\r\n Element %u", OLED_contents.menu_index);
	
	_delay_ms(100);
	struct Can_Message rec_message = CAN_read_message();
     48a:	ce 01       	movw	r24, r28
     48c:	01 96       	adiw	r24, 0x01	; 1
     48e:	0e 94 78 01 	call	0x2f0	; 0x2f0 <CAN_read_message>
	if(rec_message.id != 0 & rec_message.id < 30){
     492:	89 81       	ldd	r24, Y+1	; 0x01
     494:	9f ef       	ldi	r25, 0xFF	; 255
     496:	98 0f       	add	r25, r24
     498:	9d 31       	cpi	r25, 0x1D	; 29
     49a:	a0 f5       	brcc	.+104    	; 0x504 <__stack+0x5>
		//printf("len: %i, id: %i, data: %i \r \n", rec_message.length, rec_message.id, rec_message.data[4]);
		printf("len: %i, id: %i \r \n", rec_message.length, rec_message.id);
     49c:	9a 81       	ldd	r25, Y+2	; 0x02
     49e:	e9 2e       	mov	r14, r25
     4a0:	f1 2c       	mov	r15, r1
     4a2:	1f 92       	push	r1
     4a4:	8f 93       	push	r24
     4a6:	1f 92       	push	r1
     4a8:	9f 93       	push	r25
     4aa:	89 e5       	ldi	r24, 0x59	; 89
     4ac:	91 e0       	ldi	r25, 0x01	; 1
     4ae:	9f 93       	push	r25
     4b0:	8f 93       	push	r24
     4b2:	0e 94 6d 04 	call	0x8da	; 0x8da <printf>
		for (int i = 0; i < rec_message.length; i++){
     4b6:	0f 90       	pop	r0
     4b8:	0f 90       	pop	r0
     4ba:	0f 90       	pop	r0
     4bc:	0f 90       	pop	r0
     4be:	0f 90       	pop	r0
     4c0:	0f 90       	pop	r0
     4c2:	00 e0       	ldi	r16, 0x00	; 0
     4c4:	10 e0       	ldi	r17, 0x00	; 0
     4c6:	1b c0       	rjmp	.+54     	; 0x4fe <__vector_3+0xb8>
			printf("DATA: %i \r \n", rec_message.data[i]);
     4c8:	e3 e0       	ldi	r30, 0x03	; 3
     4ca:	f0 e0       	ldi	r31, 0x00	; 0
     4cc:	ec 0f       	add	r30, r28
     4ce:	fd 1f       	adc	r31, r29
     4d0:	e0 0f       	add	r30, r16
     4d2:	f1 1f       	adc	r31, r17
     4d4:	80 81       	ld	r24, Z
     4d6:	1f 92       	push	r1
     4d8:	8f 93       	push	r24
     4da:	8d e6       	ldi	r24, 0x6D	; 109
     4dc:	91 e0       	ldi	r25, 0x01	; 1
     4de:	9f 93       	push	r25
     4e0:	8f 93       	push	r24
     4e2:	0e 94 6d 04 	call	0x8da	; 0x8da <printf>
     4e6:	83 ec       	ldi	r24, 0xC3	; 195
     4e8:	99 e0       	ldi	r25, 0x09	; 9
     4ea:	01 97       	sbiw	r24, 0x01	; 1
     4ec:	f1 f7       	brne	.-4      	; 0x4ea <__vector_3+0xa4>
     4ee:	00 c0       	rjmp	.+0      	; 0x4f0 <__vector_3+0xaa>
     4f0:	00 00       	nop
	_delay_ms(100);
	struct Can_Message rec_message = CAN_read_message();
	if(rec_message.id != 0 & rec_message.id < 30){
		//printf("len: %i, id: %i, data: %i \r \n", rec_message.length, rec_message.id, rec_message.data[4]);
		printf("len: %i, id: %i \r \n", rec_message.length, rec_message.id);
		for (int i = 0; i < rec_message.length; i++){
     4f2:	0f 5f       	subi	r16, 0xFF	; 255
     4f4:	1f 4f       	sbci	r17, 0xFF	; 255
     4f6:	0f 90       	pop	r0
     4f8:	0f 90       	pop	r0
     4fa:	0f 90       	pop	r0
     4fc:	0f 90       	pop	r0
     4fe:	0e 15       	cp	r16, r14
     500:	1f 05       	cpc	r17, r15
     502:	14 f3       	brlt	.-60     	; 0x4c8 <__vector_3+0x82>
			printf("DATA: %i \r \n", rec_message.data[i]);
			_delay_ms(10);
		}
	}
	
}
     504:	2a 96       	adiw	r28, 0x0a	; 10
     506:	0f b6       	in	r0, 0x3f	; 63
     508:	f8 94       	cli
     50a:	de bf       	out	0x3e, r29	; 62
     50c:	0f be       	out	0x3f, r0	; 63
     50e:	cd bf       	out	0x3d, r28	; 61
     510:	df 91       	pop	r29
     512:	cf 91       	pop	r28
     514:	ff 91       	pop	r31
     516:	ef 91       	pop	r30
     518:	bf 91       	pop	r27
     51a:	af 91       	pop	r26
     51c:	9f 91       	pop	r25
     51e:	8f 91       	pop	r24
     520:	7f 91       	pop	r23
     522:	6f 91       	pop	r22
     524:	5f 91       	pop	r21
     526:	4f 91       	pop	r20
     528:	3f 91       	pop	r19
     52a:	2f 91       	pop	r18
     52c:	1f 91       	pop	r17
     52e:	0f 91       	pop	r16
     530:	ff 90       	pop	r15
     532:	ef 90       	pop	r14
     534:	0f 90       	pop	r0
     536:	0f be       	out	0x3f, r0	; 63
     538:	0f 90       	pop	r0
     53a:	1f 90       	pop	r1
     53c:	18 95       	reti

0000053e <main>:


int main(void)
{
     53e:	cf 93       	push	r28
     540:	df 93       	push	r29
     542:	cd b7       	in	r28, 0x3d	; 61
     544:	de b7       	in	r29, 0x3e	; 62
     546:	2a 97       	sbiw	r28, 0x0a	; 10
     548:	0f b6       	in	r0, 0x3f	; 63
     54a:	f8 94       	cli
     54c:	de bf       	out	0x3e, r29	; 62
     54e:	0f be       	out	0x3f, r0	; 63
     550:	cd bf       	out	0x3d, r28	; 61

	//FIX CODE SO THIS ONLY RUNS ONCE
	USART_Init(31);
     552:	8f e1       	ldi	r24, 0x1F	; 31
     554:	90 e0       	ldi	r25, 0x00	; 0
     556:	0e 94 c8 01 	call	0x390	; 0x390 <USART_Init>
	fdevopen(USART_Transmit, USART_Receive);
     55a:	63 ed       	ldi	r22, 0xD3	; 211
     55c:	71 e0       	ldi	r23, 0x01	; 1
     55e:	8f ec       	ldi	r24, 0xCF	; 207
     560:	91 e0       	ldi	r25, 0x01	; 1
     562:	0e 94 22 04 	call	0x844	; 0x844 <fdevopen>
	
	adc_init();
     566:	0e 94 57 00 	call	0xae	; 0xae <adc_init>
	
	// PINx & 0x01
	cli();
     56a:	f8 94       	cli
	
	DDRD &= ~(1 << PIND)|(1 << PIND); //Set port to input
     56c:	20 b3       	in	r18, 0x10	; 16
     56e:	81 e0       	ldi	r24, 0x01	; 1
     570:	90 e0       	ldi	r25, 0x00	; 0
     572:	ac 01       	movw	r20, r24
     574:	02 c0       	rjmp	.+4      	; 0x57a <main+0x3c>
     576:	44 0f       	add	r20, r20
     578:	55 1f       	adc	r21, r21
     57a:	2a 95       	dec	r18
     57c:	e2 f7       	brpl	.-8      	; 0x576 <main+0x38>
     57e:	9a 01       	movw	r18, r20
     580:	20 95       	com	r18
     582:	30 95       	com	r19
     584:	40 b3       	in	r20, 0x10	; 16
     586:	02 c0       	rjmp	.+4      	; 0x58c <main+0x4e>
     588:	88 0f       	add	r24, r24
     58a:	99 1f       	adc	r25, r25
     58c:	4a 95       	dec	r20
     58e:	e2 f7       	brpl	.-8      	; 0x588 <main+0x4a>
     590:	82 2b       	or	r24, r18
     592:	93 2b       	or	r25, r19
     594:	91 b3       	in	r25, 0x11	; 17
     596:	89 23       	and	r24, r25
     598:	81 bb       	out	0x11, r24	; 17
	DDRE &= ~(1 << PINE0);
     59a:	86 b1       	in	r24, 0x06	; 6
     59c:	8e 7f       	andi	r24, 0xFE	; 254
     59e:	86 b9       	out	0x06, r24	; 6
	PORTE |= (1 << PINE0); // Internal pull up
     5a0:	87 b1       	in	r24, 0x07	; 7
     5a2:	81 60       	ori	r24, 0x01	; 1
     5a4:	87 b9       	out	0x07, r24	; 7
	
	MCUCR |= (1 << SRE ); // enable XMEM
     5a6:	85 b7       	in	r24, 0x35	; 53
     5a8:	80 68       	ori	r24, 0x80	; 128
     5aa:	85 bf       	out	0x35, r24	; 53
	MCUCR |= (1 << ISC11)|(1 << ISC10)|(1 << ISC01)|(1 << ISC00); //Sets the interrupt at positive flank
     5ac:	85 b7       	in	r24, 0x35	; 53
     5ae:	8f 60       	ori	r24, 0x0F	; 15
     5b0:	85 bf       	out	0x35, r24	; 53
	EMCUCR |= (0 << ISC2); // Rising edge on INT2
     5b2:	86 b7       	in	r24, 0x36	; 54
     5b4:	86 bf       	out	0x36, r24	; 54
	GICR |= (1 << INT0)|(1 << INT1)|(1 << INT2); //Enables the interrupt
     5b6:	8b b7       	in	r24, 0x3b	; 59
     5b8:	80 6e       	ori	r24, 0xE0	; 224
     5ba:	8b bf       	out	0x3b, r24	; 59
	SFIOR |= (1 << XMM0 ); // mask unused bits
     5bc:	80 b7       	in	r24, 0x30	; 48
     5be:	88 60       	ori	r24, 0x08	; 8
     5c0:	80 bf       	out	0x30, r24	; 48
	
	sei();
     5c2:	78 94       	sei
	adc_calibrate();
     5c4:	0e 94 7d 00 	call	0xfa	; 0xfa <adc_calibrate>
	OLED_init();
     5c8:	0e 94 6d 03 	call	0x6da	; 0x6da <OLED_init>
	OLED_reset();
     5cc:	0e 94 b3 03 	call	0x766	; 0x766 <OLED_reset>

	strcpy(OLED_contents.line_0, "-----MENU-----");
     5d0:	8f e0       	ldi	r24, 0x0F	; 15
     5d2:	e0 ec       	ldi	r30, 0xC0	; 192
     5d4:	f1 e0       	ldi	r31, 0x01	; 1
     5d6:	a5 ee       	ldi	r26, 0xE5	; 229
     5d8:	b1 e0       	ldi	r27, 0x01	; 1
     5da:	01 90       	ld	r0, Z+
     5dc:	0d 92       	st	X+, r0
     5de:	8a 95       	dec	r24
     5e0:	e1 f7       	brne	.-8      	; 0x5da <main+0x9c>
	strcpy(OLED_contents.line_1, "element 1");
     5e2:	8a e0       	ldi	r24, 0x0A	; 10
     5e4:	ea e7       	ldi	r30, 0x7A	; 122
     5e6:	f1 e0       	ldi	r31, 0x01	; 1
     5e8:	a4 ef       	ldi	r26, 0xF4	; 244
     5ea:	b1 e0       	ldi	r27, 0x01	; 1
     5ec:	01 90       	ld	r0, Z+
     5ee:	0d 92       	st	X+, r0
     5f0:	8a 95       	dec	r24
     5f2:	e1 f7       	brne	.-8      	; 0x5ec <main+0xae>
	strcpy(OLED_contents.line_2, "element 2");
     5f4:	8a e0       	ldi	r24, 0x0A	; 10
     5f6:	e4 e8       	ldi	r30, 0x84	; 132
     5f8:	f1 e0       	ldi	r31, 0x01	; 1
     5fa:	a3 e0       	ldi	r26, 0x03	; 3
     5fc:	b2 e0       	ldi	r27, 0x02	; 2
     5fe:	01 90       	ld	r0, Z+
     600:	0d 92       	st	X+, r0
     602:	8a 95       	dec	r24
     604:	e1 f7       	brne	.-8      	; 0x5fe <main+0xc0>
	strcpy(OLED_contents.line_3, "element 3");
     606:	8a e0       	ldi	r24, 0x0A	; 10
     608:	ee e8       	ldi	r30, 0x8E	; 142
     60a:	f1 e0       	ldi	r31, 0x01	; 1
     60c:	a2 e1       	ldi	r26, 0x12	; 18
     60e:	b2 e0       	ldi	r27, 0x02	; 2
     610:	01 90       	ld	r0, Z+
     612:	0d 92       	st	X+, r0
     614:	8a 95       	dec	r24
     616:	e1 f7       	brne	.-8      	; 0x610 <main+0xd2>
	strcpy(OLED_contents.line_4, "element 4");
     618:	8a e0       	ldi	r24, 0x0A	; 10
     61a:	e8 e9       	ldi	r30, 0x98	; 152
     61c:	f1 e0       	ldi	r31, 0x01	; 1
     61e:	a1 e2       	ldi	r26, 0x21	; 33
     620:	b2 e0       	ldi	r27, 0x02	; 2
     622:	01 90       	ld	r0, Z+
     624:	0d 92       	st	X+, r0
     626:	8a 95       	dec	r24
     628:	e1 f7       	brne	.-8      	; 0x622 <main+0xe4>
	strcpy(OLED_contents.line_5, "element 5");
     62a:	8a e0       	ldi	r24, 0x0A	; 10
     62c:	e2 ea       	ldi	r30, 0xA2	; 162
     62e:	f1 e0       	ldi	r31, 0x01	; 1
     630:	a0 e3       	ldi	r26, 0x30	; 48
     632:	b2 e0       	ldi	r27, 0x02	; 2
     634:	01 90       	ld	r0, Z+
     636:	0d 92       	st	X+, r0
     638:	8a 95       	dec	r24
     63a:	e1 f7       	brne	.-8      	; 0x634 <main+0xf6>
	strcpy(OLED_contents.line_6, "element 6");
     63c:	8a e0       	ldi	r24, 0x0A	; 10
     63e:	ec ea       	ldi	r30, 0xAC	; 172
     640:	f1 e0       	ldi	r31, 0x01	; 1
     642:	af e3       	ldi	r26, 0x3F	; 63
     644:	b2 e0       	ldi	r27, 0x02	; 2
     646:	01 90       	ld	r0, Z+
     648:	0d 92       	st	X+, r0
     64a:	8a 95       	dec	r24
     64c:	e1 f7       	brne	.-8      	; 0x646 <main+0x108>
	strcpy(OLED_contents.line_7, "element 7");
     64e:	8a e0       	ldi	r24, 0x0A	; 10
     650:	e6 eb       	ldi	r30, 0xB6	; 182
     652:	f1 e0       	ldi	r31, 0x01	; 1
     654:	ae e4       	ldi	r26, 0x4E	; 78
     656:	b2 e0       	ldi	r27, 0x02	; 2
     658:	01 90       	ld	r0, Z+
     65a:	0d 92       	st	X+, r0
     65c:	8a 95       	dec	r24
     65e:	e1 f7       	brne	.-8      	; 0x658 <main+0x11a>
	OLED_contents.menu_index = 1;
     660:	81 e0       	ldi	r24, 0x01	; 1
     662:	80 93 e4 01 	sts	0x01E4, r24	; 0x8001e4 <OLED_contents>
	
	CAN_init();
     666:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <CAN_init>
	
	struct Can_Message can_message;
	can_message.id = 25;
     66a:	89 e1       	ldi	r24, 0x19	; 25
     66c:	89 83       	std	Y+1, r24	; 0x01
	can_message.length = 6;
     66e:	86 e0       	ldi	r24, 0x06	; 6
     670:	8a 83       	std	Y+2, r24	; 0x02
	for (int i = 0; i < can_message.length; i++){
     672:	80 e0       	ldi	r24, 0x00	; 0
     674:	90 e0       	ldi	r25, 0x00	; 0
     676:	0f c0       	rjmp	.+30     	; 0x696 <main+0x158>
		can_message.data[i] = i*11;
     678:	e3 e0       	ldi	r30, 0x03	; 3
     67a:	f0 e0       	ldi	r31, 0x00	; 0
     67c:	ec 0f       	add	r30, r28
     67e:	fd 1f       	adc	r31, r29
     680:	e8 0f       	add	r30, r24
     682:	f9 1f       	adc	r31, r25
     684:	38 2f       	mov	r19, r24
     686:	33 0f       	add	r19, r19
     688:	23 2f       	mov	r18, r19
     68a:	22 0f       	add	r18, r18
     68c:	22 0f       	add	r18, r18
     68e:	23 0f       	add	r18, r19
     690:	28 0f       	add	r18, r24
     692:	20 83       	st	Z, r18
	CAN_init();
	
	struct Can_Message can_message;
	can_message.id = 25;
	can_message.length = 6;
	for (int i = 0; i < can_message.length; i++){
     694:	01 96       	adiw	r24, 0x01	; 1
     696:	86 30       	cpi	r24, 0x06	; 6
     698:	91 05       	cpc	r25, r1
     69a:	74 f3       	brlt	.-36     	; 0x678 <main+0x13a>
     69c:	e1 2c       	mov	r14, r1
     69e:	f1 2c       	mov	r15, r1
	
	int x = 0;
	
	while (1)
	{
		x ++;
     6a0:	5f ef       	ldi	r21, 0xFF	; 255
     6a2:	e5 1a       	sub	r14, r21
     6a4:	f5 0a       	sbc	r15, r21
		can_message.data[0] = x;
     6a6:	eb 82       	std	Y+3, r14	; 0x03
     6a8:	87 ea       	ldi	r24, 0xA7	; 167
     6aa:	91 e6       	ldi	r25, 0x61	; 97
     6ac:	01 97       	sbiw	r24, 0x01	; 1
     6ae:	f1 f7       	brne	.-4      	; 0x6ac <main+0x16e>
     6b0:	00 c0       	rjmp	.+0      	; 0x6b2 <main+0x174>
     6b2:	00 00       	nop
		_delay_ms(100);
		CAN_write_message(can_message);
     6b4:	09 81       	ldd	r16, Y+1	; 0x01
     6b6:	1a 81       	ldd	r17, Y+2	; 0x02
     6b8:	2b 81       	ldd	r18, Y+3	; 0x03
     6ba:	3c 81       	ldd	r19, Y+4	; 0x04
     6bc:	4d 81       	ldd	r20, Y+5	; 0x05
     6be:	5e 81       	ldd	r21, Y+6	; 0x06
     6c0:	6f 81       	ldd	r22, Y+7	; 0x07
     6c2:	78 85       	ldd	r23, Y+8	; 0x08
     6c4:	89 85       	ldd	r24, Y+9	; 0x09
     6c6:	9a 85       	ldd	r25, Y+10	; 0x0a
     6c8:	0e 94 21 01 	call	0x242	; 0x242 <CAN_write_message>
		CAN_request_to_send(0x01);
     6cc:	81 e0       	ldi	r24, 0x01	; 1
     6ce:	0e 94 bb 00 	call	0x176	; 0x176 <CAN_request_to_send>
     6d2:	e6 cf       	rjmp	.-52     	; 0x6a0 <main+0x162>

000006d4 <OLED_write_c>:
		OLED_print_arrow();
	}
	else{
		OLED_no_arrow();
	}
	OLED_printf(OLED_contents.line_7);
     6d4:	80 93 00 10 	sts	0x1000, r24	; 0x801000 <__bss_end+0xd99>
     6d8:	08 95       	ret

000006da <OLED_init>:
     6da:	8e ea       	ldi	r24, 0xAE	; 174
     6dc:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <OLED_write_c>
     6e0:	81 ea       	ldi	r24, 0xA1	; 161
     6e2:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <OLED_write_c>
     6e6:	8a ed       	ldi	r24, 0xDA	; 218
     6e8:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <OLED_write_c>
     6ec:	82 e1       	ldi	r24, 0x12	; 18
     6ee:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <OLED_write_c>
     6f2:	88 ec       	ldi	r24, 0xC8	; 200
     6f4:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <OLED_write_c>
     6f8:	88 ea       	ldi	r24, 0xA8	; 168
     6fa:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <OLED_write_c>
     6fe:	8f e3       	ldi	r24, 0x3F	; 63
     700:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <OLED_write_c>
     704:	85 ed       	ldi	r24, 0xD5	; 213
     706:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <OLED_write_c>
     70a:	80 e8       	ldi	r24, 0x80	; 128
     70c:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <OLED_write_c>
     710:	81 e8       	ldi	r24, 0x81	; 129
     712:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <OLED_write_c>
     716:	80 e5       	ldi	r24, 0x50	; 80
     718:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <OLED_write_c>
     71c:	89 ed       	ldi	r24, 0xD9	; 217
     71e:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <OLED_write_c>
     722:	81 e2       	ldi	r24, 0x21	; 33
     724:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <OLED_write_c>
     728:	80 e2       	ldi	r24, 0x20	; 32
     72a:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <OLED_write_c>
     72e:	82 e0       	ldi	r24, 0x02	; 2
     730:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <OLED_write_c>
     734:	8b ed       	ldi	r24, 0xDB	; 219
     736:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <OLED_write_c>
     73a:	80 e3       	ldi	r24, 0x30	; 48
     73c:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <OLED_write_c>
     740:	8d ea       	ldi	r24, 0xAD	; 173
     742:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <OLED_write_c>
     746:	80 e0       	ldi	r24, 0x00	; 0
     748:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <OLED_write_c>
     74c:	84 ea       	ldi	r24, 0xA4	; 164
     74e:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <OLED_write_c>
     752:	86 ea       	ldi	r24, 0xA6	; 166
     754:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <OLED_write_c>
     758:	8f ea       	ldi	r24, 0xAF	; 175
     75a:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <OLED_write_c>
     75e:	08 95       	ret

00000760 <OLED_write_d>:
     760:	80 93 00 12 	sts	0x1200, r24	; 0x801200 <__bss_end+0xf99>
     764:	08 95       	ret

00000766 <OLED_reset>:
		//}
		//OLED_printf(OLED_contents.line_content[i + 1]);
	//}
}

void OLED_reset(){
     766:	cf 93       	push	r28
	OLED_write_c(0b10110000);
     768:	80 eb       	ldi	r24, 0xB0	; 176
     76a:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <OLED_write_c>
	for (uint8_t i = 0; i < 128; i++){
     76e:	c0 e0       	ldi	r28, 0x00	; 0
     770:	04 c0       	rjmp	.+8      	; 0x77a <OLED_reset+0x14>
		OLED_write_d(0x00);
     772:	80 e0       	ldi	r24, 0x00	; 0
     774:	0e 94 b0 03 	call	0x760	; 0x760 <OLED_write_d>
	//}
}

void OLED_reset(){
	OLED_write_c(0b10110000);
	for (uint8_t i = 0; i < 128; i++){
     778:	cf 5f       	subi	r28, 0xFF	; 255
     77a:	cc 23       	and	r28, r28
     77c:	d4 f7       	brge	.-12     	; 0x772 <OLED_reset+0xc>
		OLED_write_d(0x00);
	}
	OLED_write_c(0b10110001);
     77e:	81 eb       	ldi	r24, 0xB1	; 177
     780:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <OLED_write_c>
	for (uint8_t i = 0; i < 128; i++){
     784:	c0 e0       	ldi	r28, 0x00	; 0
     786:	04 c0       	rjmp	.+8      	; 0x790 <OLED_reset+0x2a>
		OLED_write_d(0x00);
     788:	80 e0       	ldi	r24, 0x00	; 0
     78a:	0e 94 b0 03 	call	0x760	; 0x760 <OLED_write_d>
	OLED_write_c(0b10110000);
	for (uint8_t i = 0; i < 128; i++){
		OLED_write_d(0x00);
	}
	OLED_write_c(0b10110001);
	for (uint8_t i = 0; i < 128; i++){
     78e:	cf 5f       	subi	r28, 0xFF	; 255
     790:	cc 23       	and	r28, r28
     792:	d4 f7       	brge	.-12     	; 0x788 <OLED_reset+0x22>
		OLED_write_d(0x00);
	}
	OLED_write_c(0b10110010);
     794:	82 eb       	ldi	r24, 0xB2	; 178
     796:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <OLED_write_c>
	for (uint8_t i = 0; i < 128; i++){
     79a:	c0 e0       	ldi	r28, 0x00	; 0
     79c:	04 c0       	rjmp	.+8      	; 0x7a6 <OLED_reset+0x40>
		OLED_write_d(0x00);
     79e:	80 e0       	ldi	r24, 0x00	; 0
     7a0:	0e 94 b0 03 	call	0x760	; 0x760 <OLED_write_d>
	OLED_write_c(0b10110001);
	for (uint8_t i = 0; i < 128; i++){
		OLED_write_d(0x00);
	}
	OLED_write_c(0b10110010);
	for (uint8_t i = 0; i < 128; i++){
     7a4:	cf 5f       	subi	r28, 0xFF	; 255
     7a6:	cc 23       	and	r28, r28
     7a8:	d4 f7       	brge	.-12     	; 0x79e <OLED_reset+0x38>
		OLED_write_d(0x00);
	}
	OLED_write_c(0b10110011);
     7aa:	83 eb       	ldi	r24, 0xB3	; 179
     7ac:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <OLED_write_c>
	for (uint8_t i = 0; i < 128; i++){
     7b0:	c0 e0       	ldi	r28, 0x00	; 0
     7b2:	04 c0       	rjmp	.+8      	; 0x7bc <OLED_reset+0x56>
		OLED_write_d(0x00);
     7b4:	80 e0       	ldi	r24, 0x00	; 0
     7b6:	0e 94 b0 03 	call	0x760	; 0x760 <OLED_write_d>
	OLED_write_c(0b10110010);
	for (uint8_t i = 0; i < 128; i++){
		OLED_write_d(0x00);
	}
	OLED_write_c(0b10110011);
	for (uint8_t i = 0; i < 128; i++){
     7ba:	cf 5f       	subi	r28, 0xFF	; 255
     7bc:	cc 23       	and	r28, r28
     7be:	d4 f7       	brge	.-12     	; 0x7b4 <OLED_reset+0x4e>
		OLED_write_d(0x00);
	}
	OLED_write_c(0b10110100);
     7c0:	84 eb       	ldi	r24, 0xB4	; 180
     7c2:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <OLED_write_c>
	for (uint8_t i = 0; i < 128; i++){
     7c6:	c0 e0       	ldi	r28, 0x00	; 0
     7c8:	04 c0       	rjmp	.+8      	; 0x7d2 <OLED_reset+0x6c>
		OLED_write_d(0x00);
     7ca:	80 e0       	ldi	r24, 0x00	; 0
     7cc:	0e 94 b0 03 	call	0x760	; 0x760 <OLED_write_d>
	OLED_write_c(0b10110011);
	for (uint8_t i = 0; i < 128; i++){
		OLED_write_d(0x00);
	}
	OLED_write_c(0b10110100);
	for (uint8_t i = 0; i < 128; i++){
     7d0:	cf 5f       	subi	r28, 0xFF	; 255
     7d2:	cc 23       	and	r28, r28
     7d4:	d4 f7       	brge	.-12     	; 0x7ca <OLED_reset+0x64>
		OLED_write_d(0x00);
	}
	OLED_write_c(0b10110101);
     7d6:	85 eb       	ldi	r24, 0xB5	; 181
     7d8:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <OLED_write_c>
	for (uint8_t i = 0; i < 128; i++){
     7dc:	c0 e0       	ldi	r28, 0x00	; 0
     7de:	04 c0       	rjmp	.+8      	; 0x7e8 <OLED_reset+0x82>
		OLED_write_d(0x00);
     7e0:	80 e0       	ldi	r24, 0x00	; 0
     7e2:	0e 94 b0 03 	call	0x760	; 0x760 <OLED_write_d>
	OLED_write_c(0b10110100);
	for (uint8_t i = 0; i < 128; i++){
		OLED_write_d(0x00);
	}
	OLED_write_c(0b10110101);
	for (uint8_t i = 0; i < 128; i++){
     7e6:	cf 5f       	subi	r28, 0xFF	; 255
     7e8:	cc 23       	and	r28, r28
     7ea:	d4 f7       	brge	.-12     	; 0x7e0 <OLED_reset+0x7a>
		OLED_write_d(0x00);
	}
	OLED_write_c(0b10110110);
     7ec:	86 eb       	ldi	r24, 0xB6	; 182
     7ee:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <OLED_write_c>
	for (uint8_t i = 0; i < 128; i++){
     7f2:	c0 e0       	ldi	r28, 0x00	; 0
     7f4:	04 c0       	rjmp	.+8      	; 0x7fe <OLED_reset+0x98>
		OLED_write_d(0x00);
     7f6:	80 e0       	ldi	r24, 0x00	; 0
     7f8:	0e 94 b0 03 	call	0x760	; 0x760 <OLED_write_d>
	OLED_write_c(0b10110101);
	for (uint8_t i = 0; i < 128; i++){
		OLED_write_d(0x00);
	}
	OLED_write_c(0b10110110);
	for (uint8_t i = 0; i < 128; i++){
     7fc:	cf 5f       	subi	r28, 0xFF	; 255
     7fe:	cc 23       	and	r28, r28
     800:	d4 f7       	brge	.-12     	; 0x7f6 <OLED_reset+0x90>
		OLED_write_d(0x00);
	}
	OLED_write_c(0b10110111);
     802:	87 eb       	ldi	r24, 0xB7	; 183
     804:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <OLED_write_c>
	for (uint8_t i = 0; i < 128; i++){
     808:	c0 e0       	ldi	r28, 0x00	; 0
     80a:	04 c0       	rjmp	.+8      	; 0x814 <OLED_reset+0xae>
		OLED_write_d(0x00);
     80c:	80 e0       	ldi	r24, 0x00	; 0
     80e:	0e 94 b0 03 	call	0x760	; 0x760 <OLED_write_d>
	OLED_write_c(0b10110110);
	for (uint8_t i = 0; i < 128; i++){
		OLED_write_d(0x00);
	}
	OLED_write_c(0b10110111);
	for (uint8_t i = 0; i < 128; i++){
     812:	cf 5f       	subi	r28, 0xFF	; 255
     814:	cc 23       	and	r28, r28
     816:	d4 f7       	brge	.-12     	; 0x80c <OLED_reset+0xa6>
		OLED_write_d(0x00);
	}
}
     818:	cf 91       	pop	r28
     81a:	08 95       	ret

0000081c <SPI_init>:
	SPDR = cData;
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)));
	result = SPDR;
	return result;
}
     81c:	87 b3       	in	r24, 0x17	; 23
     81e:	80 6b       	ori	r24, 0xB0	; 176
     820:	87 bb       	out	0x17, r24	; 23
     822:	8d b1       	in	r24, 0x0d	; 13
     824:	81 65       	ori	r24, 0x51	; 81
     826:	8d b9       	out	0x0d, r24	; 13
     828:	88 b3       	in	r24, 0x18	; 24
     82a:	80 61       	ori	r24, 0x10	; 16
     82c:	88 bb       	out	0x18, r24	; 24
     82e:	08 95       	ret

00000830 <SPI_write>:



SPI_write(uint8_t cData){
	SPDR = cData;
     830:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));
     832:	77 9b       	sbis	0x0e, 7	; 14
     834:	fe cf       	rjmp	.-4      	; 0x832 <SPI_write+0x2>
}
     836:	08 95       	ret

00000838 <SPI_read>:

uint8_t SPI_read(){
	uint8_t result;
	SPDR = 0xFF;
     838:	8f ef       	ldi	r24, 0xFF	; 255
     83a:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));
     83c:	77 9b       	sbis	0x0e, 7	; 14
     83e:	fe cf       	rjmp	.-4      	; 0x83c <SPI_read+0x4>
	result = SPDR;
     840:	8f b1       	in	r24, 0x0f	; 15
	return result;
     842:	08 95       	ret

00000844 <fdevopen>:
     844:	0f 93       	push	r16
     846:	1f 93       	push	r17
     848:	cf 93       	push	r28
     84a:	df 93       	push	r29
     84c:	00 97       	sbiw	r24, 0x00	; 0
     84e:	31 f4       	brne	.+12     	; 0x85c <fdevopen+0x18>
     850:	61 15       	cp	r22, r1
     852:	71 05       	cpc	r23, r1
     854:	19 f4       	brne	.+6      	; 0x85c <fdevopen+0x18>
     856:	80 e0       	ldi	r24, 0x00	; 0
     858:	90 e0       	ldi	r25, 0x00	; 0
     85a:	3a c0       	rjmp	.+116    	; 0x8d0 <fdevopen+0x8c>
     85c:	8b 01       	movw	r16, r22
     85e:	ec 01       	movw	r28, r24
     860:	6e e0       	ldi	r22, 0x0E	; 14
     862:	70 e0       	ldi	r23, 0x00	; 0
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	0e 94 94 06 	call	0xd28	; 0xd28 <calloc>
     86c:	fc 01       	movw	r30, r24
     86e:	89 2b       	or	r24, r25
     870:	91 f3       	breq	.-28     	; 0x856 <fdevopen+0x12>
     872:	80 e8       	ldi	r24, 0x80	; 128
     874:	83 83       	std	Z+3, r24	; 0x03
     876:	01 15       	cp	r16, r1
     878:	11 05       	cpc	r17, r1
     87a:	71 f0       	breq	.+28     	; 0x898 <fdevopen+0x54>
     87c:	13 87       	std	Z+11, r17	; 0x0b
     87e:	02 87       	std	Z+10, r16	; 0x0a
     880:	81 e8       	ldi	r24, 0x81	; 129
     882:	83 83       	std	Z+3, r24	; 0x03
     884:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <__iob>
     888:	90 91 5e 02 	lds	r25, 0x025E	; 0x80025e <__iob+0x1>
     88c:	89 2b       	or	r24, r25
     88e:	21 f4       	brne	.+8      	; 0x898 <fdevopen+0x54>
     890:	f0 93 5e 02 	sts	0x025E, r31	; 0x80025e <__iob+0x1>
     894:	e0 93 5d 02 	sts	0x025D, r30	; 0x80025d <__iob>
     898:	20 97       	sbiw	r28, 0x00	; 0
     89a:	c9 f0       	breq	.+50     	; 0x8ce <fdevopen+0x8a>
     89c:	d1 87       	std	Z+9, r29	; 0x09
     89e:	c0 87       	std	Z+8, r28	; 0x08
     8a0:	83 81       	ldd	r24, Z+3	; 0x03
     8a2:	82 60       	ori	r24, 0x02	; 2
     8a4:	83 83       	std	Z+3, r24	; 0x03
     8a6:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <__iob+0x2>
     8aa:	90 91 60 02 	lds	r25, 0x0260	; 0x800260 <__iob+0x3>
     8ae:	89 2b       	or	r24, r25
     8b0:	71 f4       	brne	.+28     	; 0x8ce <fdevopen+0x8a>
     8b2:	f0 93 60 02 	sts	0x0260, r31	; 0x800260 <__iob+0x3>
     8b6:	e0 93 5f 02 	sts	0x025F, r30	; 0x80025f <__iob+0x2>
     8ba:	80 91 61 02 	lds	r24, 0x0261	; 0x800261 <__iob+0x4>
     8be:	90 91 62 02 	lds	r25, 0x0262	; 0x800262 <__iob+0x5>
     8c2:	89 2b       	or	r24, r25
     8c4:	21 f4       	brne	.+8      	; 0x8ce <fdevopen+0x8a>
     8c6:	f0 93 62 02 	sts	0x0262, r31	; 0x800262 <__iob+0x5>
     8ca:	e0 93 61 02 	sts	0x0261, r30	; 0x800261 <__iob+0x4>
     8ce:	cf 01       	movw	r24, r30
     8d0:	df 91       	pop	r29
     8d2:	cf 91       	pop	r28
     8d4:	1f 91       	pop	r17
     8d6:	0f 91       	pop	r16
     8d8:	08 95       	ret

000008da <printf>:
     8da:	a0 e0       	ldi	r26, 0x00	; 0
     8dc:	b0 e0       	ldi	r27, 0x00	; 0
     8de:	e3 e7       	ldi	r30, 0x73	; 115
     8e0:	f4 e0       	ldi	r31, 0x04	; 4
     8e2:	0c 94 98 08 	jmp	0x1130	; 0x1130 <__prologue_saves__+0x20>
     8e6:	ae 01       	movw	r20, r28
     8e8:	4b 5f       	subi	r20, 0xFB	; 251
     8ea:	5f 4f       	sbci	r21, 0xFF	; 255
     8ec:	fa 01       	movw	r30, r20
     8ee:	61 91       	ld	r22, Z+
     8f0:	71 91       	ld	r23, Z+
     8f2:	af 01       	movw	r20, r30
     8f4:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <__iob+0x2>
     8f8:	90 91 60 02 	lds	r25, 0x0260	; 0x800260 <__iob+0x3>
     8fc:	0e 94 b3 04 	call	0x966	; 0x966 <vfprintf>
     900:	e2 e0       	ldi	r30, 0x02	; 2
     902:	0c 94 b4 08 	jmp	0x1168	; 0x1168 <__epilogue_restores__+0x20>

00000906 <puts>:
     906:	0f 93       	push	r16
     908:	1f 93       	push	r17
     90a:	cf 93       	push	r28
     90c:	df 93       	push	r29
     90e:	e0 91 5f 02 	lds	r30, 0x025F	; 0x80025f <__iob+0x2>
     912:	f0 91 60 02 	lds	r31, 0x0260	; 0x800260 <__iob+0x3>
     916:	23 81       	ldd	r18, Z+3	; 0x03
     918:	21 ff       	sbrs	r18, 1
     91a:	1b c0       	rjmp	.+54     	; 0x952 <puts+0x4c>
     91c:	8c 01       	movw	r16, r24
     91e:	d0 e0       	ldi	r29, 0x00	; 0
     920:	c0 e0       	ldi	r28, 0x00	; 0
     922:	f8 01       	movw	r30, r16
     924:	81 91       	ld	r24, Z+
     926:	8f 01       	movw	r16, r30
     928:	60 91 5f 02 	lds	r22, 0x025F	; 0x80025f <__iob+0x2>
     92c:	70 91 60 02 	lds	r23, 0x0260	; 0x800260 <__iob+0x3>
     930:	db 01       	movw	r26, r22
     932:	18 96       	adiw	r26, 0x08	; 8
     934:	ed 91       	ld	r30, X+
     936:	fc 91       	ld	r31, X
     938:	19 97       	sbiw	r26, 0x09	; 9
     93a:	88 23       	and	r24, r24
     93c:	31 f0       	breq	.+12     	; 0x94a <puts+0x44>
     93e:	09 95       	icall
     940:	89 2b       	or	r24, r25
     942:	79 f3       	breq	.-34     	; 0x922 <puts+0x1c>
     944:	df ef       	ldi	r29, 0xFF	; 255
     946:	cf ef       	ldi	r28, 0xFF	; 255
     948:	ec cf       	rjmp	.-40     	; 0x922 <puts+0x1c>
     94a:	8a e0       	ldi	r24, 0x0A	; 10
     94c:	09 95       	icall
     94e:	89 2b       	or	r24, r25
     950:	19 f0       	breq	.+6      	; 0x958 <puts+0x52>
     952:	8f ef       	ldi	r24, 0xFF	; 255
     954:	9f ef       	ldi	r25, 0xFF	; 255
     956:	02 c0       	rjmp	.+4      	; 0x95c <puts+0x56>
     958:	8d 2f       	mov	r24, r29
     95a:	9c 2f       	mov	r25, r28
     95c:	df 91       	pop	r29
     95e:	cf 91       	pop	r28
     960:	1f 91       	pop	r17
     962:	0f 91       	pop	r16
     964:	08 95       	ret

00000966 <vfprintf>:
     966:	ab e0       	ldi	r26, 0x0B	; 11
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 88 08 	jmp	0x1110	; 0x1110 <__prologue_saves__>
     972:	6c 01       	movw	r12, r24
     974:	7b 01       	movw	r14, r22
     976:	8a 01       	movw	r16, r20
     978:	fc 01       	movw	r30, r24
     97a:	17 82       	std	Z+7, r1	; 0x07
     97c:	16 82       	std	Z+6, r1	; 0x06
     97e:	83 81       	ldd	r24, Z+3	; 0x03
     980:	81 ff       	sbrs	r24, 1
     982:	cc c1       	rjmp	.+920    	; 0xd1c <vfprintf+0x3b6>
     984:	ce 01       	movw	r24, r28
     986:	01 96       	adiw	r24, 0x01	; 1
     988:	3c 01       	movw	r6, r24
     98a:	f6 01       	movw	r30, r12
     98c:	93 81       	ldd	r25, Z+3	; 0x03
     98e:	f7 01       	movw	r30, r14
     990:	93 fd       	sbrc	r25, 3
     992:	85 91       	lpm	r24, Z+
     994:	93 ff       	sbrs	r25, 3
     996:	81 91       	ld	r24, Z+
     998:	7f 01       	movw	r14, r30
     99a:	88 23       	and	r24, r24
     99c:	09 f4       	brne	.+2      	; 0x9a0 <vfprintf+0x3a>
     99e:	ba c1       	rjmp	.+884    	; 0xd14 <vfprintf+0x3ae>
     9a0:	85 32       	cpi	r24, 0x25	; 37
     9a2:	39 f4       	brne	.+14     	; 0x9b2 <vfprintf+0x4c>
     9a4:	93 fd       	sbrc	r25, 3
     9a6:	85 91       	lpm	r24, Z+
     9a8:	93 ff       	sbrs	r25, 3
     9aa:	81 91       	ld	r24, Z+
     9ac:	7f 01       	movw	r14, r30
     9ae:	85 32       	cpi	r24, 0x25	; 37
     9b0:	29 f4       	brne	.+10     	; 0x9bc <vfprintf+0x56>
     9b2:	b6 01       	movw	r22, r12
     9b4:	90 e0       	ldi	r25, 0x00	; 0
     9b6:	0e 94 ee 07 	call	0xfdc	; 0xfdc <fputc>
     9ba:	e7 cf       	rjmp	.-50     	; 0x98a <vfprintf+0x24>
     9bc:	91 2c       	mov	r9, r1
     9be:	21 2c       	mov	r2, r1
     9c0:	31 2c       	mov	r3, r1
     9c2:	ff e1       	ldi	r31, 0x1F	; 31
     9c4:	f3 15       	cp	r31, r3
     9c6:	d8 f0       	brcs	.+54     	; 0x9fe <vfprintf+0x98>
     9c8:	8b 32       	cpi	r24, 0x2B	; 43
     9ca:	79 f0       	breq	.+30     	; 0x9ea <vfprintf+0x84>
     9cc:	38 f4       	brcc	.+14     	; 0x9dc <vfprintf+0x76>
     9ce:	80 32       	cpi	r24, 0x20	; 32
     9d0:	79 f0       	breq	.+30     	; 0x9f0 <vfprintf+0x8a>
     9d2:	83 32       	cpi	r24, 0x23	; 35
     9d4:	a1 f4       	brne	.+40     	; 0x9fe <vfprintf+0x98>
     9d6:	23 2d       	mov	r18, r3
     9d8:	20 61       	ori	r18, 0x10	; 16
     9da:	1d c0       	rjmp	.+58     	; 0xa16 <vfprintf+0xb0>
     9dc:	8d 32       	cpi	r24, 0x2D	; 45
     9de:	61 f0       	breq	.+24     	; 0x9f8 <vfprintf+0x92>
     9e0:	80 33       	cpi	r24, 0x30	; 48
     9e2:	69 f4       	brne	.+26     	; 0x9fe <vfprintf+0x98>
     9e4:	23 2d       	mov	r18, r3
     9e6:	21 60       	ori	r18, 0x01	; 1
     9e8:	16 c0       	rjmp	.+44     	; 0xa16 <vfprintf+0xb0>
     9ea:	83 2d       	mov	r24, r3
     9ec:	82 60       	ori	r24, 0x02	; 2
     9ee:	38 2e       	mov	r3, r24
     9f0:	e3 2d       	mov	r30, r3
     9f2:	e4 60       	ori	r30, 0x04	; 4
     9f4:	3e 2e       	mov	r3, r30
     9f6:	2a c0       	rjmp	.+84     	; 0xa4c <vfprintf+0xe6>
     9f8:	f3 2d       	mov	r31, r3
     9fa:	f8 60       	ori	r31, 0x08	; 8
     9fc:	1d c0       	rjmp	.+58     	; 0xa38 <vfprintf+0xd2>
     9fe:	37 fc       	sbrc	r3, 7
     a00:	2d c0       	rjmp	.+90     	; 0xa5c <vfprintf+0xf6>
     a02:	20 ed       	ldi	r18, 0xD0	; 208
     a04:	28 0f       	add	r18, r24
     a06:	2a 30       	cpi	r18, 0x0A	; 10
     a08:	40 f0       	brcs	.+16     	; 0xa1a <vfprintf+0xb4>
     a0a:	8e 32       	cpi	r24, 0x2E	; 46
     a0c:	b9 f4       	brne	.+46     	; 0xa3c <vfprintf+0xd6>
     a0e:	36 fc       	sbrc	r3, 6
     a10:	81 c1       	rjmp	.+770    	; 0xd14 <vfprintf+0x3ae>
     a12:	23 2d       	mov	r18, r3
     a14:	20 64       	ori	r18, 0x40	; 64
     a16:	32 2e       	mov	r3, r18
     a18:	19 c0       	rjmp	.+50     	; 0xa4c <vfprintf+0xe6>
     a1a:	36 fe       	sbrs	r3, 6
     a1c:	06 c0       	rjmp	.+12     	; 0xa2a <vfprintf+0xc4>
     a1e:	8a e0       	ldi	r24, 0x0A	; 10
     a20:	98 9e       	mul	r9, r24
     a22:	20 0d       	add	r18, r0
     a24:	11 24       	eor	r1, r1
     a26:	92 2e       	mov	r9, r18
     a28:	11 c0       	rjmp	.+34     	; 0xa4c <vfprintf+0xe6>
     a2a:	ea e0       	ldi	r30, 0x0A	; 10
     a2c:	2e 9e       	mul	r2, r30
     a2e:	20 0d       	add	r18, r0
     a30:	11 24       	eor	r1, r1
     a32:	22 2e       	mov	r2, r18
     a34:	f3 2d       	mov	r31, r3
     a36:	f0 62       	ori	r31, 0x20	; 32
     a38:	3f 2e       	mov	r3, r31
     a3a:	08 c0       	rjmp	.+16     	; 0xa4c <vfprintf+0xe6>
     a3c:	8c 36       	cpi	r24, 0x6C	; 108
     a3e:	21 f4       	brne	.+8      	; 0xa48 <vfprintf+0xe2>
     a40:	83 2d       	mov	r24, r3
     a42:	80 68       	ori	r24, 0x80	; 128
     a44:	38 2e       	mov	r3, r24
     a46:	02 c0       	rjmp	.+4      	; 0xa4c <vfprintf+0xe6>
     a48:	88 36       	cpi	r24, 0x68	; 104
     a4a:	41 f4       	brne	.+16     	; 0xa5c <vfprintf+0xf6>
     a4c:	f7 01       	movw	r30, r14
     a4e:	93 fd       	sbrc	r25, 3
     a50:	85 91       	lpm	r24, Z+
     a52:	93 ff       	sbrs	r25, 3
     a54:	81 91       	ld	r24, Z+
     a56:	7f 01       	movw	r14, r30
     a58:	81 11       	cpse	r24, r1
     a5a:	b3 cf       	rjmp	.-154    	; 0x9c2 <vfprintf+0x5c>
     a5c:	98 2f       	mov	r25, r24
     a5e:	9f 7d       	andi	r25, 0xDF	; 223
     a60:	95 54       	subi	r25, 0x45	; 69
     a62:	93 30       	cpi	r25, 0x03	; 3
     a64:	28 f4       	brcc	.+10     	; 0xa70 <vfprintf+0x10a>
     a66:	0c 5f       	subi	r16, 0xFC	; 252
     a68:	1f 4f       	sbci	r17, 0xFF	; 255
     a6a:	9f e3       	ldi	r25, 0x3F	; 63
     a6c:	99 83       	std	Y+1, r25	; 0x01
     a6e:	0d c0       	rjmp	.+26     	; 0xa8a <vfprintf+0x124>
     a70:	83 36       	cpi	r24, 0x63	; 99
     a72:	31 f0       	breq	.+12     	; 0xa80 <vfprintf+0x11a>
     a74:	83 37       	cpi	r24, 0x73	; 115
     a76:	71 f0       	breq	.+28     	; 0xa94 <vfprintf+0x12e>
     a78:	83 35       	cpi	r24, 0x53	; 83
     a7a:	09 f0       	breq	.+2      	; 0xa7e <vfprintf+0x118>
     a7c:	59 c0       	rjmp	.+178    	; 0xb30 <vfprintf+0x1ca>
     a7e:	21 c0       	rjmp	.+66     	; 0xac2 <vfprintf+0x15c>
     a80:	f8 01       	movw	r30, r16
     a82:	80 81       	ld	r24, Z
     a84:	89 83       	std	Y+1, r24	; 0x01
     a86:	0e 5f       	subi	r16, 0xFE	; 254
     a88:	1f 4f       	sbci	r17, 0xFF	; 255
     a8a:	88 24       	eor	r8, r8
     a8c:	83 94       	inc	r8
     a8e:	91 2c       	mov	r9, r1
     a90:	53 01       	movw	r10, r6
     a92:	13 c0       	rjmp	.+38     	; 0xaba <vfprintf+0x154>
     a94:	28 01       	movw	r4, r16
     a96:	f2 e0       	ldi	r31, 0x02	; 2
     a98:	4f 0e       	add	r4, r31
     a9a:	51 1c       	adc	r5, r1
     a9c:	f8 01       	movw	r30, r16
     a9e:	a0 80       	ld	r10, Z
     aa0:	b1 80       	ldd	r11, Z+1	; 0x01
     aa2:	36 fe       	sbrs	r3, 6
     aa4:	03 c0       	rjmp	.+6      	; 0xaac <vfprintf+0x146>
     aa6:	69 2d       	mov	r22, r9
     aa8:	70 e0       	ldi	r23, 0x00	; 0
     aaa:	02 c0       	rjmp	.+4      	; 0xab0 <vfprintf+0x14a>
     aac:	6f ef       	ldi	r22, 0xFF	; 255
     aae:	7f ef       	ldi	r23, 0xFF	; 255
     ab0:	c5 01       	movw	r24, r10
     ab2:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <strnlen>
     ab6:	4c 01       	movw	r8, r24
     ab8:	82 01       	movw	r16, r4
     aba:	f3 2d       	mov	r31, r3
     abc:	ff 77       	andi	r31, 0x7F	; 127
     abe:	3f 2e       	mov	r3, r31
     ac0:	16 c0       	rjmp	.+44     	; 0xaee <vfprintf+0x188>
     ac2:	28 01       	movw	r4, r16
     ac4:	22 e0       	ldi	r18, 0x02	; 2
     ac6:	42 0e       	add	r4, r18
     ac8:	51 1c       	adc	r5, r1
     aca:	f8 01       	movw	r30, r16
     acc:	a0 80       	ld	r10, Z
     ace:	b1 80       	ldd	r11, Z+1	; 0x01
     ad0:	36 fe       	sbrs	r3, 6
     ad2:	03 c0       	rjmp	.+6      	; 0xada <vfprintf+0x174>
     ad4:	69 2d       	mov	r22, r9
     ad6:	70 e0       	ldi	r23, 0x00	; 0
     ad8:	02 c0       	rjmp	.+4      	; 0xade <vfprintf+0x178>
     ada:	6f ef       	ldi	r22, 0xFF	; 255
     adc:	7f ef       	ldi	r23, 0xFF	; 255
     ade:	c5 01       	movw	r24, r10
     ae0:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <strnlen_P>
     ae4:	4c 01       	movw	r8, r24
     ae6:	f3 2d       	mov	r31, r3
     ae8:	f0 68       	ori	r31, 0x80	; 128
     aea:	3f 2e       	mov	r3, r31
     aec:	82 01       	movw	r16, r4
     aee:	33 fc       	sbrc	r3, 3
     af0:	1b c0       	rjmp	.+54     	; 0xb28 <vfprintf+0x1c2>
     af2:	82 2d       	mov	r24, r2
     af4:	90 e0       	ldi	r25, 0x00	; 0
     af6:	88 16       	cp	r8, r24
     af8:	99 06       	cpc	r9, r25
     afa:	b0 f4       	brcc	.+44     	; 0xb28 <vfprintf+0x1c2>
     afc:	b6 01       	movw	r22, r12
     afe:	80 e2       	ldi	r24, 0x20	; 32
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	0e 94 ee 07 	call	0xfdc	; 0xfdc <fputc>
     b06:	2a 94       	dec	r2
     b08:	f4 cf       	rjmp	.-24     	; 0xaf2 <vfprintf+0x18c>
     b0a:	f5 01       	movw	r30, r10
     b0c:	37 fc       	sbrc	r3, 7
     b0e:	85 91       	lpm	r24, Z+
     b10:	37 fe       	sbrs	r3, 7
     b12:	81 91       	ld	r24, Z+
     b14:	5f 01       	movw	r10, r30
     b16:	b6 01       	movw	r22, r12
     b18:	90 e0       	ldi	r25, 0x00	; 0
     b1a:	0e 94 ee 07 	call	0xfdc	; 0xfdc <fputc>
     b1e:	21 10       	cpse	r2, r1
     b20:	2a 94       	dec	r2
     b22:	21 e0       	ldi	r18, 0x01	; 1
     b24:	82 1a       	sub	r8, r18
     b26:	91 08       	sbc	r9, r1
     b28:	81 14       	cp	r8, r1
     b2a:	91 04       	cpc	r9, r1
     b2c:	71 f7       	brne	.-36     	; 0xb0a <vfprintf+0x1a4>
     b2e:	e8 c0       	rjmp	.+464    	; 0xd00 <vfprintf+0x39a>
     b30:	84 36       	cpi	r24, 0x64	; 100
     b32:	11 f0       	breq	.+4      	; 0xb38 <vfprintf+0x1d2>
     b34:	89 36       	cpi	r24, 0x69	; 105
     b36:	41 f5       	brne	.+80     	; 0xb88 <vfprintf+0x222>
     b38:	f8 01       	movw	r30, r16
     b3a:	37 fe       	sbrs	r3, 7
     b3c:	07 c0       	rjmp	.+14     	; 0xb4c <vfprintf+0x1e6>
     b3e:	60 81       	ld	r22, Z
     b40:	71 81       	ldd	r23, Z+1	; 0x01
     b42:	82 81       	ldd	r24, Z+2	; 0x02
     b44:	93 81       	ldd	r25, Z+3	; 0x03
     b46:	0c 5f       	subi	r16, 0xFC	; 252
     b48:	1f 4f       	sbci	r17, 0xFF	; 255
     b4a:	08 c0       	rjmp	.+16     	; 0xb5c <vfprintf+0x1f6>
     b4c:	60 81       	ld	r22, Z
     b4e:	71 81       	ldd	r23, Z+1	; 0x01
     b50:	07 2e       	mov	r0, r23
     b52:	00 0c       	add	r0, r0
     b54:	88 0b       	sbc	r24, r24
     b56:	99 0b       	sbc	r25, r25
     b58:	0e 5f       	subi	r16, 0xFE	; 254
     b5a:	1f 4f       	sbci	r17, 0xFF	; 255
     b5c:	f3 2d       	mov	r31, r3
     b5e:	ff 76       	andi	r31, 0x6F	; 111
     b60:	3f 2e       	mov	r3, r31
     b62:	97 ff       	sbrs	r25, 7
     b64:	09 c0       	rjmp	.+18     	; 0xb78 <vfprintf+0x212>
     b66:	90 95       	com	r25
     b68:	80 95       	com	r24
     b6a:	70 95       	com	r23
     b6c:	61 95       	neg	r22
     b6e:	7f 4f       	sbci	r23, 0xFF	; 255
     b70:	8f 4f       	sbci	r24, 0xFF	; 255
     b72:	9f 4f       	sbci	r25, 0xFF	; 255
     b74:	f0 68       	ori	r31, 0x80	; 128
     b76:	3f 2e       	mov	r3, r31
     b78:	2a e0       	ldi	r18, 0x0A	; 10
     b7a:	30 e0       	ldi	r19, 0x00	; 0
     b7c:	a3 01       	movw	r20, r6
     b7e:	0e 94 2a 08 	call	0x1054	; 0x1054 <__ultoa_invert>
     b82:	88 2e       	mov	r8, r24
     b84:	86 18       	sub	r8, r6
     b86:	45 c0       	rjmp	.+138    	; 0xc12 <vfprintf+0x2ac>
     b88:	85 37       	cpi	r24, 0x75	; 117
     b8a:	31 f4       	brne	.+12     	; 0xb98 <vfprintf+0x232>
     b8c:	23 2d       	mov	r18, r3
     b8e:	2f 7e       	andi	r18, 0xEF	; 239
     b90:	b2 2e       	mov	r11, r18
     b92:	2a e0       	ldi	r18, 0x0A	; 10
     b94:	30 e0       	ldi	r19, 0x00	; 0
     b96:	25 c0       	rjmp	.+74     	; 0xbe2 <vfprintf+0x27c>
     b98:	93 2d       	mov	r25, r3
     b9a:	99 7f       	andi	r25, 0xF9	; 249
     b9c:	b9 2e       	mov	r11, r25
     b9e:	8f 36       	cpi	r24, 0x6F	; 111
     ba0:	c1 f0       	breq	.+48     	; 0xbd2 <vfprintf+0x26c>
     ba2:	18 f4       	brcc	.+6      	; 0xbaa <vfprintf+0x244>
     ba4:	88 35       	cpi	r24, 0x58	; 88
     ba6:	79 f0       	breq	.+30     	; 0xbc6 <vfprintf+0x260>
     ba8:	b5 c0       	rjmp	.+362    	; 0xd14 <vfprintf+0x3ae>
     baa:	80 37       	cpi	r24, 0x70	; 112
     bac:	19 f0       	breq	.+6      	; 0xbb4 <vfprintf+0x24e>
     bae:	88 37       	cpi	r24, 0x78	; 120
     bb0:	21 f0       	breq	.+8      	; 0xbba <vfprintf+0x254>
     bb2:	b0 c0       	rjmp	.+352    	; 0xd14 <vfprintf+0x3ae>
     bb4:	e9 2f       	mov	r30, r25
     bb6:	e0 61       	ori	r30, 0x10	; 16
     bb8:	be 2e       	mov	r11, r30
     bba:	b4 fe       	sbrs	r11, 4
     bbc:	0d c0       	rjmp	.+26     	; 0xbd8 <vfprintf+0x272>
     bbe:	fb 2d       	mov	r31, r11
     bc0:	f4 60       	ori	r31, 0x04	; 4
     bc2:	bf 2e       	mov	r11, r31
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <vfprintf+0x272>
     bc6:	34 fe       	sbrs	r3, 4
     bc8:	0a c0       	rjmp	.+20     	; 0xbde <vfprintf+0x278>
     bca:	29 2f       	mov	r18, r25
     bcc:	26 60       	ori	r18, 0x06	; 6
     bce:	b2 2e       	mov	r11, r18
     bd0:	06 c0       	rjmp	.+12     	; 0xbde <vfprintf+0x278>
     bd2:	28 e0       	ldi	r18, 0x08	; 8
     bd4:	30 e0       	ldi	r19, 0x00	; 0
     bd6:	05 c0       	rjmp	.+10     	; 0xbe2 <vfprintf+0x27c>
     bd8:	20 e1       	ldi	r18, 0x10	; 16
     bda:	30 e0       	ldi	r19, 0x00	; 0
     bdc:	02 c0       	rjmp	.+4      	; 0xbe2 <vfprintf+0x27c>
     bde:	20 e1       	ldi	r18, 0x10	; 16
     be0:	32 e0       	ldi	r19, 0x02	; 2
     be2:	f8 01       	movw	r30, r16
     be4:	b7 fe       	sbrs	r11, 7
     be6:	07 c0       	rjmp	.+14     	; 0xbf6 <vfprintf+0x290>
     be8:	60 81       	ld	r22, Z
     bea:	71 81       	ldd	r23, Z+1	; 0x01
     bec:	82 81       	ldd	r24, Z+2	; 0x02
     bee:	93 81       	ldd	r25, Z+3	; 0x03
     bf0:	0c 5f       	subi	r16, 0xFC	; 252
     bf2:	1f 4f       	sbci	r17, 0xFF	; 255
     bf4:	06 c0       	rjmp	.+12     	; 0xc02 <vfprintf+0x29c>
     bf6:	60 81       	ld	r22, Z
     bf8:	71 81       	ldd	r23, Z+1	; 0x01
     bfa:	80 e0       	ldi	r24, 0x00	; 0
     bfc:	90 e0       	ldi	r25, 0x00	; 0
     bfe:	0e 5f       	subi	r16, 0xFE	; 254
     c00:	1f 4f       	sbci	r17, 0xFF	; 255
     c02:	a3 01       	movw	r20, r6
     c04:	0e 94 2a 08 	call	0x1054	; 0x1054 <__ultoa_invert>
     c08:	88 2e       	mov	r8, r24
     c0a:	86 18       	sub	r8, r6
     c0c:	fb 2d       	mov	r31, r11
     c0e:	ff 77       	andi	r31, 0x7F	; 127
     c10:	3f 2e       	mov	r3, r31
     c12:	36 fe       	sbrs	r3, 6
     c14:	0d c0       	rjmp	.+26     	; 0xc30 <vfprintf+0x2ca>
     c16:	23 2d       	mov	r18, r3
     c18:	2e 7f       	andi	r18, 0xFE	; 254
     c1a:	a2 2e       	mov	r10, r18
     c1c:	89 14       	cp	r8, r9
     c1e:	58 f4       	brcc	.+22     	; 0xc36 <vfprintf+0x2d0>
     c20:	34 fe       	sbrs	r3, 4
     c22:	0b c0       	rjmp	.+22     	; 0xc3a <vfprintf+0x2d4>
     c24:	32 fc       	sbrc	r3, 2
     c26:	09 c0       	rjmp	.+18     	; 0xc3a <vfprintf+0x2d4>
     c28:	83 2d       	mov	r24, r3
     c2a:	8e 7e       	andi	r24, 0xEE	; 238
     c2c:	a8 2e       	mov	r10, r24
     c2e:	05 c0       	rjmp	.+10     	; 0xc3a <vfprintf+0x2d4>
     c30:	b8 2c       	mov	r11, r8
     c32:	a3 2c       	mov	r10, r3
     c34:	03 c0       	rjmp	.+6      	; 0xc3c <vfprintf+0x2d6>
     c36:	b8 2c       	mov	r11, r8
     c38:	01 c0       	rjmp	.+2      	; 0xc3c <vfprintf+0x2d6>
     c3a:	b9 2c       	mov	r11, r9
     c3c:	a4 fe       	sbrs	r10, 4
     c3e:	0f c0       	rjmp	.+30     	; 0xc5e <vfprintf+0x2f8>
     c40:	fe 01       	movw	r30, r28
     c42:	e8 0d       	add	r30, r8
     c44:	f1 1d       	adc	r31, r1
     c46:	80 81       	ld	r24, Z
     c48:	80 33       	cpi	r24, 0x30	; 48
     c4a:	21 f4       	brne	.+8      	; 0xc54 <vfprintf+0x2ee>
     c4c:	9a 2d       	mov	r25, r10
     c4e:	99 7e       	andi	r25, 0xE9	; 233
     c50:	a9 2e       	mov	r10, r25
     c52:	09 c0       	rjmp	.+18     	; 0xc66 <vfprintf+0x300>
     c54:	a2 fe       	sbrs	r10, 2
     c56:	06 c0       	rjmp	.+12     	; 0xc64 <vfprintf+0x2fe>
     c58:	b3 94       	inc	r11
     c5a:	b3 94       	inc	r11
     c5c:	04 c0       	rjmp	.+8      	; 0xc66 <vfprintf+0x300>
     c5e:	8a 2d       	mov	r24, r10
     c60:	86 78       	andi	r24, 0x86	; 134
     c62:	09 f0       	breq	.+2      	; 0xc66 <vfprintf+0x300>
     c64:	b3 94       	inc	r11
     c66:	a3 fc       	sbrc	r10, 3
     c68:	11 c0       	rjmp	.+34     	; 0xc8c <vfprintf+0x326>
     c6a:	a0 fe       	sbrs	r10, 0
     c6c:	06 c0       	rjmp	.+12     	; 0xc7a <vfprintf+0x314>
     c6e:	b2 14       	cp	r11, r2
     c70:	88 f4       	brcc	.+34     	; 0xc94 <vfprintf+0x32e>
     c72:	28 0c       	add	r2, r8
     c74:	92 2c       	mov	r9, r2
     c76:	9b 18       	sub	r9, r11
     c78:	0e c0       	rjmp	.+28     	; 0xc96 <vfprintf+0x330>
     c7a:	b2 14       	cp	r11, r2
     c7c:	60 f4       	brcc	.+24     	; 0xc96 <vfprintf+0x330>
     c7e:	b6 01       	movw	r22, r12
     c80:	80 e2       	ldi	r24, 0x20	; 32
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	0e 94 ee 07 	call	0xfdc	; 0xfdc <fputc>
     c88:	b3 94       	inc	r11
     c8a:	f7 cf       	rjmp	.-18     	; 0xc7a <vfprintf+0x314>
     c8c:	b2 14       	cp	r11, r2
     c8e:	18 f4       	brcc	.+6      	; 0xc96 <vfprintf+0x330>
     c90:	2b 18       	sub	r2, r11
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <vfprintf+0x332>
     c94:	98 2c       	mov	r9, r8
     c96:	21 2c       	mov	r2, r1
     c98:	a4 fe       	sbrs	r10, 4
     c9a:	10 c0       	rjmp	.+32     	; 0xcbc <vfprintf+0x356>
     c9c:	b6 01       	movw	r22, r12
     c9e:	80 e3       	ldi	r24, 0x30	; 48
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	0e 94 ee 07 	call	0xfdc	; 0xfdc <fputc>
     ca6:	a2 fe       	sbrs	r10, 2
     ca8:	17 c0       	rjmp	.+46     	; 0xcd8 <vfprintf+0x372>
     caa:	a1 fc       	sbrc	r10, 1
     cac:	03 c0       	rjmp	.+6      	; 0xcb4 <vfprintf+0x34e>
     cae:	88 e7       	ldi	r24, 0x78	; 120
     cb0:	90 e0       	ldi	r25, 0x00	; 0
     cb2:	02 c0       	rjmp	.+4      	; 0xcb8 <vfprintf+0x352>
     cb4:	88 e5       	ldi	r24, 0x58	; 88
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	b6 01       	movw	r22, r12
     cba:	0c c0       	rjmp	.+24     	; 0xcd4 <vfprintf+0x36e>
     cbc:	8a 2d       	mov	r24, r10
     cbe:	86 78       	andi	r24, 0x86	; 134
     cc0:	59 f0       	breq	.+22     	; 0xcd8 <vfprintf+0x372>
     cc2:	a1 fe       	sbrs	r10, 1
     cc4:	02 c0       	rjmp	.+4      	; 0xcca <vfprintf+0x364>
     cc6:	8b e2       	ldi	r24, 0x2B	; 43
     cc8:	01 c0       	rjmp	.+2      	; 0xccc <vfprintf+0x366>
     cca:	80 e2       	ldi	r24, 0x20	; 32
     ccc:	a7 fc       	sbrc	r10, 7
     cce:	8d e2       	ldi	r24, 0x2D	; 45
     cd0:	b6 01       	movw	r22, r12
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	0e 94 ee 07 	call	0xfdc	; 0xfdc <fputc>
     cd8:	89 14       	cp	r8, r9
     cda:	38 f4       	brcc	.+14     	; 0xcea <vfprintf+0x384>
     cdc:	b6 01       	movw	r22, r12
     cde:	80 e3       	ldi	r24, 0x30	; 48
     ce0:	90 e0       	ldi	r25, 0x00	; 0
     ce2:	0e 94 ee 07 	call	0xfdc	; 0xfdc <fputc>
     ce6:	9a 94       	dec	r9
     ce8:	f7 cf       	rjmp	.-18     	; 0xcd8 <vfprintf+0x372>
     cea:	8a 94       	dec	r8
     cec:	f3 01       	movw	r30, r6
     cee:	e8 0d       	add	r30, r8
     cf0:	f1 1d       	adc	r31, r1
     cf2:	80 81       	ld	r24, Z
     cf4:	b6 01       	movw	r22, r12
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	0e 94 ee 07 	call	0xfdc	; 0xfdc <fputc>
     cfc:	81 10       	cpse	r8, r1
     cfe:	f5 cf       	rjmp	.-22     	; 0xcea <vfprintf+0x384>
     d00:	22 20       	and	r2, r2
     d02:	09 f4       	brne	.+2      	; 0xd06 <vfprintf+0x3a0>
     d04:	42 ce       	rjmp	.-892    	; 0x98a <vfprintf+0x24>
     d06:	b6 01       	movw	r22, r12
     d08:	80 e2       	ldi	r24, 0x20	; 32
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	0e 94 ee 07 	call	0xfdc	; 0xfdc <fputc>
     d10:	2a 94       	dec	r2
     d12:	f6 cf       	rjmp	.-20     	; 0xd00 <vfprintf+0x39a>
     d14:	f6 01       	movw	r30, r12
     d16:	86 81       	ldd	r24, Z+6	; 0x06
     d18:	97 81       	ldd	r25, Z+7	; 0x07
     d1a:	02 c0       	rjmp	.+4      	; 0xd20 <vfprintf+0x3ba>
     d1c:	8f ef       	ldi	r24, 0xFF	; 255
     d1e:	9f ef       	ldi	r25, 0xFF	; 255
     d20:	2b 96       	adiw	r28, 0x0b	; 11
     d22:	e2 e1       	ldi	r30, 0x12	; 18
     d24:	0c 94 a4 08 	jmp	0x1148	; 0x1148 <__epilogue_restores__>

00000d28 <calloc>:
     d28:	0f 93       	push	r16
     d2a:	1f 93       	push	r17
     d2c:	cf 93       	push	r28
     d2e:	df 93       	push	r29
     d30:	86 9f       	mul	r24, r22
     d32:	80 01       	movw	r16, r0
     d34:	87 9f       	mul	r24, r23
     d36:	10 0d       	add	r17, r0
     d38:	96 9f       	mul	r25, r22
     d3a:	10 0d       	add	r17, r0
     d3c:	11 24       	eor	r1, r1
     d3e:	c8 01       	movw	r24, r16
     d40:	0e 94 b0 06 	call	0xd60	; 0xd60 <malloc>
     d44:	ec 01       	movw	r28, r24
     d46:	00 97       	sbiw	r24, 0x00	; 0
     d48:	29 f0       	breq	.+10     	; 0xd54 <calloc+0x2c>
     d4a:	a8 01       	movw	r20, r16
     d4c:	60 e0       	ldi	r22, 0x00	; 0
     d4e:	70 e0       	ldi	r23, 0x00	; 0
     d50:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <memset>
     d54:	ce 01       	movw	r24, r28
     d56:	df 91       	pop	r29
     d58:	cf 91       	pop	r28
     d5a:	1f 91       	pop	r17
     d5c:	0f 91       	pop	r16
     d5e:	08 95       	ret

00000d60 <malloc>:
     d60:	0f 93       	push	r16
     d62:	1f 93       	push	r17
     d64:	cf 93       	push	r28
     d66:	df 93       	push	r29
     d68:	82 30       	cpi	r24, 0x02	; 2
     d6a:	91 05       	cpc	r25, r1
     d6c:	10 f4       	brcc	.+4      	; 0xd72 <malloc+0x12>
     d6e:	82 e0       	ldi	r24, 0x02	; 2
     d70:	90 e0       	ldi	r25, 0x00	; 0
     d72:	e0 91 65 02 	lds	r30, 0x0265	; 0x800265 <__flp>
     d76:	f0 91 66 02 	lds	r31, 0x0266	; 0x800266 <__flp+0x1>
     d7a:	20 e0       	ldi	r18, 0x00	; 0
     d7c:	30 e0       	ldi	r19, 0x00	; 0
     d7e:	a0 e0       	ldi	r26, 0x00	; 0
     d80:	b0 e0       	ldi	r27, 0x00	; 0
     d82:	30 97       	sbiw	r30, 0x00	; 0
     d84:	19 f1       	breq	.+70     	; 0xdcc <malloc+0x6c>
     d86:	40 81       	ld	r20, Z
     d88:	51 81       	ldd	r21, Z+1	; 0x01
     d8a:	02 81       	ldd	r16, Z+2	; 0x02
     d8c:	13 81       	ldd	r17, Z+3	; 0x03
     d8e:	48 17       	cp	r20, r24
     d90:	59 07       	cpc	r21, r25
     d92:	c8 f0       	brcs	.+50     	; 0xdc6 <malloc+0x66>
     d94:	84 17       	cp	r24, r20
     d96:	95 07       	cpc	r25, r21
     d98:	69 f4       	brne	.+26     	; 0xdb4 <malloc+0x54>
     d9a:	10 97       	sbiw	r26, 0x00	; 0
     d9c:	31 f0       	breq	.+12     	; 0xdaa <malloc+0x4a>
     d9e:	12 96       	adiw	r26, 0x02	; 2
     da0:	0c 93       	st	X, r16
     da2:	12 97       	sbiw	r26, 0x02	; 2
     da4:	13 96       	adiw	r26, 0x03	; 3
     da6:	1c 93       	st	X, r17
     da8:	27 c0       	rjmp	.+78     	; 0xdf8 <malloc+0x98>
     daa:	00 93 65 02 	sts	0x0265, r16	; 0x800265 <__flp>
     dae:	10 93 66 02 	sts	0x0266, r17	; 0x800266 <__flp+0x1>
     db2:	22 c0       	rjmp	.+68     	; 0xdf8 <malloc+0x98>
     db4:	21 15       	cp	r18, r1
     db6:	31 05       	cpc	r19, r1
     db8:	19 f0       	breq	.+6      	; 0xdc0 <malloc+0x60>
     dba:	42 17       	cp	r20, r18
     dbc:	53 07       	cpc	r21, r19
     dbe:	18 f4       	brcc	.+6      	; 0xdc6 <malloc+0x66>
     dc0:	9a 01       	movw	r18, r20
     dc2:	bd 01       	movw	r22, r26
     dc4:	ef 01       	movw	r28, r30
     dc6:	df 01       	movw	r26, r30
     dc8:	f8 01       	movw	r30, r16
     dca:	db cf       	rjmp	.-74     	; 0xd82 <malloc+0x22>
     dcc:	21 15       	cp	r18, r1
     dce:	31 05       	cpc	r19, r1
     dd0:	f9 f0       	breq	.+62     	; 0xe10 <malloc+0xb0>
     dd2:	28 1b       	sub	r18, r24
     dd4:	39 0b       	sbc	r19, r25
     dd6:	24 30       	cpi	r18, 0x04	; 4
     dd8:	31 05       	cpc	r19, r1
     dda:	80 f4       	brcc	.+32     	; 0xdfc <malloc+0x9c>
     ddc:	8a 81       	ldd	r24, Y+2	; 0x02
     dde:	9b 81       	ldd	r25, Y+3	; 0x03
     de0:	61 15       	cp	r22, r1
     de2:	71 05       	cpc	r23, r1
     de4:	21 f0       	breq	.+8      	; 0xdee <malloc+0x8e>
     de6:	fb 01       	movw	r30, r22
     de8:	93 83       	std	Z+3, r25	; 0x03
     dea:	82 83       	std	Z+2, r24	; 0x02
     dec:	04 c0       	rjmp	.+8      	; 0xdf6 <malloc+0x96>
     dee:	90 93 66 02 	sts	0x0266, r25	; 0x800266 <__flp+0x1>
     df2:	80 93 65 02 	sts	0x0265, r24	; 0x800265 <__flp>
     df6:	fe 01       	movw	r30, r28
     df8:	32 96       	adiw	r30, 0x02	; 2
     dfa:	44 c0       	rjmp	.+136    	; 0xe84 <malloc+0x124>
     dfc:	fe 01       	movw	r30, r28
     dfe:	e2 0f       	add	r30, r18
     e00:	f3 1f       	adc	r31, r19
     e02:	81 93       	st	Z+, r24
     e04:	91 93       	st	Z+, r25
     e06:	22 50       	subi	r18, 0x02	; 2
     e08:	31 09       	sbc	r19, r1
     e0a:	39 83       	std	Y+1, r19	; 0x01
     e0c:	28 83       	st	Y, r18
     e0e:	3a c0       	rjmp	.+116    	; 0xe84 <malloc+0x124>
     e10:	20 91 63 02 	lds	r18, 0x0263	; 0x800263 <__brkval>
     e14:	30 91 64 02 	lds	r19, 0x0264	; 0x800264 <__brkval+0x1>
     e18:	23 2b       	or	r18, r19
     e1a:	41 f4       	brne	.+16     	; 0xe2c <malloc+0xcc>
     e1c:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
     e20:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
     e24:	30 93 64 02 	sts	0x0264, r19	; 0x800264 <__brkval+0x1>
     e28:	20 93 63 02 	sts	0x0263, r18	; 0x800263 <__brkval>
     e2c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     e30:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     e34:	21 15       	cp	r18, r1
     e36:	31 05       	cpc	r19, r1
     e38:	41 f4       	brne	.+16     	; 0xe4a <malloc+0xea>
     e3a:	2d b7       	in	r18, 0x3d	; 61
     e3c:	3e b7       	in	r19, 0x3e	; 62
     e3e:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
     e42:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
     e46:	24 1b       	sub	r18, r20
     e48:	35 0b       	sbc	r19, r21
     e4a:	e0 91 63 02 	lds	r30, 0x0263	; 0x800263 <__brkval>
     e4e:	f0 91 64 02 	lds	r31, 0x0264	; 0x800264 <__brkval+0x1>
     e52:	e2 17       	cp	r30, r18
     e54:	f3 07       	cpc	r31, r19
     e56:	a0 f4       	brcc	.+40     	; 0xe80 <malloc+0x120>
     e58:	2e 1b       	sub	r18, r30
     e5a:	3f 0b       	sbc	r19, r31
     e5c:	28 17       	cp	r18, r24
     e5e:	39 07       	cpc	r19, r25
     e60:	78 f0       	brcs	.+30     	; 0xe80 <malloc+0x120>
     e62:	ac 01       	movw	r20, r24
     e64:	4e 5f       	subi	r20, 0xFE	; 254
     e66:	5f 4f       	sbci	r21, 0xFF	; 255
     e68:	24 17       	cp	r18, r20
     e6a:	35 07       	cpc	r19, r21
     e6c:	48 f0       	brcs	.+18     	; 0xe80 <malloc+0x120>
     e6e:	4e 0f       	add	r20, r30
     e70:	5f 1f       	adc	r21, r31
     e72:	50 93 64 02 	sts	0x0264, r21	; 0x800264 <__brkval+0x1>
     e76:	40 93 63 02 	sts	0x0263, r20	; 0x800263 <__brkval>
     e7a:	81 93       	st	Z+, r24
     e7c:	91 93       	st	Z+, r25
     e7e:	02 c0       	rjmp	.+4      	; 0xe84 <malloc+0x124>
     e80:	e0 e0       	ldi	r30, 0x00	; 0
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	cf 01       	movw	r24, r30
     e86:	df 91       	pop	r29
     e88:	cf 91       	pop	r28
     e8a:	1f 91       	pop	r17
     e8c:	0f 91       	pop	r16
     e8e:	08 95       	ret

00000e90 <free>:
     e90:	cf 93       	push	r28
     e92:	df 93       	push	r29
     e94:	00 97       	sbiw	r24, 0x00	; 0
     e96:	09 f4       	brne	.+2      	; 0xe9a <free+0xa>
     e98:	81 c0       	rjmp	.+258    	; 0xf9c <free+0x10c>
     e9a:	fc 01       	movw	r30, r24
     e9c:	32 97       	sbiw	r30, 0x02	; 2
     e9e:	13 82       	std	Z+3, r1	; 0x03
     ea0:	12 82       	std	Z+2, r1	; 0x02
     ea2:	a0 91 65 02 	lds	r26, 0x0265	; 0x800265 <__flp>
     ea6:	b0 91 66 02 	lds	r27, 0x0266	; 0x800266 <__flp+0x1>
     eaa:	10 97       	sbiw	r26, 0x00	; 0
     eac:	81 f4       	brne	.+32     	; 0xece <free+0x3e>
     eae:	20 81       	ld	r18, Z
     eb0:	31 81       	ldd	r19, Z+1	; 0x01
     eb2:	82 0f       	add	r24, r18
     eb4:	93 1f       	adc	r25, r19
     eb6:	20 91 63 02 	lds	r18, 0x0263	; 0x800263 <__brkval>
     eba:	30 91 64 02 	lds	r19, 0x0264	; 0x800264 <__brkval+0x1>
     ebe:	28 17       	cp	r18, r24
     ec0:	39 07       	cpc	r19, r25
     ec2:	51 f5       	brne	.+84     	; 0xf18 <free+0x88>
     ec4:	f0 93 64 02 	sts	0x0264, r31	; 0x800264 <__brkval+0x1>
     ec8:	e0 93 63 02 	sts	0x0263, r30	; 0x800263 <__brkval>
     ecc:	67 c0       	rjmp	.+206    	; 0xf9c <free+0x10c>
     ece:	ed 01       	movw	r28, r26
     ed0:	20 e0       	ldi	r18, 0x00	; 0
     ed2:	30 e0       	ldi	r19, 0x00	; 0
     ed4:	ce 17       	cp	r28, r30
     ed6:	df 07       	cpc	r29, r31
     ed8:	40 f4       	brcc	.+16     	; 0xeea <free+0x5a>
     eda:	4a 81       	ldd	r20, Y+2	; 0x02
     edc:	5b 81       	ldd	r21, Y+3	; 0x03
     ede:	9e 01       	movw	r18, r28
     ee0:	41 15       	cp	r20, r1
     ee2:	51 05       	cpc	r21, r1
     ee4:	f1 f0       	breq	.+60     	; 0xf22 <free+0x92>
     ee6:	ea 01       	movw	r28, r20
     ee8:	f5 cf       	rjmp	.-22     	; 0xed4 <free+0x44>
     eea:	d3 83       	std	Z+3, r29	; 0x03
     eec:	c2 83       	std	Z+2, r28	; 0x02
     eee:	40 81       	ld	r20, Z
     ef0:	51 81       	ldd	r21, Z+1	; 0x01
     ef2:	84 0f       	add	r24, r20
     ef4:	95 1f       	adc	r25, r21
     ef6:	c8 17       	cp	r28, r24
     ef8:	d9 07       	cpc	r29, r25
     efa:	59 f4       	brne	.+22     	; 0xf12 <free+0x82>
     efc:	88 81       	ld	r24, Y
     efe:	99 81       	ldd	r25, Y+1	; 0x01
     f00:	84 0f       	add	r24, r20
     f02:	95 1f       	adc	r25, r21
     f04:	02 96       	adiw	r24, 0x02	; 2
     f06:	91 83       	std	Z+1, r25	; 0x01
     f08:	80 83       	st	Z, r24
     f0a:	8a 81       	ldd	r24, Y+2	; 0x02
     f0c:	9b 81       	ldd	r25, Y+3	; 0x03
     f0e:	93 83       	std	Z+3, r25	; 0x03
     f10:	82 83       	std	Z+2, r24	; 0x02
     f12:	21 15       	cp	r18, r1
     f14:	31 05       	cpc	r19, r1
     f16:	29 f4       	brne	.+10     	; 0xf22 <free+0x92>
     f18:	f0 93 66 02 	sts	0x0266, r31	; 0x800266 <__flp+0x1>
     f1c:	e0 93 65 02 	sts	0x0265, r30	; 0x800265 <__flp>
     f20:	3d c0       	rjmp	.+122    	; 0xf9c <free+0x10c>
     f22:	e9 01       	movw	r28, r18
     f24:	fb 83       	std	Y+3, r31	; 0x03
     f26:	ea 83       	std	Y+2, r30	; 0x02
     f28:	49 91       	ld	r20, Y+
     f2a:	59 91       	ld	r21, Y+
     f2c:	c4 0f       	add	r28, r20
     f2e:	d5 1f       	adc	r29, r21
     f30:	ec 17       	cp	r30, r28
     f32:	fd 07       	cpc	r31, r29
     f34:	61 f4       	brne	.+24     	; 0xf4e <free+0xbe>
     f36:	80 81       	ld	r24, Z
     f38:	91 81       	ldd	r25, Z+1	; 0x01
     f3a:	84 0f       	add	r24, r20
     f3c:	95 1f       	adc	r25, r21
     f3e:	02 96       	adiw	r24, 0x02	; 2
     f40:	e9 01       	movw	r28, r18
     f42:	99 83       	std	Y+1, r25	; 0x01
     f44:	88 83       	st	Y, r24
     f46:	82 81       	ldd	r24, Z+2	; 0x02
     f48:	93 81       	ldd	r25, Z+3	; 0x03
     f4a:	9b 83       	std	Y+3, r25	; 0x03
     f4c:	8a 83       	std	Y+2, r24	; 0x02
     f4e:	e0 e0       	ldi	r30, 0x00	; 0
     f50:	f0 e0       	ldi	r31, 0x00	; 0
     f52:	12 96       	adiw	r26, 0x02	; 2
     f54:	8d 91       	ld	r24, X+
     f56:	9c 91       	ld	r25, X
     f58:	13 97       	sbiw	r26, 0x03	; 3
     f5a:	00 97       	sbiw	r24, 0x00	; 0
     f5c:	19 f0       	breq	.+6      	; 0xf64 <free+0xd4>
     f5e:	fd 01       	movw	r30, r26
     f60:	dc 01       	movw	r26, r24
     f62:	f7 cf       	rjmp	.-18     	; 0xf52 <free+0xc2>
     f64:	8d 91       	ld	r24, X+
     f66:	9c 91       	ld	r25, X
     f68:	11 97       	sbiw	r26, 0x01	; 1
     f6a:	9d 01       	movw	r18, r26
     f6c:	2e 5f       	subi	r18, 0xFE	; 254
     f6e:	3f 4f       	sbci	r19, 0xFF	; 255
     f70:	82 0f       	add	r24, r18
     f72:	93 1f       	adc	r25, r19
     f74:	20 91 63 02 	lds	r18, 0x0263	; 0x800263 <__brkval>
     f78:	30 91 64 02 	lds	r19, 0x0264	; 0x800264 <__brkval+0x1>
     f7c:	28 17       	cp	r18, r24
     f7e:	39 07       	cpc	r19, r25
     f80:	69 f4       	brne	.+26     	; 0xf9c <free+0x10c>
     f82:	30 97       	sbiw	r30, 0x00	; 0
     f84:	29 f4       	brne	.+10     	; 0xf90 <free+0x100>
     f86:	10 92 66 02 	sts	0x0266, r1	; 0x800266 <__flp+0x1>
     f8a:	10 92 65 02 	sts	0x0265, r1	; 0x800265 <__flp>
     f8e:	02 c0       	rjmp	.+4      	; 0xf94 <free+0x104>
     f90:	13 82       	std	Z+3, r1	; 0x03
     f92:	12 82       	std	Z+2, r1	; 0x02
     f94:	b0 93 64 02 	sts	0x0264, r27	; 0x800264 <__brkval+0x1>
     f98:	a0 93 63 02 	sts	0x0263, r26	; 0x800263 <__brkval>
     f9c:	df 91       	pop	r29
     f9e:	cf 91       	pop	r28
     fa0:	08 95       	ret

00000fa2 <strnlen_P>:
     fa2:	fc 01       	movw	r30, r24
     fa4:	05 90       	lpm	r0, Z+
     fa6:	61 50       	subi	r22, 0x01	; 1
     fa8:	70 40       	sbci	r23, 0x00	; 0
     faa:	01 10       	cpse	r0, r1
     fac:	d8 f7       	brcc	.-10     	; 0xfa4 <strnlen_P+0x2>
     fae:	80 95       	com	r24
     fb0:	90 95       	com	r25
     fb2:	8e 0f       	add	r24, r30
     fb4:	9f 1f       	adc	r25, r31
     fb6:	08 95       	ret

00000fb8 <memset>:
     fb8:	dc 01       	movw	r26, r24
     fba:	01 c0       	rjmp	.+2      	; 0xfbe <memset+0x6>
     fbc:	6d 93       	st	X+, r22
     fbe:	41 50       	subi	r20, 0x01	; 1
     fc0:	50 40       	sbci	r21, 0x00	; 0
     fc2:	e0 f7       	brcc	.-8      	; 0xfbc <memset+0x4>
     fc4:	08 95       	ret

00000fc6 <strnlen>:
     fc6:	fc 01       	movw	r30, r24
     fc8:	61 50       	subi	r22, 0x01	; 1
     fca:	70 40       	sbci	r23, 0x00	; 0
     fcc:	01 90       	ld	r0, Z+
     fce:	01 10       	cpse	r0, r1
     fd0:	d8 f7       	brcc	.-10     	; 0xfc8 <strnlen+0x2>
     fd2:	80 95       	com	r24
     fd4:	90 95       	com	r25
     fd6:	8e 0f       	add	r24, r30
     fd8:	9f 1f       	adc	r25, r31
     fda:	08 95       	ret

00000fdc <fputc>:
     fdc:	0f 93       	push	r16
     fde:	1f 93       	push	r17
     fe0:	cf 93       	push	r28
     fe2:	df 93       	push	r29
     fe4:	fb 01       	movw	r30, r22
     fe6:	23 81       	ldd	r18, Z+3	; 0x03
     fe8:	21 fd       	sbrc	r18, 1
     fea:	03 c0       	rjmp	.+6      	; 0xff2 <fputc+0x16>
     fec:	8f ef       	ldi	r24, 0xFF	; 255
     fee:	9f ef       	ldi	r25, 0xFF	; 255
     ff0:	2c c0       	rjmp	.+88     	; 0x104a <fputc+0x6e>
     ff2:	22 ff       	sbrs	r18, 2
     ff4:	16 c0       	rjmp	.+44     	; 0x1022 <fputc+0x46>
     ff6:	46 81       	ldd	r20, Z+6	; 0x06
     ff8:	57 81       	ldd	r21, Z+7	; 0x07
     ffa:	24 81       	ldd	r18, Z+4	; 0x04
     ffc:	35 81       	ldd	r19, Z+5	; 0x05
     ffe:	42 17       	cp	r20, r18
    1000:	53 07       	cpc	r21, r19
    1002:	44 f4       	brge	.+16     	; 0x1014 <fputc+0x38>
    1004:	a0 81       	ld	r26, Z
    1006:	b1 81       	ldd	r27, Z+1	; 0x01
    1008:	9d 01       	movw	r18, r26
    100a:	2f 5f       	subi	r18, 0xFF	; 255
    100c:	3f 4f       	sbci	r19, 0xFF	; 255
    100e:	31 83       	std	Z+1, r19	; 0x01
    1010:	20 83       	st	Z, r18
    1012:	8c 93       	st	X, r24
    1014:	26 81       	ldd	r18, Z+6	; 0x06
    1016:	37 81       	ldd	r19, Z+7	; 0x07
    1018:	2f 5f       	subi	r18, 0xFF	; 255
    101a:	3f 4f       	sbci	r19, 0xFF	; 255
    101c:	37 83       	std	Z+7, r19	; 0x07
    101e:	26 83       	std	Z+6, r18	; 0x06
    1020:	14 c0       	rjmp	.+40     	; 0x104a <fputc+0x6e>
    1022:	8b 01       	movw	r16, r22
    1024:	ec 01       	movw	r28, r24
    1026:	fb 01       	movw	r30, r22
    1028:	00 84       	ldd	r0, Z+8	; 0x08
    102a:	f1 85       	ldd	r31, Z+9	; 0x09
    102c:	e0 2d       	mov	r30, r0
    102e:	09 95       	icall
    1030:	89 2b       	or	r24, r25
    1032:	e1 f6       	brne	.-72     	; 0xfec <fputc+0x10>
    1034:	d8 01       	movw	r26, r16
    1036:	16 96       	adiw	r26, 0x06	; 6
    1038:	8d 91       	ld	r24, X+
    103a:	9c 91       	ld	r25, X
    103c:	17 97       	sbiw	r26, 0x07	; 7
    103e:	01 96       	adiw	r24, 0x01	; 1
    1040:	17 96       	adiw	r26, 0x07	; 7
    1042:	9c 93       	st	X, r25
    1044:	8e 93       	st	-X, r24
    1046:	16 97       	sbiw	r26, 0x06	; 6
    1048:	ce 01       	movw	r24, r28
    104a:	df 91       	pop	r29
    104c:	cf 91       	pop	r28
    104e:	1f 91       	pop	r17
    1050:	0f 91       	pop	r16
    1052:	08 95       	ret

00001054 <__ultoa_invert>:
    1054:	fa 01       	movw	r30, r20
    1056:	aa 27       	eor	r26, r26
    1058:	28 30       	cpi	r18, 0x08	; 8
    105a:	51 f1       	breq	.+84     	; 0x10b0 <__ultoa_invert+0x5c>
    105c:	20 31       	cpi	r18, 0x10	; 16
    105e:	81 f1       	breq	.+96     	; 0x10c0 <__ultoa_invert+0x6c>
    1060:	e8 94       	clt
    1062:	6f 93       	push	r22
    1064:	6e 7f       	andi	r22, 0xFE	; 254
    1066:	6e 5f       	subi	r22, 0xFE	; 254
    1068:	7f 4f       	sbci	r23, 0xFF	; 255
    106a:	8f 4f       	sbci	r24, 0xFF	; 255
    106c:	9f 4f       	sbci	r25, 0xFF	; 255
    106e:	af 4f       	sbci	r26, 0xFF	; 255
    1070:	b1 e0       	ldi	r27, 0x01	; 1
    1072:	3e d0       	rcall	.+124    	; 0x10f0 <__ultoa_invert+0x9c>
    1074:	b4 e0       	ldi	r27, 0x04	; 4
    1076:	3c d0       	rcall	.+120    	; 0x10f0 <__ultoa_invert+0x9c>
    1078:	67 0f       	add	r22, r23
    107a:	78 1f       	adc	r23, r24
    107c:	89 1f       	adc	r24, r25
    107e:	9a 1f       	adc	r25, r26
    1080:	a1 1d       	adc	r26, r1
    1082:	68 0f       	add	r22, r24
    1084:	79 1f       	adc	r23, r25
    1086:	8a 1f       	adc	r24, r26
    1088:	91 1d       	adc	r25, r1
    108a:	a1 1d       	adc	r26, r1
    108c:	6a 0f       	add	r22, r26
    108e:	71 1d       	adc	r23, r1
    1090:	81 1d       	adc	r24, r1
    1092:	91 1d       	adc	r25, r1
    1094:	a1 1d       	adc	r26, r1
    1096:	20 d0       	rcall	.+64     	; 0x10d8 <__ultoa_invert+0x84>
    1098:	09 f4       	brne	.+2      	; 0x109c <__ultoa_invert+0x48>
    109a:	68 94       	set
    109c:	3f 91       	pop	r19
    109e:	2a e0       	ldi	r18, 0x0A	; 10
    10a0:	26 9f       	mul	r18, r22
    10a2:	11 24       	eor	r1, r1
    10a4:	30 19       	sub	r19, r0
    10a6:	30 5d       	subi	r19, 0xD0	; 208
    10a8:	31 93       	st	Z+, r19
    10aa:	de f6       	brtc	.-74     	; 0x1062 <__ultoa_invert+0xe>
    10ac:	cf 01       	movw	r24, r30
    10ae:	08 95       	ret
    10b0:	46 2f       	mov	r20, r22
    10b2:	47 70       	andi	r20, 0x07	; 7
    10b4:	40 5d       	subi	r20, 0xD0	; 208
    10b6:	41 93       	st	Z+, r20
    10b8:	b3 e0       	ldi	r27, 0x03	; 3
    10ba:	0f d0       	rcall	.+30     	; 0x10da <__ultoa_invert+0x86>
    10bc:	c9 f7       	brne	.-14     	; 0x10b0 <__ultoa_invert+0x5c>
    10be:	f6 cf       	rjmp	.-20     	; 0x10ac <__ultoa_invert+0x58>
    10c0:	46 2f       	mov	r20, r22
    10c2:	4f 70       	andi	r20, 0x0F	; 15
    10c4:	40 5d       	subi	r20, 0xD0	; 208
    10c6:	4a 33       	cpi	r20, 0x3A	; 58
    10c8:	18 f0       	brcs	.+6      	; 0x10d0 <__ultoa_invert+0x7c>
    10ca:	49 5d       	subi	r20, 0xD9	; 217
    10cc:	31 fd       	sbrc	r19, 1
    10ce:	40 52       	subi	r20, 0x20	; 32
    10d0:	41 93       	st	Z+, r20
    10d2:	02 d0       	rcall	.+4      	; 0x10d8 <__ultoa_invert+0x84>
    10d4:	a9 f7       	brne	.-22     	; 0x10c0 <__ultoa_invert+0x6c>
    10d6:	ea cf       	rjmp	.-44     	; 0x10ac <__ultoa_invert+0x58>
    10d8:	b4 e0       	ldi	r27, 0x04	; 4
    10da:	a6 95       	lsr	r26
    10dc:	97 95       	ror	r25
    10de:	87 95       	ror	r24
    10e0:	77 95       	ror	r23
    10e2:	67 95       	ror	r22
    10e4:	ba 95       	dec	r27
    10e6:	c9 f7       	brne	.-14     	; 0x10da <__ultoa_invert+0x86>
    10e8:	00 97       	sbiw	r24, 0x00	; 0
    10ea:	61 05       	cpc	r22, r1
    10ec:	71 05       	cpc	r23, r1
    10ee:	08 95       	ret
    10f0:	9b 01       	movw	r18, r22
    10f2:	ac 01       	movw	r20, r24
    10f4:	0a 2e       	mov	r0, r26
    10f6:	06 94       	lsr	r0
    10f8:	57 95       	ror	r21
    10fa:	47 95       	ror	r20
    10fc:	37 95       	ror	r19
    10fe:	27 95       	ror	r18
    1100:	ba 95       	dec	r27
    1102:	c9 f7       	brne	.-14     	; 0x10f6 <__ultoa_invert+0xa2>
    1104:	62 0f       	add	r22, r18
    1106:	73 1f       	adc	r23, r19
    1108:	84 1f       	adc	r24, r20
    110a:	95 1f       	adc	r25, r21
    110c:	a0 1d       	adc	r26, r0
    110e:	08 95       	ret

00001110 <__prologue_saves__>:
    1110:	2f 92       	push	r2
    1112:	3f 92       	push	r3
    1114:	4f 92       	push	r4
    1116:	5f 92       	push	r5
    1118:	6f 92       	push	r6
    111a:	7f 92       	push	r7
    111c:	8f 92       	push	r8
    111e:	9f 92       	push	r9
    1120:	af 92       	push	r10
    1122:	bf 92       	push	r11
    1124:	cf 92       	push	r12
    1126:	df 92       	push	r13
    1128:	ef 92       	push	r14
    112a:	ff 92       	push	r15
    112c:	0f 93       	push	r16
    112e:	1f 93       	push	r17
    1130:	cf 93       	push	r28
    1132:	df 93       	push	r29
    1134:	cd b7       	in	r28, 0x3d	; 61
    1136:	de b7       	in	r29, 0x3e	; 62
    1138:	ca 1b       	sub	r28, r26
    113a:	db 0b       	sbc	r29, r27
    113c:	0f b6       	in	r0, 0x3f	; 63
    113e:	f8 94       	cli
    1140:	de bf       	out	0x3e, r29	; 62
    1142:	0f be       	out	0x3f, r0	; 63
    1144:	cd bf       	out	0x3d, r28	; 61
    1146:	09 94       	ijmp

00001148 <__epilogue_restores__>:
    1148:	2a 88       	ldd	r2, Y+18	; 0x12
    114a:	39 88       	ldd	r3, Y+17	; 0x11
    114c:	48 88       	ldd	r4, Y+16	; 0x10
    114e:	5f 84       	ldd	r5, Y+15	; 0x0f
    1150:	6e 84       	ldd	r6, Y+14	; 0x0e
    1152:	7d 84       	ldd	r7, Y+13	; 0x0d
    1154:	8c 84       	ldd	r8, Y+12	; 0x0c
    1156:	9b 84       	ldd	r9, Y+11	; 0x0b
    1158:	aa 84       	ldd	r10, Y+10	; 0x0a
    115a:	b9 84       	ldd	r11, Y+9	; 0x09
    115c:	c8 84       	ldd	r12, Y+8	; 0x08
    115e:	df 80       	ldd	r13, Y+7	; 0x07
    1160:	ee 80       	ldd	r14, Y+6	; 0x06
    1162:	fd 80       	ldd	r15, Y+5	; 0x05
    1164:	0c 81       	ldd	r16, Y+4	; 0x04
    1166:	1b 81       	ldd	r17, Y+3	; 0x03
    1168:	aa 81       	ldd	r26, Y+2	; 0x02
    116a:	b9 81       	ldd	r27, Y+1	; 0x01
    116c:	ce 0f       	add	r28, r30
    116e:	d1 1d       	adc	r29, r1
    1170:	0f b6       	in	r0, 0x3f	; 63
    1172:	f8 94       	cli
    1174:	de bf       	out	0x3e, r29	; 62
    1176:	0f be       	out	0x3f, r0	; 63
    1178:	cd bf       	out	0x3d, r28	; 61
    117a:	ed 01       	movw	r28, r26
    117c:	08 95       	ret

0000117e <_exit>:
    117e:	f8 94       	cli

00001180 <__stop_program>:
    1180:	ff cf       	rjmp	.-2      	; 0x1180 <__stop_program>
