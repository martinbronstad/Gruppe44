
Node2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000bc8  00080000  00080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000434  20000000  00080bc8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000084  20000434  00080ffc  00020434  2**2
                  ALLOC
  3 .stack        00000400  200004b8  00081080  00020434  2**0
                  ALLOC
  4 .heap         00000200  200008b8  00081480  00020434  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020434  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002045d  2**0
                  CONTENTS, READONLY
  7 .debug_info   00005548  00000000  00000000  000204b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000de0  00000000  00000000  000259fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000d97  00000000  00000000  000267de  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000178  00000000  00000000  00027575  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000128  00000000  00000000  000276ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00012e04  00000000  00000000  00027815  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000398e  00000000  00000000  0003a619  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00056136  00000000  00000000  0003dfa7  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000004ac  00000000  00000000  000940e0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	b8 08 00 20 01 04 08 00 fd 03 08 00 fd 03 08 00     ... ............
   80010:	fd 03 08 00 fd 03 08 00 fd 03 08 00 00 00 00 00     ................
	...
   8002c:	fd 03 08 00 fd 03 08 00 00 00 00 00 fd 03 08 00     ................
   8003c:	fd 03 08 00 fd 03 08 00 fd 03 08 00 fd 03 08 00     ................
   8004c:	fd 03 08 00 fd 03 08 00 fd 03 08 00 fd 03 08 00     ................
   8005c:	fd 03 08 00 35 09 08 00 fd 03 08 00 00 00 00 00     ....5...........
   8006c:	fd 03 08 00 fd 03 08 00 fd 03 08 00 fd 03 08 00     ................
	...
   80084:	fd 03 08 00 fd 03 08 00 fd 03 08 00 fd 03 08 00     ................
   80094:	fd 03 08 00 fd 03 08 00 fd 03 08 00 fd 03 08 00     ................
   800a4:	00 00 00 00 fd 03 08 00 fd 03 08 00 fd 03 08 00     ................
   800b4:	fd 03 08 00 fd 03 08 00 fd 03 08 00 fd 03 08 00     ................
   800c4:	fd 03 08 00 fd 03 08 00 fd 03 08 00 fd 03 08 00     ................
   800d4:	fd 03 08 00 fd 03 08 00 fd 03 08 00 fd 03 08 00     ................
   800e4:	fd 03 08 00 fd 03 08 00 49 03 08 00 fd 03 08 00     ........I.......

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20000434 	.word	0x20000434
   80110:	00000000 	.word	0x00000000
   80114:	00080bc8 	.word	0x00080bc8

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	00080bc8 	.word	0x00080bc8
   80154:	20000438 	.word	0x20000438
   80158:	00080bc8 	.word	0x00080bc8
   8015c:	00000000 	.word	0x00000000

00080160 <can_init>:
 * \retval Success(0) or failure(1)
 */


uint8_t can_init(uint32_t can_br, uint8_t num_tx_mb, uint8_t num_rx_mb)
{
   80160:	b4f0      	push	{r4, r5, r6, r7}
	
	//Make sure num_rx_mb and num_tx_mb is valid
	if(num_rx_mb > 8 | num_tx_mb > 8 | num_rx_mb + num_tx_mb > 8)
   80162:	1856      	adds	r6, r2, r1
   80164:	2e08      	cmp	r6, #8
   80166:	bfd4      	ite	le
   80168:	2300      	movle	r3, #0
   8016a:	2301      	movgt	r3, #1
   8016c:	2908      	cmp	r1, #8
   8016e:	bf98      	it	ls
   80170:	2a08      	cmpls	r2, #8
   80172:	d858      	bhi.n	80226 <can_init+0xc6>
   80174:	460c      	mov	r4, r1
   80176:	2b00      	cmp	r3, #0
   80178:	d155      	bne.n	80226 <can_init+0xc6>


	uint32_t ul_status; 
	
	//Disable can
	CAN0->CAN_MR &= ~CAN_MR_CANEN; 
   8017a:	4a2c      	ldr	r2, [pc, #176]	; (8022c <can_init+0xcc>)
   8017c:	6813      	ldr	r3, [r2, #0]
   8017e:	f023 0301 	bic.w	r3, r3, #1
   80182:	6013      	str	r3, [r2, #0]
	//Clear status register on read
	ul_status = CAN0->CAN_SR; 
   80184:	6913      	ldr	r3, [r2, #16]
	
	
	// Disable interrupts on CANH and CANL pins
	PIOA->PIO_IDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   80186:	4b2a      	ldr	r3, [pc, #168]	; (80230 <can_init+0xd0>)
   80188:	f44f 7540 	mov.w	r5, #768	; 0x300
   8018c:	645d      	str	r5, [r3, #68]	; 0x44
	
	//Select CAN0 RX and TX in PIOA
	uint32_t ul_sr = PIOA->PIO_ABSR;
   8018e:	6f1d      	ldr	r5, [r3, #112]	; 0x70
	PIOA->PIO_ABSR = ~(PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0) & ul_sr;
   80190:	f025 0503 	bic.w	r5, r5, #3
   80194:	671d      	str	r5, [r3, #112]	; 0x70
	
	// Disable the Parallel IO (PIO) of the Rx and Tx pins so that the peripheral controller can use them
	PIOA->PIO_PDR = PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0;
   80196:	2503      	movs	r5, #3
   80198:	605d      	str	r5, [r3, #4]
	
	// Enable pull up on CANH and CANL pin
	PIOA->PIO_PUER = (PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0);
   8019a:	665d      	str	r5, [r3, #100]	; 0x64
	
	
	//Enable Clock for CAN0 in PMC
	PMC->PMC_PCR = PMC_PCR_EN | (0 << PMC_PCR_DIV_Pos) | PMC_PCR_CMD | (ID_CAN0 << PMC_PCR_PID_Pos); // DIV = 1(can clk = MCK/2), CMD = 1 (write), PID = 2B (CAN0)
   8019c:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
   801a0:	4d24      	ldr	r5, [pc, #144]	; (80234 <can_init+0xd4>)
   801a2:	f8c3 510c 	str.w	r5, [r3, #268]	; 0x10c
	PMC->PMC_PCER1 |= 1 << (ID_CAN0 - 32);
   801a6:	f8d3 5100 	ldr.w	r5, [r3, #256]	; 0x100
   801aa:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
   801ae:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
	// SJW = 3TQ, BRP = 3, TQ = 8/Fosc, PROPSEG = 2/TQ, PS1 = 8/TQ, SAMPLE 3, PS2 = 8/TQ
	// TQ_NODE_1 = 8/ 16 Mhz, TQ_NODE_2 = 41+1 / 84 MHZ
	//                ???????1 ?0101001 ??10?001  ?111?111
	// can_br = 0b1 00101001 00100001 01110111
	// can_br = 0x1292177
	CAN0->CAN_BR = can_br; 
   801b2:	6150      	str	r0, [r2, #20]
	

	/****** Start of mailbox configuration ******/

	uint32_t can_ier = 0;
   801b4:	2000      	movs	r0, #0

	/* Configure receive mailboxes */
	for (int n = num_tx_mb; n <= num_rx_mb + num_tx_mb; n++)  //Simply one mailbox setup for all messages. You might want to apply filter for them.
   801b6:	e015      	b.n	801e4 <can_init+0x84>
	{
		CAN0->CAN_MB[n].CAN_MAM = 0x1F83FFFF; //Accept messages with id < 31
   801b8:	4b1c      	ldr	r3, [pc, #112]	; (8022c <can_init+0xcc>)
   801ba:	f101 0210 	add.w	r2, r1, #16
   801be:	0152      	lsls	r2, r2, #5
   801c0:	189d      	adds	r5, r3, r2
   801c2:	4f1d      	ldr	r7, [pc, #116]	; (80238 <can_init+0xd8>)
   801c4:	606f      	str	r7, [r5, #4]
		//CAN0->CAN_MB[n].CAN_MAM = 0x00;
		//CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_RX);
   801c6:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
   801ca:	509d      	str	r5, [r3, r2]
		CAN0->CAN_MB[n].CAN_MCR |= CAN_MCR_MTCR;
   801cc:	eb03 1341 	add.w	r3, r3, r1, lsl #5
   801d0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
   801d4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
   801d8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

		can_ier |= 1 << n; //Enable interrupt on rx mailbox
   801dc:	2301      	movs	r3, #1
   801de:	408b      	lsls	r3, r1
   801e0:	4318      	orrs	r0, r3
	for (int n = num_tx_mb; n <= num_rx_mb + num_tx_mb; n++)  //Simply one mailbox setup for all messages. You might want to apply filter for them.
   801e2:	3101      	adds	r1, #1
   801e4:	42b1      	cmp	r1, r6
   801e6:	dde7      	ble.n	801b8 <can_init+0x58>
   801e8:	2300      	movs	r3, #0
   801ea:	e00d      	b.n	80208 <can_init+0xa8>
	}
	
	/*Configure transmit mailboxes */
	for (int n = 0; n < num_tx_mb; n++)
	{
		CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
   801ec:	490f      	ldr	r1, [pc, #60]	; (8022c <can_init+0xcc>)
   801ee:	eb01 1243 	add.w	r2, r1, r3, lsl #5
   801f2:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
   801f6:	f8c2 5208 	str.w	r5, [r2, #520]	; 0x208
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_TX);
   801fa:	f103 0210 	add.w	r2, r3, #16
   801fe:	0152      	lsls	r2, r2, #5
   80200:	f04f 7540 	mov.w	r5, #50331648	; 0x3000000
   80204:	508d      	str	r5, [r1, r2]
	for (int n = 0; n < num_tx_mb; n++)
   80206:	3301      	adds	r3, #1
   80208:	42a3      	cmp	r3, r4
   8020a:	dbef      	blt.n	801ec <can_init+0x8c>
	}
	
	/****** End of mailbox configuraion ******/

	//Enable interrupt on receive mailboxes
	CAN0->CAN_IER = can_ier;
   8020c:	4b07      	ldr	r3, [pc, #28]	; (8022c <can_init+0xcc>)
   8020e:	6058      	str	r0, [r3, #4]
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   80210:	f44f 6100 	mov.w	r1, #2048	; 0x800
   80214:	4a09      	ldr	r2, [pc, #36]	; (8023c <can_init+0xdc>)
   80216:	6051      	str	r1, [r2, #4]

	//Enable interrupt in NVIC 
	NVIC_EnableIRQ(ID_CAN0);

	//enable CAN
	CAN0->CAN_MR |= CAN_MR_CANEN;
   80218:	681a      	ldr	r2, [r3, #0]
   8021a:	f042 0201 	orr.w	r2, r2, #1
   8021e:	601a      	str	r2, [r3, #0]

	return 0;
   80220:	2000      	movs	r0, #0
}
   80222:	bcf0      	pop	{r4, r5, r6, r7}
   80224:	4770      	bx	lr
		return 1; //Too many mailboxes is configured
   80226:	2001      	movs	r0, #1
   80228:	e7fb      	b.n	80222 <can_init+0xc2>
   8022a:	bf00      	nop
   8022c:	400b4000 	.word	0x400b4000
   80230:	400e0e00 	.word	0x400e0e00
   80234:	1000102b 	.word	0x1000102b
   80238:	1f83ffff 	.word	0x1f83ffff
   8023c:	e000e100 	.word	0xe000e100

00080240 <can_send>:
 * \retval Success(0) or failure(1)
 */
uint8_t can_send(CAN_MESSAGE* can_msg, uint8_t tx_mb_id)
{
	//Check that mailbox is ready
	if(CAN0->CAN_MB[tx_mb_id].CAN_MSR & CAN_MSR_MRDY)
   80240:	014b      	lsls	r3, r1, #5
   80242:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   80246:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   8024a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
   8024e:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   80252:	d034      	beq.n	802be <can_send+0x7e>
	{
		//Set message ID and use CAN 2.0B protocol
		CAN0->CAN_MB[tx_mb_id].CAN_MID = CAN_MID_MIDvA(can_msg->id) | CAN_MID_MIDE ;
   80254:	7802      	ldrb	r2, [r0, #0]
   80256:	0492      	lsls	r2, r2, #18
   80258:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   8025c:	014b      	lsls	r3, r1, #5
   8025e:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   80262:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   80266:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
		
		//Make sure message is not to long
		if(can_msg->data_length > 8){
   8026a:	7843      	ldrb	r3, [r0, #1]
   8026c:	2b08      	cmp	r3, #8
   8026e:	d901      	bls.n	80274 <can_send+0x34>
			can_msg->data_length = 8;
   80270:	2308      	movs	r3, #8
   80272:	7043      	strb	r3, [r0, #1]
			//Message is to long, sending only the first 8 bytes
		}
		//Put message in can data registers
		CAN0->CAN_MB[tx_mb_id].CAN_MDL = can_msg->data[3] << 24 | can_msg->data[2] << 16 | can_msg->data[1] << 8 | can_msg->data[0];
   80274:	7942      	ldrb	r2, [r0, #5]
   80276:	7903      	ldrb	r3, [r0, #4]
   80278:	041b      	lsls	r3, r3, #16
   8027a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   8027e:	78c2      	ldrb	r2, [r0, #3]
   80280:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   80284:	7882      	ldrb	r2, [r0, #2]
   80286:	4313      	orrs	r3, r2
   80288:	0149      	lsls	r1, r1, #5
   8028a:	f101 2140 	add.w	r1, r1, #1073758208	; 0x40004000
   8028e:	f501 2130 	add.w	r1, r1, #720896	; 0xb0000
   80292:	f8c1 3214 	str.w	r3, [r1, #532]	; 0x214
		CAN0->CAN_MB[tx_mb_id].CAN_MDH = can_msg->data[7] << 24 | can_msg->data[6] << 16 | can_msg->data[5] << 8 | can_msg->data[4];
   80296:	7a42      	ldrb	r2, [r0, #9]
   80298:	7a03      	ldrb	r3, [r0, #8]
   8029a:	041b      	lsls	r3, r3, #16
   8029c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   802a0:	79c2      	ldrb	r2, [r0, #7]
   802a2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   802a6:	7982      	ldrb	r2, [r0, #6]
   802a8:	4313      	orrs	r3, r2
   802aa:	f8c1 3218 	str.w	r3, [r1, #536]	; 0x218
		
		//Set message length and mailbox ready to send
		CAN0->CAN_MB[tx_mb_id].CAN_MCR = (can_msg->data_length << CAN_MCR_MDLC_Pos) | CAN_MCR_MTCR;
   802ae:	7843      	ldrb	r3, [r0, #1]
   802b0:	041b      	lsls	r3, r3, #16
   802b2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   802b6:	f8c1 321c 	str.w	r3, [r1, #540]	; 0x21c
		return 0;
   802ba:	2000      	movs	r0, #0
   802bc:	4770      	bx	lr
	}
	
	else //Mailbox busy
	{
		return 1;
   802be:	2001      	movs	r0, #1
	}
	
}
   802c0:	4770      	bx	lr
	...

000802c4 <can_receive>:
 * \retval Success(0) or failure(1)
 */
uint8_t can_receive(CAN_MESSAGE* can_msg, uint8_t rx_mb_id)
{
	//Check that mailbox is ready
	if(CAN0->CAN_MB[rx_mb_id].CAN_MSR & CAN_MSR_MRDY)
   802c4:	014b      	lsls	r3, r1, #5
   802c6:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   802ca:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   802ce:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
   802d2:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   802d6:	d033      	beq.n	80340 <can_receive+0x7c>
{
   802d8:	b470      	push	{r4, r5, r6}
	{
		//Get data from CAN mailbox
		uint32_t data_low = CAN0->CAN_MB[rx_mb_id].CAN_MDL;
   802da:	014b      	lsls	r3, r1, #5
   802dc:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   802e0:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   802e4:	f8d3 4214 	ldr.w	r4, [r3, #532]	; 0x214
		uint32_t data_high = CAN0->CAN_MB[rx_mb_id].CAN_MDH;
   802e8:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
		
		//Get message ID
		can_msg->id = (uint8_t)((CAN0->CAN_MB[rx_mb_id].CAN_MID & CAN_MID_MIDvA_Msk) >> CAN_MID_MIDvA_Pos);
   802ec:	f8d3 5208 	ldr.w	r5, [r3, #520]	; 0x208
   802f0:	f3c5 4587 	ubfx	r5, r5, #18, #8
   802f4:	7005      	strb	r5, [r0, #0]
		
		//Get data length
		can_msg->data_length = (uint8_t)((CAN0->CAN_MB[rx_mb_id].CAN_MSR & CAN_MSR_MDLC_Msk) >> CAN_MSR_MDLC_Pos);
   802f6:	f8d3 5210 	ldr.w	r5, [r3, #528]	; 0x210
   802fa:	f3c5 4503 	ubfx	r5, r5, #16, #4
   802fe:	7045      	strb	r5, [r0, #1]
		
		//Put data in CAN_MESSAGE object
		for(int i = 0; i < can_msg->data_length;i++)
   80300:	2300      	movs	r3, #0
   80302:	e003      	b.n	8030c <can_receive+0x48>
				can_msg->data[i] = (char)(data_low & 0xff);
				data_low = data_low >> 8;
			}
			else
			{
				can_msg->data[i] = (uint8_t)(data_high & 0xff);
   80304:	18c6      	adds	r6, r0, r3
   80306:	70b2      	strb	r2, [r6, #2]
				data_high = data_high >> 8;
   80308:	0a12      	lsrs	r2, r2, #8
		for(int i = 0; i < can_msg->data_length;i++)
   8030a:	3301      	adds	r3, #1
   8030c:	42ab      	cmp	r3, r5
   8030e:	da05      	bge.n	8031c <can_receive+0x58>
			if(i < 4)
   80310:	2b03      	cmp	r3, #3
   80312:	dcf7      	bgt.n	80304 <can_receive+0x40>
				can_msg->data[i] = (char)(data_low & 0xff);
   80314:	18c6      	adds	r6, r0, r3
   80316:	70b4      	strb	r4, [r6, #2]
				data_low = data_low >> 8;
   80318:	0a24      	lsrs	r4, r4, #8
   8031a:	e7f6      	b.n	8030a <can_receive+0x46>
			}
		}
		
		//Reset for new receive
		CAN0->CAN_MB[rx_mb_id].CAN_MMR = CAN_MMR_MOT_MB_RX;
   8031c:	4b09      	ldr	r3, [pc, #36]	; (80344 <can_receive+0x80>)
   8031e:	f101 0210 	add.w	r2, r1, #16
   80322:	0152      	lsls	r2, r2, #5
   80324:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
   80328:	5098      	str	r0, [r3, r2]
		CAN0->CAN_MB[rx_mb_id].CAN_MCR |= CAN_MCR_MTCR;
   8032a:	eb03 1141 	add.w	r1, r3, r1, lsl #5
   8032e:	f8d1 321c 	ldr.w	r3, [r1, #540]	; 0x21c
   80332:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   80336:	f8c1 321c 	str.w	r3, [r1, #540]	; 0x21c
		return 0;
   8033a:	2000      	movs	r0, #0
	}
	else //Mailbox busy
	{
		return 1;
	}
}
   8033c:	bc70      	pop	{r4, r5, r6}
   8033e:	4770      	bx	lr
		return 1;
   80340:	2001      	movs	r0, #1
   80342:	4770      	bx	lr
   80344:	400b4000 	.word	0x400b4000

00080348 <CAN0_Handler>:
 * \param void
 *
 * \retval 
 */
void CAN0_Handler( void )
{
   80348:	b530      	push	{r4, r5, lr}
   8034a:	b085      	sub	sp, #20
	//if(DEBUG_INTERRUPT)printf("CAN0 interrupt\n\r");
	char can_sr = CAN0->CAN_SR; 
   8034c:	4b21      	ldr	r3, [pc, #132]	; (803d4 <CAN0_Handler+0x8c>)
   8034e:	691d      	ldr	r5, [r3, #16]
	
	//RX interrupt
	if(can_sr & (CAN_SR_MB1 | CAN_SR_MB2) )//Only mailbox 1 and 2 specified for receiving
   80350:	f015 0f06 	tst.w	r5, #6
   80354:	d030      	beq.n	803b8 <CAN0_Handler+0x70>
	{
		CAN_MESSAGE message;
		if(can_sr & CAN_SR_MB1)  //Mailbox 1 event
   80356:	f015 0f02 	tst.w	r5, #2
   8035a:	d111      	bne.n	80380 <CAN0_Handler+0x38>
		{
			can_receive(&message, 1);

		}
		else if(can_sr & CAN_SR_MB2) //Mailbox 2 event
   8035c:	f015 0f04 	tst.w	r5, #4
   80360:	d013      	beq.n	8038a <CAN0_Handler+0x42>
		
		{
			can_receive(&message, 2);
   80362:	2102      	movs	r1, #2
   80364:	a801      	add	r0, sp, #4
   80366:	4b1c      	ldr	r3, [pc, #112]	; (803d8 <CAN0_Handler+0x90>)
   80368:	4798      	blx	r3
		else
		{
			printf("CAN0 message arrived in non-used mailbox\n\r");
		}

		if(DEBUG_INTERRUPT)printf("message id: %d\n\r", message.id);
   8036a:	f89d 1004 	ldrb.w	r1, [sp, #4]
   8036e:	481b      	ldr	r0, [pc, #108]	; (803dc <CAN0_Handler+0x94>)
   80370:	4c1b      	ldr	r4, [pc, #108]	; (803e0 <CAN0_Handler+0x98>)
   80372:	47a0      	blx	r4
		if(DEBUG_INTERRUPT)printf("message data length: %d\n\r", message.data_length);
   80374:	f89d 1005 	ldrb.w	r1, [sp, #5]
   80378:	481a      	ldr	r0, [pc, #104]	; (803e4 <CAN0_Handler+0x9c>)
   8037a:	47a0      	blx	r4
			if (message.data[2] > 100){
				message.data[2] -= 255;
				}
			}
		*/
		for (int i = 0; i < message.data_length; i++)
   8037c:	2400      	movs	r4, #0
   8037e:	e010      	b.n	803a2 <CAN0_Handler+0x5a>
			can_receive(&message, 1);
   80380:	2101      	movs	r1, #1
   80382:	a801      	add	r0, sp, #4
   80384:	4b14      	ldr	r3, [pc, #80]	; (803d8 <CAN0_Handler+0x90>)
   80386:	4798      	blx	r3
   80388:	e7ef      	b.n	8036a <CAN0_Handler+0x22>
			printf("CAN0 message arrived in non-used mailbox\n\r");
   8038a:	4817      	ldr	r0, [pc, #92]	; (803e8 <CAN0_Handler+0xa0>)
   8038c:	4b14      	ldr	r3, [pc, #80]	; (803e0 <CAN0_Handler+0x98>)
   8038e:	4798      	blx	r3
   80390:	e7eb      	b.n	8036a <CAN0_Handler+0x22>
		{
			if(DEBUG_INTERRUPT)printf("%d ", message.data[i]);
   80392:	ab04      	add	r3, sp, #16
   80394:	4423      	add	r3, r4
   80396:	f813 1c0a 	ldrb.w	r1, [r3, #-10]
   8039a:	4814      	ldr	r0, [pc, #80]	; (803ec <CAN0_Handler+0xa4>)
   8039c:	4b10      	ldr	r3, [pc, #64]	; (803e0 <CAN0_Handler+0x98>)
   8039e:	4798      	blx	r3
		for (int i = 0; i < message.data_length; i++)
   803a0:	3401      	adds	r4, #1
   803a2:	f89d 3005 	ldrb.w	r3, [sp, #5]
   803a6:	429c      	cmp	r4, r3
   803a8:	dbf3      	blt.n	80392 <CAN0_Handler+0x4a>
		}
		can_send(&message, 0);
   803aa:	2100      	movs	r1, #0
   803ac:	a801      	add	r0, sp, #4
   803ae:	4b10      	ldr	r3, [pc, #64]	; (803f0 <CAN0_Handler+0xa8>)
   803b0:	4798      	blx	r3
		if(DEBUG_INTERRUPT)printf("\n\r");
   803b2:	4810      	ldr	r0, [pc, #64]	; (803f4 <CAN0_Handler+0xac>)
   803b4:	4b0a      	ldr	r3, [pc, #40]	; (803e0 <CAN0_Handler+0x98>)
   803b6:	4798      	blx	r3
	}
	
	if(can_sr & CAN_SR_MB0)
   803b8:	f015 0f01 	tst.w	r5, #1
   803bc:	d002      	beq.n	803c4 <CAN0_Handler+0x7c>
	{
		//if(DEBUG_INTERRUPT) printf("CAN0 MB0 ready to send \n\r");
		
	//Disable interrupt
		CAN0->CAN_IDR = CAN_IER_MB0;
   803be:	2201      	movs	r2, #1
   803c0:	4b04      	ldr	r3, [pc, #16]	; (803d4 <CAN0_Handler+0x8c>)
   803c2:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   803c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
   803c8:	4b0b      	ldr	r3, [pc, #44]	; (803f8 <CAN0_Handler+0xb0>)
   803ca:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184

	}
	
	NVIC_ClearPendingIRQ(ID_CAN0);
	//sei();*/
}
   803ce:	b005      	add	sp, #20
   803d0:	bd30      	pop	{r4, r5, pc}
   803d2:	bf00      	nop
   803d4:	400b4000 	.word	0x400b4000
   803d8:	000802c5 	.word	0x000802c5
   803dc:	00080b38 	.word	0x00080b38
   803e0:	00080825 	.word	0x00080825
   803e4:	00080b4c 	.word	0x00080b4c
   803e8:	00080b0c 	.word	0x00080b0c
   803ec:	00080b68 	.word	0x00080b68
   803f0:	00080241 	.word	0x00080241
   803f4:	00080b34 	.word	0x00080b34
   803f8:	e000e100 	.word	0xe000e100

000803fc <Dummy_Handler>:
   803fc:	e7fe      	b.n	803fc <Dummy_Handler>
	...

00080400 <Reset_Handler>:
   80400:	b508      	push	{r3, lr}
   80402:	4b11      	ldr	r3, [pc, #68]	; (80448 <Reset_Handler+0x48>)
   80404:	4a11      	ldr	r2, [pc, #68]	; (8044c <Reset_Handler+0x4c>)
   80406:	429a      	cmp	r2, r3
   80408:	d009      	beq.n	8041e <Reset_Handler+0x1e>
   8040a:	4b0f      	ldr	r3, [pc, #60]	; (80448 <Reset_Handler+0x48>)
   8040c:	4a0f      	ldr	r2, [pc, #60]	; (8044c <Reset_Handler+0x4c>)
   8040e:	e003      	b.n	80418 <Reset_Handler+0x18>
   80410:	6811      	ldr	r1, [r2, #0]
   80412:	6019      	str	r1, [r3, #0]
   80414:	3304      	adds	r3, #4
   80416:	3204      	adds	r2, #4
   80418:	490d      	ldr	r1, [pc, #52]	; (80450 <Reset_Handler+0x50>)
   8041a:	428b      	cmp	r3, r1
   8041c:	d3f8      	bcc.n	80410 <Reset_Handler+0x10>
   8041e:	4b0d      	ldr	r3, [pc, #52]	; (80454 <Reset_Handler+0x54>)
   80420:	e002      	b.n	80428 <Reset_Handler+0x28>
   80422:	2200      	movs	r2, #0
   80424:	601a      	str	r2, [r3, #0]
   80426:	3304      	adds	r3, #4
   80428:	4a0b      	ldr	r2, [pc, #44]	; (80458 <Reset_Handler+0x58>)
   8042a:	4293      	cmp	r3, r2
   8042c:	d3f9      	bcc.n	80422 <Reset_Handler+0x22>
   8042e:	4b0b      	ldr	r3, [pc, #44]	; (8045c <Reset_Handler+0x5c>)
   80430:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   80434:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   80438:	4a09      	ldr	r2, [pc, #36]	; (80460 <Reset_Handler+0x60>)
   8043a:	6093      	str	r3, [r2, #8]
   8043c:	4b09      	ldr	r3, [pc, #36]	; (80464 <Reset_Handler+0x64>)
   8043e:	4798      	blx	r3
   80440:	4b09      	ldr	r3, [pc, #36]	; (80468 <Reset_Handler+0x68>)
   80442:	4798      	blx	r3
   80444:	e7fe      	b.n	80444 <Reset_Handler+0x44>
   80446:	bf00      	nop
   80448:	20000000 	.word	0x20000000
   8044c:	00080bc8 	.word	0x00080bc8
   80450:	20000434 	.word	0x20000434
   80454:	20000434 	.word	0x20000434
   80458:	200004b8 	.word	0x200004b8
   8045c:	00080000 	.word	0x00080000
   80460:	e000ed00 	.word	0xe000ed00
   80464:	0008099d 	.word	0x0008099d
   80468:	00080511 	.word	0x00080511

0008046c <SystemInit>:
   8046c:	f44f 6380 	mov.w	r3, #1024	; 0x400
   80470:	4a20      	ldr	r2, [pc, #128]	; (804f4 <SystemInit+0x88>)
   80472:	6013      	str	r3, [r2, #0]
   80474:	f502 7200 	add.w	r2, r2, #512	; 0x200
   80478:	6013      	str	r3, [r2, #0]
   8047a:	4b1f      	ldr	r3, [pc, #124]	; (804f8 <SystemInit+0x8c>)
   8047c:	6a1b      	ldr	r3, [r3, #32]
   8047e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80482:	d107      	bne.n	80494 <SystemInit+0x28>
   80484:	4a1d      	ldr	r2, [pc, #116]	; (804fc <SystemInit+0x90>)
   80486:	4b1c      	ldr	r3, [pc, #112]	; (804f8 <SystemInit+0x8c>)
   80488:	621a      	str	r2, [r3, #32]
   8048a:	4b1b      	ldr	r3, [pc, #108]	; (804f8 <SystemInit+0x8c>)
   8048c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8048e:	f013 0f01 	tst.w	r3, #1
   80492:	d0fa      	beq.n	8048a <SystemInit+0x1e>
   80494:	4a1a      	ldr	r2, [pc, #104]	; (80500 <SystemInit+0x94>)
   80496:	4b18      	ldr	r3, [pc, #96]	; (804f8 <SystemInit+0x8c>)
   80498:	621a      	str	r2, [r3, #32]
   8049a:	4b17      	ldr	r3, [pc, #92]	; (804f8 <SystemInit+0x8c>)
   8049c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8049e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   804a2:	d0fa      	beq.n	8049a <SystemInit+0x2e>
   804a4:	4a14      	ldr	r2, [pc, #80]	; (804f8 <SystemInit+0x8c>)
   804a6:	6b13      	ldr	r3, [r2, #48]	; 0x30
   804a8:	f023 0303 	bic.w	r3, r3, #3
   804ac:	f043 0301 	orr.w	r3, r3, #1
   804b0:	6313      	str	r3, [r2, #48]	; 0x30
   804b2:	4b11      	ldr	r3, [pc, #68]	; (804f8 <SystemInit+0x8c>)
   804b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   804b6:	f013 0f08 	tst.w	r3, #8
   804ba:	d0fa      	beq.n	804b2 <SystemInit+0x46>
   804bc:	4a11      	ldr	r2, [pc, #68]	; (80504 <SystemInit+0x98>)
   804be:	4b0e      	ldr	r3, [pc, #56]	; (804f8 <SystemInit+0x8c>)
   804c0:	629a      	str	r2, [r3, #40]	; 0x28
   804c2:	4b0d      	ldr	r3, [pc, #52]	; (804f8 <SystemInit+0x8c>)
   804c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   804c6:	f013 0f02 	tst.w	r3, #2
   804ca:	d0fa      	beq.n	804c2 <SystemInit+0x56>
   804cc:	2211      	movs	r2, #17
   804ce:	4b0a      	ldr	r3, [pc, #40]	; (804f8 <SystemInit+0x8c>)
   804d0:	631a      	str	r2, [r3, #48]	; 0x30
   804d2:	4b09      	ldr	r3, [pc, #36]	; (804f8 <SystemInit+0x8c>)
   804d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   804d6:	f013 0f08 	tst.w	r3, #8
   804da:	d0fa      	beq.n	804d2 <SystemInit+0x66>
   804dc:	2212      	movs	r2, #18
   804de:	4b06      	ldr	r3, [pc, #24]	; (804f8 <SystemInit+0x8c>)
   804e0:	631a      	str	r2, [r3, #48]	; 0x30
   804e2:	4b05      	ldr	r3, [pc, #20]	; (804f8 <SystemInit+0x8c>)
   804e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   804e6:	f013 0f08 	tst.w	r3, #8
   804ea:	d0fa      	beq.n	804e2 <SystemInit+0x76>
   804ec:	4a06      	ldr	r2, [pc, #24]	; (80508 <SystemInit+0x9c>)
   804ee:	4b07      	ldr	r3, [pc, #28]	; (8050c <SystemInit+0xa0>)
   804f0:	601a      	str	r2, [r3, #0]
   804f2:	4770      	bx	lr
   804f4:	400e0a00 	.word	0x400e0a00
   804f8:	400e0600 	.word	0x400e0600
   804fc:	00370809 	.word	0x00370809
   80500:	01370809 	.word	0x01370809
   80504:	200d3f01 	.word	0x200d3f01
   80508:	0501bd00 	.word	0x0501bd00
   8050c:	20000000 	.word	0x20000000

00080510 <main>:




int main(void)
{
   80510:	b510      	push	{r4, lr}
    /* Initialize the SAM system */
    SystemInit();
   80512:	4b17      	ldr	r3, [pc, #92]	; (80570 <main+0x60>)
   80514:	4798      	blx	r3
	
	
	
	
	configure_uart(); //STARTS THE UART
   80516:	4b17      	ldr	r3, [pc, #92]	; (80574 <main+0x64>)
   80518:	4798      	blx	r3
	
	can_init(0x1292177,1,2);
   8051a:	2202      	movs	r2, #2
   8051c:	2101      	movs	r1, #1
   8051e:	4816      	ldr	r0, [pc, #88]	; (80578 <main+0x68>)
   80520:	4b16      	ldr	r3, [pc, #88]	; (8057c <main+0x6c>)
   80522:	4798      	blx	r3
	
	WDT->WDT_MR = WDT_MR_WDDIS; //DISABLES THE WATCHDOG
   80524:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   80528:	4b15      	ldr	r3, [pc, #84]	; (80580 <main+0x70>)
   8052a:	605a      	str	r2, [r3, #4]
	
	PIOA->PIO_PER = PIO_PA19 | PIO_PA20; // PIN I/O SELECT
   8052c:	f5a3 6345 	sub.w	r3, r3, #3152	; 0xc50
   80530:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
   80534:	601a      	str	r2, [r3, #0]
	PIOA->PIO_OER = PIO_PA19 | PIO_PA20; // PIN OUTPUT SELECT
   80536:	611a      	str	r2, [r3, #16]
	
	PIOA->PIO_SODR = PIO_PA19; //PIN SET OUTPUT DATA REGISTER
   80538:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   8053c:	631a      	str	r2, [r3, #48]	; 0x30
	//PIOA->PIO_SODR = PIO_PA20;
	pwm_init();
   8053e:	4b11      	ldr	r3, [pc, #68]	; (80584 <main+0x74>)
   80540:	4798      	blx	r3
	int i = 1;
   80542:	2401      	movs	r4, #1
   80544:	e000      	b.n	80548 <main+0x38>
		REG_PWM_CDTY6 = 0x1600;
		REG_PWM_CDTYUPD5 = 0x1600;
		REG_PWM_CDTYUPD6 = 0x1600; //used to actually change pwm, 0x3345 = 0 V, 0x00 = 5V
		printf("i : %d\n\r", i);
		if (i == 0x3345){
			i = 0;
   80546:	2400      	movs	r4, #0
		i++;
   80548:	3401      	adds	r4, #1
		REG_PWM_CDTY5 = 0x1600;
   8054a:	f44f 53b0 	mov.w	r3, #5632	; 0x1600
   8054e:	4a0e      	ldr	r2, [pc, #56]	; (80588 <main+0x78>)
   80550:	6013      	str	r3, [r2, #0]
		REG_PWM_CDTY6 = 0x1600;
   80552:	3220      	adds	r2, #32
   80554:	6013      	str	r3, [r2, #0]
		REG_PWM_CDTYUPD5 = 0x1600;
   80556:	3a1c      	subs	r2, #28
   80558:	6013      	str	r3, [r2, #0]
		REG_PWM_CDTYUPD6 = 0x1600; //used to actually change pwm, 0x3345 = 0 V, 0x00 = 5V
   8055a:	3220      	adds	r2, #32
   8055c:	6013      	str	r3, [r2, #0]
		printf("i : %d\n\r", i);
   8055e:	4621      	mov	r1, r4
   80560:	480a      	ldr	r0, [pc, #40]	; (8058c <main+0x7c>)
   80562:	4b0b      	ldr	r3, [pc, #44]	; (80590 <main+0x80>)
   80564:	4798      	blx	r3
		if (i == 0x3345){
   80566:	f243 3345 	movw	r3, #13125	; 0x3345
   8056a:	429c      	cmp	r4, r3
   8056c:	d1ec      	bne.n	80548 <main+0x38>
   8056e:	e7ea      	b.n	80546 <main+0x36>
   80570:	0008046d 	.word	0x0008046d
   80574:	000808a9 	.word	0x000808a9
   80578:	01292177 	.word	0x01292177
   8057c:	00080161 	.word	0x00080161
   80580:	400e1a50 	.word	0x400e1a50
   80584:	00080849 	.word	0x00080849
   80588:	400942a4 	.word	0x400942a4
   8058c:	00080b6c 	.word	0x00080b6c
   80590:	00080825 	.word	0x00080825

00080594 <printchar>:
   80594:	b508      	push	{r3, lr}
   80596:	b2c8      	uxtb	r0, r1
   80598:	4b01      	ldr	r3, [pc, #4]	; (805a0 <printchar+0xc>)
   8059a:	4798      	blx	r3
   8059c:	bd08      	pop	{r3, pc}
   8059e:	bf00      	nop
   805a0:	00080911 	.word	0x00080911

000805a4 <prints>:
   805a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   805a8:	4607      	mov	r7, r0
   805aa:	460e      	mov	r6, r1
   805ac:	1e15      	subs	r5, r2, #0
   805ae:	dd02      	ble.n	805b6 <prints+0x12>
   805b0:	460a      	mov	r2, r1
   805b2:	2100      	movs	r1, #0
   805b4:	e004      	b.n	805c0 <prints+0x1c>
   805b6:	f04f 0820 	mov.w	r8, #32
   805ba:	e00e      	b.n	805da <prints+0x36>
   805bc:	3101      	adds	r1, #1
   805be:	3201      	adds	r2, #1
   805c0:	7810      	ldrb	r0, [r2, #0]
   805c2:	2800      	cmp	r0, #0
   805c4:	d1fa      	bne.n	805bc <prints+0x18>
   805c6:	42a9      	cmp	r1, r5
   805c8:	da01      	bge.n	805ce <prints+0x2a>
   805ca:	1a6d      	subs	r5, r5, r1
   805cc:	e000      	b.n	805d0 <prints+0x2c>
   805ce:	2500      	movs	r5, #0
   805d0:	f013 0f02 	tst.w	r3, #2
   805d4:	d106      	bne.n	805e4 <prints+0x40>
   805d6:	f04f 0820 	mov.w	r8, #32
   805da:	f013 0401 	ands.w	r4, r3, #1
   805de:	d00a      	beq.n	805f6 <prints+0x52>
   805e0:	2400      	movs	r4, #0
   805e2:	e010      	b.n	80606 <prints+0x62>
   805e4:	f04f 0830 	mov.w	r8, #48	; 0x30
   805e8:	e7f7      	b.n	805da <prints+0x36>
   805ea:	4641      	mov	r1, r8
   805ec:	4638      	mov	r0, r7
   805ee:	4b0d      	ldr	r3, [pc, #52]	; (80624 <prints+0x80>)
   805f0:	4798      	blx	r3
   805f2:	3401      	adds	r4, #1
   805f4:	3d01      	subs	r5, #1
   805f6:	2d00      	cmp	r5, #0
   805f8:	dcf7      	bgt.n	805ea <prints+0x46>
   805fa:	e004      	b.n	80606 <prints+0x62>
   805fc:	4638      	mov	r0, r7
   805fe:	4b09      	ldr	r3, [pc, #36]	; (80624 <prints+0x80>)
   80600:	4798      	blx	r3
   80602:	3401      	adds	r4, #1
   80604:	3601      	adds	r6, #1
   80606:	7831      	ldrb	r1, [r6, #0]
   80608:	2900      	cmp	r1, #0
   8060a:	d1f7      	bne.n	805fc <prints+0x58>
   8060c:	e005      	b.n	8061a <prints+0x76>
   8060e:	4641      	mov	r1, r8
   80610:	4638      	mov	r0, r7
   80612:	4b04      	ldr	r3, [pc, #16]	; (80624 <prints+0x80>)
   80614:	4798      	blx	r3
   80616:	3401      	adds	r4, #1
   80618:	3d01      	subs	r5, #1
   8061a:	2d00      	cmp	r5, #0
   8061c:	dcf7      	bgt.n	8060e <prints+0x6a>
   8061e:	4620      	mov	r0, r4
   80620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80624:	00080595 	.word	0x00080595

00080628 <printi>:
   80628:	b5f0      	push	{r4, r5, r6, r7, lr}
   8062a:	b085      	sub	sp, #20
   8062c:	4607      	mov	r7, r0
   8062e:	980c      	ldr	r0, [sp, #48]	; 0x30
   80630:	b151      	cbz	r1, 80648 <printi+0x20>
   80632:	461e      	mov	r6, r3
   80634:	460c      	mov	r4, r1
   80636:	b113      	cbz	r3, 8063e <printi+0x16>
   80638:	2a0a      	cmp	r2, #10
   8063a:	d012      	beq.n	80662 <printi+0x3a>
   8063c:	2600      	movs	r6, #0
   8063e:	ad04      	add	r5, sp, #16
   80640:	2300      	movs	r3, #0
   80642:	f805 3d01 	strb.w	r3, [r5, #-1]!
   80646:	e018      	b.n	8067a <printi+0x52>
   80648:	2330      	movs	r3, #48	; 0x30
   8064a:	f88d 3004 	strb.w	r3, [sp, #4]
   8064e:	2300      	movs	r3, #0
   80650:	f88d 3005 	strb.w	r3, [sp, #5]
   80654:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   80656:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   80658:	a901      	add	r1, sp, #4
   8065a:	4638      	mov	r0, r7
   8065c:	4c1b      	ldr	r4, [pc, #108]	; (806cc <printi+0xa4>)
   8065e:	47a0      	blx	r4
   80660:	e029      	b.n	806b6 <printi+0x8e>
   80662:	2900      	cmp	r1, #0
   80664:	db01      	blt.n	8066a <printi+0x42>
   80666:	2600      	movs	r6, #0
   80668:	e7e9      	b.n	8063e <printi+0x16>
   8066a:	424c      	negs	r4, r1
   8066c:	2601      	movs	r6, #1
   8066e:	e7e6      	b.n	8063e <printi+0x16>
   80670:	3330      	adds	r3, #48	; 0x30
   80672:	f805 3d01 	strb.w	r3, [r5, #-1]!
   80676:	fbb4 f4f2 	udiv	r4, r4, r2
   8067a:	b14c      	cbz	r4, 80690 <printi+0x68>
   8067c:	fbb4 f3f2 	udiv	r3, r4, r2
   80680:	fb02 4313 	mls	r3, r2, r3, r4
   80684:	2b09      	cmp	r3, #9
   80686:	ddf3      	ble.n	80670 <printi+0x48>
   80688:	f1a0 013a 	sub.w	r1, r0, #58	; 0x3a
   8068c:	440b      	add	r3, r1
   8068e:	e7ef      	b.n	80670 <printi+0x48>
   80690:	b156      	cbz	r6, 806a8 <printi+0x80>
   80692:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   80694:	b11b      	cbz	r3, 8069e <printi+0x76>
   80696:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   80698:	f013 0f02 	tst.w	r3, #2
   8069c:	d10d      	bne.n	806ba <printi+0x92>
   8069e:	232d      	movs	r3, #45	; 0x2d
   806a0:	f805 3c01 	strb.w	r3, [r5, #-1]
   806a4:	3d01      	subs	r5, #1
   806a6:	2600      	movs	r6, #0
   806a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   806aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   806ac:	4629      	mov	r1, r5
   806ae:	4638      	mov	r0, r7
   806b0:	4c06      	ldr	r4, [pc, #24]	; (806cc <printi+0xa4>)
   806b2:	47a0      	blx	r4
   806b4:	4430      	add	r0, r6
   806b6:	b005      	add	sp, #20
   806b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   806ba:	212d      	movs	r1, #45	; 0x2d
   806bc:	4638      	mov	r0, r7
   806be:	4b04      	ldr	r3, [pc, #16]	; (806d0 <printi+0xa8>)
   806c0:	4798      	blx	r3
   806c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   806c4:	3b01      	subs	r3, #1
   806c6:	930a      	str	r3, [sp, #40]	; 0x28
   806c8:	e7ee      	b.n	806a8 <printi+0x80>
   806ca:	bf00      	nop
   806cc:	000805a5 	.word	0x000805a5
   806d0:	00080595 	.word	0x00080595

000806d4 <print>:
   806d4:	b5f0      	push	{r4, r5, r6, r7, lr}
   806d6:	b089      	sub	sp, #36	; 0x24
   806d8:	4606      	mov	r6, r0
   806da:	460c      	mov	r4, r1
   806dc:	9205      	str	r2, [sp, #20]
   806de:	2500      	movs	r5, #0
   806e0:	e081      	b.n	807e6 <print+0x112>
   806e2:	1ca2      	adds	r2, r4, #2
   806e4:	2301      	movs	r3, #1
   806e6:	e08b      	b.n	80800 <print+0x12c>
   806e8:	3401      	adds	r4, #1
   806ea:	f043 0302 	orr.w	r3, r3, #2
   806ee:	7822      	ldrb	r2, [r4, #0]
   806f0:	2a30      	cmp	r2, #48	; 0x30
   806f2:	d0f9      	beq.n	806e8 <print+0x14>
   806f4:	2200      	movs	r2, #0
   806f6:	e006      	b.n	80706 <print+0x32>
   806f8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   806fc:	0050      	lsls	r0, r2, #1
   806fe:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   80702:	4402      	add	r2, r0
   80704:	3401      	adds	r4, #1
   80706:	7821      	ldrb	r1, [r4, #0]
   80708:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
   8070c:	b2c0      	uxtb	r0, r0
   8070e:	2809      	cmp	r0, #9
   80710:	d9f2      	bls.n	806f8 <print+0x24>
   80712:	2973      	cmp	r1, #115	; 0x73
   80714:	d018      	beq.n	80748 <print+0x74>
   80716:	2964      	cmp	r1, #100	; 0x64
   80718:	d022      	beq.n	80760 <print+0x8c>
   8071a:	2978      	cmp	r1, #120	; 0x78
   8071c:	d02f      	beq.n	8077e <print+0xaa>
   8071e:	2958      	cmp	r1, #88	; 0x58
   80720:	d03c      	beq.n	8079c <print+0xc8>
   80722:	2975      	cmp	r1, #117	; 0x75
   80724:	d049      	beq.n	807ba <print+0xe6>
   80726:	2963      	cmp	r1, #99	; 0x63
   80728:	d15c      	bne.n	807e4 <print+0x110>
   8072a:	9905      	ldr	r1, [sp, #20]
   8072c:	1d08      	adds	r0, r1, #4
   8072e:	9005      	str	r0, [sp, #20]
   80730:	7809      	ldrb	r1, [r1, #0]
   80732:	f88d 101c 	strb.w	r1, [sp, #28]
   80736:	2100      	movs	r1, #0
   80738:	f88d 101d 	strb.w	r1, [sp, #29]
   8073c:	a907      	add	r1, sp, #28
   8073e:	4630      	mov	r0, r6
   80740:	4f34      	ldr	r7, [pc, #208]	; (80814 <print+0x140>)
   80742:	47b8      	blx	r7
   80744:	4405      	add	r5, r0
   80746:	e04d      	b.n	807e4 <print+0x110>
   80748:	9905      	ldr	r1, [sp, #20]
   8074a:	1d08      	adds	r0, r1, #4
   8074c:	9005      	str	r0, [sp, #20]
   8074e:	6809      	ldr	r1, [r1, #0]
   80750:	b121      	cbz	r1, 8075c <print+0x88>
   80752:	4630      	mov	r0, r6
   80754:	4f2f      	ldr	r7, [pc, #188]	; (80814 <print+0x140>)
   80756:	47b8      	blx	r7
   80758:	4405      	add	r5, r0
   8075a:	e043      	b.n	807e4 <print+0x110>
   8075c:	492e      	ldr	r1, [pc, #184]	; (80818 <print+0x144>)
   8075e:	e7f8      	b.n	80752 <print+0x7e>
   80760:	9905      	ldr	r1, [sp, #20]
   80762:	1d08      	adds	r0, r1, #4
   80764:	9005      	str	r0, [sp, #20]
   80766:	6809      	ldr	r1, [r1, #0]
   80768:	2061      	movs	r0, #97	; 0x61
   8076a:	9002      	str	r0, [sp, #8]
   8076c:	9301      	str	r3, [sp, #4]
   8076e:	9200      	str	r2, [sp, #0]
   80770:	2301      	movs	r3, #1
   80772:	220a      	movs	r2, #10
   80774:	4630      	mov	r0, r6
   80776:	4f29      	ldr	r7, [pc, #164]	; (8081c <print+0x148>)
   80778:	47b8      	blx	r7
   8077a:	4405      	add	r5, r0
   8077c:	e032      	b.n	807e4 <print+0x110>
   8077e:	9905      	ldr	r1, [sp, #20]
   80780:	1d08      	adds	r0, r1, #4
   80782:	9005      	str	r0, [sp, #20]
   80784:	6809      	ldr	r1, [r1, #0]
   80786:	2061      	movs	r0, #97	; 0x61
   80788:	9002      	str	r0, [sp, #8]
   8078a:	9301      	str	r3, [sp, #4]
   8078c:	9200      	str	r2, [sp, #0]
   8078e:	2300      	movs	r3, #0
   80790:	2210      	movs	r2, #16
   80792:	4630      	mov	r0, r6
   80794:	4f21      	ldr	r7, [pc, #132]	; (8081c <print+0x148>)
   80796:	47b8      	blx	r7
   80798:	4405      	add	r5, r0
   8079a:	e023      	b.n	807e4 <print+0x110>
   8079c:	9905      	ldr	r1, [sp, #20]
   8079e:	1d08      	adds	r0, r1, #4
   807a0:	9005      	str	r0, [sp, #20]
   807a2:	6809      	ldr	r1, [r1, #0]
   807a4:	2041      	movs	r0, #65	; 0x41
   807a6:	9002      	str	r0, [sp, #8]
   807a8:	9301      	str	r3, [sp, #4]
   807aa:	9200      	str	r2, [sp, #0]
   807ac:	2300      	movs	r3, #0
   807ae:	2210      	movs	r2, #16
   807b0:	4630      	mov	r0, r6
   807b2:	4f1a      	ldr	r7, [pc, #104]	; (8081c <print+0x148>)
   807b4:	47b8      	blx	r7
   807b6:	4405      	add	r5, r0
   807b8:	e014      	b.n	807e4 <print+0x110>
   807ba:	9905      	ldr	r1, [sp, #20]
   807bc:	1d08      	adds	r0, r1, #4
   807be:	9005      	str	r0, [sp, #20]
   807c0:	6809      	ldr	r1, [r1, #0]
   807c2:	2061      	movs	r0, #97	; 0x61
   807c4:	9002      	str	r0, [sp, #8]
   807c6:	9301      	str	r3, [sp, #4]
   807c8:	9200      	str	r2, [sp, #0]
   807ca:	2300      	movs	r3, #0
   807cc:	220a      	movs	r2, #10
   807ce:	4630      	mov	r0, r6
   807d0:	4f12      	ldr	r7, [pc, #72]	; (8081c <print+0x148>)
   807d2:	47b8      	blx	r7
   807d4:	4405      	add	r5, r0
   807d6:	e005      	b.n	807e4 <print+0x110>
   807d8:	4614      	mov	r4, r2
   807da:	7821      	ldrb	r1, [r4, #0]
   807dc:	4630      	mov	r0, r6
   807de:	4b10      	ldr	r3, [pc, #64]	; (80820 <print+0x14c>)
   807e0:	4798      	blx	r3
   807e2:	3501      	adds	r5, #1
   807e4:	3401      	adds	r4, #1
   807e6:	7823      	ldrb	r3, [r4, #0]
   807e8:	b163      	cbz	r3, 80804 <print+0x130>
   807ea:	2b25      	cmp	r3, #37	; 0x25
   807ec:	d1f5      	bne.n	807da <print+0x106>
   807ee:	1c62      	adds	r2, r4, #1
   807f0:	7863      	ldrb	r3, [r4, #1]
   807f2:	b13b      	cbz	r3, 80804 <print+0x130>
   807f4:	2b25      	cmp	r3, #37	; 0x25
   807f6:	d0ef      	beq.n	807d8 <print+0x104>
   807f8:	2b2d      	cmp	r3, #45	; 0x2d
   807fa:	f43f af72 	beq.w	806e2 <print+0xe>
   807fe:	2300      	movs	r3, #0
   80800:	4614      	mov	r4, r2
   80802:	e774      	b.n	806ee <print+0x1a>
   80804:	b116      	cbz	r6, 8080c <print+0x138>
   80806:	6833      	ldr	r3, [r6, #0]
   80808:	2200      	movs	r2, #0
   8080a:	701a      	strb	r2, [r3, #0]
   8080c:	4628      	mov	r0, r5
   8080e:	b009      	add	sp, #36	; 0x24
   80810:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80812:	bf00      	nop
   80814:	000805a5 	.word	0x000805a5
   80818:	00080b78 	.word	0x00080b78
   8081c:	00080629 	.word	0x00080629
   80820:	00080595 	.word	0x00080595

00080824 <printf>:
   80824:	b40f      	push	{r0, r1, r2, r3}
   80826:	b500      	push	{lr}
   80828:	b083      	sub	sp, #12
   8082a:	aa04      	add	r2, sp, #16
   8082c:	f852 1b04 	ldr.w	r1, [r2], #4
   80830:	9201      	str	r2, [sp, #4]
   80832:	2000      	movs	r0, #0
   80834:	4b03      	ldr	r3, [pc, #12]	; (80844 <printf+0x20>)
   80836:	4798      	blx	r3
   80838:	b003      	add	sp, #12
   8083a:	f85d eb04 	ldr.w	lr, [sp], #4
   8083e:	b004      	add	sp, #16
   80840:	4770      	bx	lr
   80842:	bf00      	nop
   80844:	000806d5 	.word	0x000806d5

00080848 <pwm_init>:


void pwm_init(void) {
	
	
	PMC->PMC_PCER0 = 1 << ID_PWM; //Allows power
   80848:	2200      	movs	r2, #0
   8084a:	4b12      	ldr	r3, [pc, #72]	; (80894 <pwm_init+0x4c>)
   8084c:	611a      	str	r2, [r3, #16]
	PIOA->PIO_ABSR = PIO_PC18B_PWMH6 | PIO_PC19B_PWMH5; //Selects peripheral 2.
   8084e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
   80852:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
   80856:	671a      	str	r2, [r3, #112]	; 0x70
	PIOA->PIO_PDR = PIO_PC18B_PWMH6 | PIO_PC19B_PWMH5; //Disables the PIO, so that peripheral can use it. Not sure if this is the correct implementation
   80858:	605a      	str	r2, [r3, #4]
	PWM->PWM_WPCR =PWM_WPCR_WPCMD(1); //Unlock user interface
   8085a:	4a0f      	ldr	r2, [pc, #60]	; (80898 <pwm_init+0x50>)
   8085c:	2301      	movs	r3, #1
   8085e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
	PWM->PWM_CLK = PWM_CLK_DIVA(1) | PWM_CLK_DIVB(1) | PWM_CLK_PREA(7) | PWM_CLK_PREB(7); //TODO: check if this is correct, MCK/128
   80862:	4b0e      	ldr	r3, [pc, #56]	; (8089c <pwm_init+0x54>)
   80864:	6013      	str	r3, [r2, #0]
	
	REG_PWM_CMR5 = PWM_CMR_CPRE_CLKA; //CLOCK A, LEFT ALIGNED
   80866:	210b      	movs	r1, #11
   80868:	4b0d      	ldr	r3, [pc, #52]	; (808a0 <pwm_init+0x58>)
   8086a:	6019      	str	r1, [r3, #0]
	REG_PWM_CMR6 = PWM_CMR_CPRE_CLKB; //CLOCK B, LEFT ALIGNED
   8086c:	210c      	movs	r1, #12
   8086e:	3320      	adds	r3, #32
   80870:	6019      	str	r1, [r3, #0]
	
	REG_PWM_CPRD5 = 0x3345; //SETS THE PERIOD TO 20MS, 58MHZ*20ms = X * CPRD
   80872:	f243 3345 	movw	r3, #13125	; 0x3345
   80876:	490b      	ldr	r1, [pc, #44]	; (808a4 <pwm_init+0x5c>)
   80878:	600b      	str	r3, [r1, #0]
	REG_PWM_CPRD6 = 0x3345;
   8087a:	3120      	adds	r1, #32
   8087c:	600b      	str	r3, [r1, #0]
	
	REG_PWM_CPRDUPD5 = 0x3345; //USE AFTER VALIDATION OF THE CHANNEL?
   8087e:	391c      	subs	r1, #28
   80880:	600b      	str	r3, [r1, #0]
	REG_PWM_CPRDUPD6 = 0x3345;
   80882:	3120      	adds	r1, #32
   80884:	600b      	str	r3, [r1, #0]
	
	REG_PWM_CDTY5 = 0x3345;
   80886:	392c      	subs	r1, #44	; 0x2c
   80888:	600b      	str	r3, [r1, #0]
	REG_PWM_CDTY6 = 0x3345; //used to actually change pwm, 0x3345 = 0 V, 0x00 = 5V
   8088a:	3120      	adds	r1, #32
   8088c:	600b      	str	r3, [r1, #0]
	
	//PWM->PWM_IER1 = PWM_IER1_CHID0 | PWM_IER1_FCHID0;
	//PWM->PWM_IER2 = WRDYE 1680 000
	
	
	PWM->PWM_ENA = PWM_ENA_CHID5 | PWM_ENA_CHID6; //ENABLE
   8088e:	2360      	movs	r3, #96	; 0x60
   80890:	6053      	str	r3, [r2, #4]
   80892:	4770      	bx	lr
   80894:	400e0600 	.word	0x400e0600
   80898:	40094000 	.word	0x40094000
   8089c:	07010701 	.word	0x07010701
   808a0:	400942a0 	.word	0x400942a0
   808a4:	400942ac 	.word	0x400942ac

000808a8 <configure_uart>:
	uint32_t ul_sr;

/*
Initialize UART ring buffer as empty
*/
rx_buffer.head=0;
   808a8:	4b16      	ldr	r3, [pc, #88]	; (80904 <configure_uart+0x5c>)
   808aa:	2200      	movs	r2, #0
   808ac:	701a      	strb	r2, [r3, #0]
rx_buffer.tail=0;
   808ae:	705a      	strb	r2, [r3, #1]
/*
Initialize UART communication
*/
	// Pin configuration
	// Disable interrupts on Uart receive (URXD) and transmit (UTXD) pins
	PIOA->PIO_IDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   808b0:	4b15      	ldr	r3, [pc, #84]	; (80908 <configure_uart+0x60>)
   808b2:	f44f 7140 	mov.w	r1, #768	; 0x300
   808b6:	6459      	str	r1, [r3, #68]	; 0x44

	// Disable the Parallel IO (PIO) of the URXD and UTXD pins so that the peripheral controller can use them
	PIOA->PIO_PDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   808b8:	6059      	str	r1, [r3, #4]

	// Read current peripheral AB select register and set the UTXD and URXD pins to 0 (UART is connected as peripheral A)
	ul_sr = PIOA->PIO_ABSR;
   808ba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
	PIOA->PIO_ABSR &= ~(PIO_PA8A_URXD | PIO_PA9A_UTXD) & ul_sr;
   808bc:	6f18      	ldr	r0, [r3, #112]	; 0x70
   808be:	4002      	ands	r2, r0
   808c0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   808c4:	671a      	str	r2, [r3, #112]	; 0x70

	// Enable pull up resistor on URXD and UTXD pin
	PIOA->PIO_PUER = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   808c6:	6659      	str	r1, [r3, #100]	; 0x64

	// Uart configuration
	
	// Enable the peripheral UART controller in Power Management Controller (PMC)
	PMC->PMC_PCER0 = 1 << ID_UART;
   808c8:	f44f 7280 	mov.w	r2, #256	; 0x100
   808cc:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
   808d0:	611a      	str	r2, [r3, #16]

	// Reset and disable receiver and transmitter
	UART->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX | UART_CR_RXDIS | UART_CR_TXDIS;
   808d2:	f503 7300 	add.w	r3, r3, #512	; 0x200
   808d6:	21ac      	movs	r1, #172	; 0xac
   808d8:	6019      	str	r1, [r3, #0]

	// Set the baudrate
	UART->UART_BRGR = 547; // MCK / 16 * x = BaudRate (write x into UART_BRGR)  MCK = 84 Mhz
   808da:	f240 2123 	movw	r1, #547	; 0x223
   808de:	6219      	str	r1, [r3, #32]

	// No parity bits
	UART->UART_MR = UART_MR_PAR_NO | UART_MR_CHMODE_NORMAL;	
   808e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
   808e4:	6059      	str	r1, [r3, #4]

	// Disable PDC channel
	UART->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   808e6:	f240 2102 	movw	r1, #514	; 0x202
   808ea:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120

	// Configure interrupts on receive ready and errors
	UART->UART_IDR = 0xFFFFFFFF;
   808ee:	f04f 31ff 	mov.w	r1, #4294967295
   808f2:	60d9      	str	r1, [r3, #12]
	UART->UART_IER = UART_IER_RXRDY | UART_IER_OVRE | UART_IER_FRAME | UART_IER_PARE;
   808f4:	21e1      	movs	r1, #225	; 0xe1
   808f6:	6099      	str	r1, [r3, #8]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   808f8:	4904      	ldr	r1, [pc, #16]	; (8090c <configure_uart+0x64>)
   808fa:	600a      	str	r2, [r1, #0]

	// Enable UART interrupt in the Nested Vectored Interrupt Controller(NVIC)
	NVIC_EnableIRQ((IRQn_Type) ID_UART);

	// Enable UART receiver and transmitter
	UART->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   808fc:	2250      	movs	r2, #80	; 0x50
   808fe:	601a      	str	r2, [r3, #0]
   80900:	4770      	bx	lr
   80902:	bf00      	nop
   80904:	20000450 	.word	0x20000450
   80908:	400e0e00 	.word	0x400e0e00
   8090c:	e000e100 	.word	0xe000e100

00080910 <uart_putchar>:
 * \retval Success(0) or failure(1).
 */
int uart_putchar(const uint8_t c)
{
	// Check if the transmitter is ready
	if((UART->UART_SR & UART_SR_TXRDY) != UART_SR_TXRDY)
   80910:	4b07      	ldr	r3, [pc, #28]	; (80930 <uart_putchar+0x20>)
   80912:	695b      	ldr	r3, [r3, #20]
   80914:	f013 0f02 	tst.w	r3, #2
   80918:	d008      	beq.n	8092c <uart_putchar+0x1c>
	return 1;

	// Send the character
	UART->UART_THR = c;
   8091a:	4b05      	ldr	r3, [pc, #20]	; (80930 <uart_putchar+0x20>)
   8091c:	61d8      	str	r0, [r3, #28]
	while(!((UART->UART_SR) & UART_SR_TXEMPTY)); // Wait for the character to be sent, can implement ring buffer to remove the wait
   8091e:	4b04      	ldr	r3, [pc, #16]	; (80930 <uart_putchar+0x20>)
   80920:	695b      	ldr	r3, [r3, #20]
   80922:	f413 7f00 	tst.w	r3, #512	; 0x200
   80926:	d0fa      	beq.n	8091e <uart_putchar+0xe>
	return 0;
   80928:	2000      	movs	r0, #0
   8092a:	4770      	bx	lr
	return 1;
   8092c:	2001      	movs	r0, #1
}
   8092e:	4770      	bx	lr
   80930:	400e0800 	.word	0x400e0800

00080934 <UART_Handler>:

void UART_Handler(void)
{
   80934:	b508      	push	{r3, lr}
	uint32_t status = UART->UART_SR;
   80936:	4b15      	ldr	r3, [pc, #84]	; (8098c <UART_Handler+0x58>)
   80938:	695b      	ldr	r3, [r3, #20]
	
	//Reset UART at overflow error and frame error
	if(status & (UART_SR_OVRE | UART_SR_FRAME | UART_SR_PARE))
   8093a:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   8093e:	d003      	beq.n	80948 <UART_Handler+0x14>
	{
		UART->UART_CR = UART_CR_RXEN | UART_CR_TXEN | UART_CR_RSTSTA;
   80940:	f44f 71a8 	mov.w	r1, #336	; 0x150
   80944:	4a11      	ldr	r2, [pc, #68]	; (8098c <UART_Handler+0x58>)
   80946:	6011      	str	r1, [r2, #0]
	}
	
	//Check if message is ready to be received
	if(status & UART_SR_RXRDY)
   80948:	f013 0f01 	tst.w	r3, #1
   8094c:	d012      	beq.n	80974 <UART_Handler+0x40>
	{
		//Check if receive ring buffer is full and 
		if((rx_buffer.tail + 1) % UART_RINGBUFFER_SIZE == rx_buffer.head)
   8094e:	4810      	ldr	r0, [pc, #64]	; (80990 <UART_Handler+0x5c>)
   80950:	7842      	ldrb	r2, [r0, #1]
   80952:	1c53      	adds	r3, r2, #1
   80954:	4259      	negs	r1, r3
   80956:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   8095a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   8095e:	bf58      	it	pl
   80960:	424b      	negpl	r3, r1
   80962:	7801      	ldrb	r1, [r0, #0]
   80964:	428b      	cmp	r3, r1
   80966:	d006      	beq.n	80976 <UART_Handler+0x42>
		{
			printf("ERR: UART RX buffer is full\n\r");
			rx_buffer.data[rx_buffer.tail] = UART->UART_RHR; //Throw away message
			return;
		}
		rx_buffer.data[rx_buffer.tail] = UART->UART_RHR;
   80968:	4908      	ldr	r1, [pc, #32]	; (8098c <UART_Handler+0x58>)
   8096a:	6988      	ldr	r0, [r1, #24]
   8096c:	4908      	ldr	r1, [pc, #32]	; (80990 <UART_Handler+0x5c>)
   8096e:	440a      	add	r2, r1
   80970:	7090      	strb	r0, [r2, #2]
		rx_buffer.tail = (rx_buffer.tail + 1) % UART_RINGBUFFER_SIZE;
   80972:	704b      	strb	r3, [r1, #1]
   80974:	bd08      	pop	{r3, pc}
			printf("ERR: UART RX buffer is full\n\r");
   80976:	4807      	ldr	r0, [pc, #28]	; (80994 <UART_Handler+0x60>)
   80978:	4b07      	ldr	r3, [pc, #28]	; (80998 <UART_Handler+0x64>)
   8097a:	4798      	blx	r3
			rx_buffer.data[rx_buffer.tail] = UART->UART_RHR; //Throw away message
   8097c:	4b04      	ldr	r3, [pc, #16]	; (80990 <UART_Handler+0x5c>)
   8097e:	7859      	ldrb	r1, [r3, #1]
   80980:	4a02      	ldr	r2, [pc, #8]	; (8098c <UART_Handler+0x58>)
   80982:	6992      	ldr	r2, [r2, #24]
   80984:	440b      	add	r3, r1
   80986:	709a      	strb	r2, [r3, #2]
			return;
   80988:	bd08      	pop	{r3, pc}
   8098a:	bf00      	nop
   8098c:	400e0800 	.word	0x400e0800
   80990:	20000450 	.word	0x20000450
   80994:	00080b80 	.word	0x00080b80
   80998:	00080825 	.word	0x00080825

0008099c <__libc_init_array>:
   8099c:	b570      	push	{r4, r5, r6, lr}
   8099e:	4e0f      	ldr	r6, [pc, #60]	; (809dc <__libc_init_array+0x40>)
   809a0:	4d0f      	ldr	r5, [pc, #60]	; (809e0 <__libc_init_array+0x44>)
   809a2:	1b76      	subs	r6, r6, r5
   809a4:	10b6      	asrs	r6, r6, #2
   809a6:	bf18      	it	ne
   809a8:	2400      	movne	r4, #0
   809aa:	d005      	beq.n	809b8 <__libc_init_array+0x1c>
   809ac:	3401      	adds	r4, #1
   809ae:	f855 3b04 	ldr.w	r3, [r5], #4
   809b2:	4798      	blx	r3
   809b4:	42a6      	cmp	r6, r4
   809b6:	d1f9      	bne.n	809ac <__libc_init_array+0x10>
   809b8:	4e0a      	ldr	r6, [pc, #40]	; (809e4 <__libc_init_array+0x48>)
   809ba:	4d0b      	ldr	r5, [pc, #44]	; (809e8 <__libc_init_array+0x4c>)
   809bc:	f000 f8f2 	bl	80ba4 <_init>
   809c0:	1b76      	subs	r6, r6, r5
   809c2:	10b6      	asrs	r6, r6, #2
   809c4:	bf18      	it	ne
   809c6:	2400      	movne	r4, #0
   809c8:	d006      	beq.n	809d8 <__libc_init_array+0x3c>
   809ca:	3401      	adds	r4, #1
   809cc:	f855 3b04 	ldr.w	r3, [r5], #4
   809d0:	4798      	blx	r3
   809d2:	42a6      	cmp	r6, r4
   809d4:	d1f9      	bne.n	809ca <__libc_init_array+0x2e>
   809d6:	bd70      	pop	{r4, r5, r6, pc}
   809d8:	bd70      	pop	{r4, r5, r6, pc}
   809da:	bf00      	nop
   809dc:	00080bb0 	.word	0x00080bb0
   809e0:	00080bb0 	.word	0x00080bb0
   809e4:	00080bb8 	.word	0x00080bb8
   809e8:	00080bb0 	.word	0x00080bb0

000809ec <register_fini>:
   809ec:	4b02      	ldr	r3, [pc, #8]	; (809f8 <register_fini+0xc>)
   809ee:	b113      	cbz	r3, 809f6 <register_fini+0xa>
   809f0:	4802      	ldr	r0, [pc, #8]	; (809fc <register_fini+0x10>)
   809f2:	f000 b805 	b.w	80a00 <atexit>
   809f6:	4770      	bx	lr
   809f8:	00000000 	.word	0x00000000
   809fc:	00080a0d 	.word	0x00080a0d

00080a00 <atexit>:
   80a00:	2300      	movs	r3, #0
   80a02:	4601      	mov	r1, r0
   80a04:	461a      	mov	r2, r3
   80a06:	4618      	mov	r0, r3
   80a08:	f000 b81e 	b.w	80a48 <__register_exitproc>

00080a0c <__libc_fini_array>:
   80a0c:	b538      	push	{r3, r4, r5, lr}
   80a0e:	4c0a      	ldr	r4, [pc, #40]	; (80a38 <__libc_fini_array+0x2c>)
   80a10:	4d0a      	ldr	r5, [pc, #40]	; (80a3c <__libc_fini_array+0x30>)
   80a12:	1b64      	subs	r4, r4, r5
   80a14:	10a4      	asrs	r4, r4, #2
   80a16:	d00a      	beq.n	80a2e <__libc_fini_array+0x22>
   80a18:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   80a1c:	3b01      	subs	r3, #1
   80a1e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   80a22:	3c01      	subs	r4, #1
   80a24:	f855 3904 	ldr.w	r3, [r5], #-4
   80a28:	4798      	blx	r3
   80a2a:	2c00      	cmp	r4, #0
   80a2c:	d1f9      	bne.n	80a22 <__libc_fini_array+0x16>
   80a2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   80a32:	f000 b8c1 	b.w	80bb8 <_fini>
   80a36:	bf00      	nop
   80a38:	00080bc8 	.word	0x00080bc8
   80a3c:	00080bc4 	.word	0x00080bc4

00080a40 <__retarget_lock_acquire_recursive>:
   80a40:	4770      	bx	lr
   80a42:	bf00      	nop

00080a44 <__retarget_lock_release_recursive>:
   80a44:	4770      	bx	lr
   80a46:	bf00      	nop

00080a48 <__register_exitproc>:
   80a48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   80a4c:	4d2c      	ldr	r5, [pc, #176]	; (80b00 <__register_exitproc+0xb8>)
   80a4e:	4606      	mov	r6, r0
   80a50:	6828      	ldr	r0, [r5, #0]
   80a52:	4698      	mov	r8, r3
   80a54:	460f      	mov	r7, r1
   80a56:	4691      	mov	r9, r2
   80a58:	f7ff fff2 	bl	80a40 <__retarget_lock_acquire_recursive>
   80a5c:	4b29      	ldr	r3, [pc, #164]	; (80b04 <__register_exitproc+0xbc>)
   80a5e:	681c      	ldr	r4, [r3, #0]
   80a60:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   80a64:	2b00      	cmp	r3, #0
   80a66:	d03e      	beq.n	80ae6 <__register_exitproc+0x9e>
   80a68:	685a      	ldr	r2, [r3, #4]
   80a6a:	2a1f      	cmp	r2, #31
   80a6c:	dc1c      	bgt.n	80aa8 <__register_exitproc+0x60>
   80a6e:	f102 0e01 	add.w	lr, r2, #1
   80a72:	b176      	cbz	r6, 80a92 <__register_exitproc+0x4a>
   80a74:	2101      	movs	r1, #1
   80a76:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   80a7a:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   80a7e:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   80a82:	4091      	lsls	r1, r2
   80a84:	4308      	orrs	r0, r1
   80a86:	2e02      	cmp	r6, #2
   80a88:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   80a8c:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   80a90:	d023      	beq.n	80ada <__register_exitproc+0x92>
   80a92:	3202      	adds	r2, #2
   80a94:	f8c3 e004 	str.w	lr, [r3, #4]
   80a98:	6828      	ldr	r0, [r5, #0]
   80a9a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   80a9e:	f7ff ffd1 	bl	80a44 <__retarget_lock_release_recursive>
   80aa2:	2000      	movs	r0, #0
   80aa4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   80aa8:	4b17      	ldr	r3, [pc, #92]	; (80b08 <__register_exitproc+0xc0>)
   80aaa:	b30b      	cbz	r3, 80af0 <__register_exitproc+0xa8>
   80aac:	f44f 70c8 	mov.w	r0, #400	; 0x190
   80ab0:	f3af 8000 	nop.w
   80ab4:	4603      	mov	r3, r0
   80ab6:	b1d8      	cbz	r0, 80af0 <__register_exitproc+0xa8>
   80ab8:	2000      	movs	r0, #0
   80aba:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   80abe:	f04f 0e01 	mov.w	lr, #1
   80ac2:	6058      	str	r0, [r3, #4]
   80ac4:	6019      	str	r1, [r3, #0]
   80ac6:	4602      	mov	r2, r0
   80ac8:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   80acc:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   80ad0:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   80ad4:	2e00      	cmp	r6, #0
   80ad6:	d0dc      	beq.n	80a92 <__register_exitproc+0x4a>
   80ad8:	e7cc      	b.n	80a74 <__register_exitproc+0x2c>
   80ada:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   80ade:	4301      	orrs	r1, r0
   80ae0:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   80ae4:	e7d5      	b.n	80a92 <__register_exitproc+0x4a>
   80ae6:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   80aea:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   80aee:	e7bb      	b.n	80a68 <__register_exitproc+0x20>
   80af0:	6828      	ldr	r0, [r5, #0]
   80af2:	f7ff ffa7 	bl	80a44 <__retarget_lock_release_recursive>
   80af6:	f04f 30ff 	mov.w	r0, #4294967295
   80afa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   80afe:	bf00      	nop
   80b00:	20000430 	.word	0x20000430
   80b04:	00080ba0 	.word	0x00080ba0
   80b08:	00000000 	.word	0x00000000
   80b0c:	304e4143 	.word	0x304e4143
   80b10:	73656d20 	.word	0x73656d20
   80b14:	65676173 	.word	0x65676173
   80b18:	72726120 	.word	0x72726120
   80b1c:	64657669 	.word	0x64657669
   80b20:	206e6920 	.word	0x206e6920
   80b24:	2d6e6f6e 	.word	0x2d6e6f6e
   80b28:	64657375 	.word	0x64657375
   80b2c:	69616d20 	.word	0x69616d20
   80b30:	786f626c 	.word	0x786f626c
   80b34:	00000d0a 	.word	0x00000d0a
   80b38:	7373656d 	.word	0x7373656d
   80b3c:	20656761 	.word	0x20656761
   80b40:	203a6469 	.word	0x203a6469
   80b44:	0d0a6425 	.word	0x0d0a6425
   80b48:	00000000 	.word	0x00000000
   80b4c:	7373656d 	.word	0x7373656d
   80b50:	20656761 	.word	0x20656761
   80b54:	61746164 	.word	0x61746164
   80b58:	6e656c20 	.word	0x6e656c20
   80b5c:	3a687467 	.word	0x3a687467
   80b60:	0a642520 	.word	0x0a642520
   80b64:	0000000d 	.word	0x0000000d
   80b68:	00206425 	.word	0x00206425
   80b6c:	203a2069 	.word	0x203a2069
   80b70:	0d0a6425 	.word	0x0d0a6425
   80b74:	00000000 	.word	0x00000000
   80b78:	6c756e28 	.word	0x6c756e28
   80b7c:	0000296c 	.word	0x0000296c
   80b80:	3a525245 	.word	0x3a525245
   80b84:	52415520 	.word	0x52415520
   80b88:	58522054 	.word	0x58522054
   80b8c:	66756220 	.word	0x66756220
   80b90:	20726566 	.word	0x20726566
   80b94:	66207369 	.word	0x66207369
   80b98:	0a6c6c75 	.word	0x0a6c6c75
   80b9c:	0000000d 	.word	0x0000000d

00080ba0 <_global_impure_ptr>:
   80ba0:	20000008                                ... 

00080ba4 <_init>:
   80ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80ba6:	bf00      	nop
   80ba8:	bcf8      	pop	{r3, r4, r5, r6, r7}
   80baa:	bc08      	pop	{r3}
   80bac:	469e      	mov	lr, r3
   80bae:	4770      	bx	lr

00080bb0 <__init_array_start>:
   80bb0:	000809ed 	.word	0x000809ed

00080bb4 <__frame_dummy_init_array_entry>:
   80bb4:	00080119                                ....

00080bb8 <_fini>:
   80bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80bba:	bf00      	nop
   80bbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
   80bbe:	bc08      	pop	{r3}
   80bc0:	469e      	mov	lr, r3
   80bc2:	4770      	bx	lr

00080bc4 <__fini_array_start>:
   80bc4:	000800f5 	.word	0x000800f5
