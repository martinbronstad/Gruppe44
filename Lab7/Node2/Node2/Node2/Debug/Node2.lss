
Node2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b54  00080000  00080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000434  20000000  00080b54  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000084  20000434  00080f88  00020434  2**2
                  ALLOC
  3 .stack        00000400  200004b8  0008100c  00020434  2**0
                  ALLOC
  4 .heap         00000200  200008b8  0008140c  00020434  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020434  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002045d  2**0
                  CONTENTS, READONLY
  7 .debug_info   00005bd6  00000000  00000000  000204b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000f77  00000000  00000000  0002608c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000e21  00000000  00000000  00027003  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000001b0  00000000  00000000  00027e24  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000168  00000000  00000000  00027fd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001317e  00000000  00000000  0002813c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000040aa  00000000  00000000  0003b2ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0005628b  00000000  00000000  0003f364  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000050c  00000000  00000000  000955f0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	b8 08 00 20 95 03 08 00 91 03 08 00 91 03 08 00     ... ............
   80010:	91 03 08 00 91 03 08 00 91 03 08 00 00 00 00 00     ................
	...
   8002c:	91 03 08 00 91 03 08 00 00 00 00 00 91 03 08 00     ................
   8003c:	91 03 08 00 91 03 08 00 91 03 08 00 91 03 08 00     ................
   8004c:	91 03 08 00 91 03 08 00 91 03 08 00 91 03 08 00     ................
   8005c:	91 03 08 00 f9 08 08 00 91 03 08 00 00 00 00 00     ................
   8006c:	91 03 08 00 91 03 08 00 91 03 08 00 91 03 08 00     ................
	...
   80084:	91 03 08 00 91 03 08 00 91 03 08 00 91 03 08 00     ................
   80094:	91 03 08 00 91 03 08 00 91 03 08 00 91 03 08 00     ................
   800a4:	00 00 00 00 91 03 08 00 91 03 08 00 91 03 08 00     ................
   800b4:	91 03 08 00 91 03 08 00 91 03 08 00 91 03 08 00     ................
   800c4:	91 03 08 00 91 03 08 00 91 03 08 00 91 03 08 00     ................
   800d4:	91 03 08 00 91 03 08 00 91 03 08 00 91 03 08 00     ................
   800e4:	91 03 08 00 91 03 08 00 09 03 08 00 91 03 08 00     ................

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20000434 	.word	0x20000434
   80110:	00000000 	.word	0x00000000
   80114:	00080b54 	.word	0x00080b54

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	00080b54 	.word	0x00080b54
   80154:	20000438 	.word	0x20000438
   80158:	00080b54 	.word	0x00080b54
   8015c:	00000000 	.word	0x00000000

00080160 <adc_init>:


void adc_init(){
	
	
	PMC->PMC_PCER1 |= 1 << (ID_ADC - 32); //Allows power to PID 37, ADC
   80160:	4a07      	ldr	r2, [pc, #28]	; (80180 <adc_init+0x20>)
   80162:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
   80166:	f043 0320 	orr.w	r3, r3, #32
   8016a:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

	//PIOA->PIO_PDA |= PIO_PA4X1_AD2; // Disables normal I/O
	
	//ADC->ADC_WPMR |= ADC_WPMR_WPEN >> 1; //Disables write protect???
	
	ADC->ADC_MR = ADC_MR_FREERUN_ON;
   8016e:	4b05      	ldr	r3, [pc, #20]	; (80184 <adc_init+0x24>)
   80170:	2280      	movs	r2, #128	; 0x80
   80172:	605a      	str	r2, [r3, #4]
	// | ADC_MR_SETTLING_AST5 | ADC_MR_ANACH_NONE | ADC_MR_STARTUP_SUT8 | ADC_MR_TRACKTIM(1) | ADC_MR_TRANSFER(1) | ADC_MR_PRESCAL(1);
	
	ADC->ADC_CHER = ADC_CHER_CH2;
   80174:	2204      	movs	r2, #4
   80176:	611a      	str	r2, [r3, #16]

	ADC->ADC_CR = ADC_CR_START;
   80178:	2202      	movs	r2, #2
   8017a:	601a      	str	r2, [r3, #0]
   8017c:	4770      	bx	lr
   8017e:	bf00      	nop
   80180:	400e0600 	.word	0x400e0600
   80184:	400c0000 	.word	0x400c0000

00080188 <adc_read>:
	
	
}

uint16_t adc_read(void){
   80188:	b508      	push	{r3, lr}
	
	uint16_t value = ADC->ADC_CDR[2];
   8018a:	4b03      	ldr	r3, [pc, #12]	; (80198 <adc_read+0x10>)
   8018c:	6d99      	ldr	r1, [r3, #88]	; 0x58
	
	printf("%d \r \n", value);
   8018e:	b289      	uxth	r1, r1
   80190:	4802      	ldr	r0, [pc, #8]	; (8019c <adc_read+0x14>)
   80192:	4b03      	ldr	r3, [pc, #12]	; (801a0 <adc_read+0x18>)
   80194:	4798      	blx	r3
   80196:	bd08      	pop	{r3, pc}
   80198:	400c0000 	.word	0x400c0000
   8019c:	00080ad0 	.word	0x00080ad0
   801a0:	00080791 	.word	0x00080791

000801a4 <can_init>:
   801a4:	b4f0      	push	{r4, r5, r6, r7}
   801a6:	1856      	adds	r6, r2, r1
   801a8:	2e08      	cmp	r6, #8
   801aa:	bfd4      	ite	le
   801ac:	2300      	movle	r3, #0
   801ae:	2301      	movgt	r3, #1
   801b0:	2908      	cmp	r1, #8
   801b2:	bf98      	it	ls
   801b4:	2a08      	cmpls	r2, #8
   801b6:	d858      	bhi.n	8026a <can_init+0xc6>
   801b8:	460c      	mov	r4, r1
   801ba:	2b00      	cmp	r3, #0
   801bc:	d155      	bne.n	8026a <can_init+0xc6>
   801be:	4a2c      	ldr	r2, [pc, #176]	; (80270 <can_init+0xcc>)
   801c0:	6813      	ldr	r3, [r2, #0]
   801c2:	f023 0301 	bic.w	r3, r3, #1
   801c6:	6013      	str	r3, [r2, #0]
   801c8:	6913      	ldr	r3, [r2, #16]
   801ca:	4b2a      	ldr	r3, [pc, #168]	; (80274 <can_init+0xd0>)
   801cc:	f44f 7540 	mov.w	r5, #768	; 0x300
   801d0:	645d      	str	r5, [r3, #68]	; 0x44
   801d2:	6f1d      	ldr	r5, [r3, #112]	; 0x70
   801d4:	f025 0503 	bic.w	r5, r5, #3
   801d8:	671d      	str	r5, [r3, #112]	; 0x70
   801da:	2503      	movs	r5, #3
   801dc:	605d      	str	r5, [r3, #4]
   801de:	665d      	str	r5, [r3, #100]	; 0x64
   801e0:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
   801e4:	4d24      	ldr	r5, [pc, #144]	; (80278 <can_init+0xd4>)
   801e6:	f8c3 510c 	str.w	r5, [r3, #268]	; 0x10c
   801ea:	f8d3 5100 	ldr.w	r5, [r3, #256]	; 0x100
   801ee:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
   801f2:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
   801f6:	6150      	str	r0, [r2, #20]
   801f8:	2000      	movs	r0, #0
   801fa:	e015      	b.n	80228 <can_init+0x84>
   801fc:	4b1c      	ldr	r3, [pc, #112]	; (80270 <can_init+0xcc>)
   801fe:	f101 0210 	add.w	r2, r1, #16
   80202:	0152      	lsls	r2, r2, #5
   80204:	189d      	adds	r5, r3, r2
   80206:	4f1d      	ldr	r7, [pc, #116]	; (8027c <can_init+0xd8>)
   80208:	606f      	str	r7, [r5, #4]
   8020a:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
   8020e:	509d      	str	r5, [r3, r2]
   80210:	eb03 1341 	add.w	r3, r3, r1, lsl #5
   80214:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
   80218:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
   8021c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
   80220:	2301      	movs	r3, #1
   80222:	408b      	lsls	r3, r1
   80224:	4318      	orrs	r0, r3
   80226:	3101      	adds	r1, #1
   80228:	42b1      	cmp	r1, r6
   8022a:	dde7      	ble.n	801fc <can_init+0x58>
   8022c:	2300      	movs	r3, #0
   8022e:	e00d      	b.n	8024c <can_init+0xa8>
   80230:	490f      	ldr	r1, [pc, #60]	; (80270 <can_init+0xcc>)
   80232:	eb01 1243 	add.w	r2, r1, r3, lsl #5
   80236:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
   8023a:	f8c2 5208 	str.w	r5, [r2, #520]	; 0x208
   8023e:	f103 0210 	add.w	r2, r3, #16
   80242:	0152      	lsls	r2, r2, #5
   80244:	f04f 7540 	mov.w	r5, #50331648	; 0x3000000
   80248:	508d      	str	r5, [r1, r2]
   8024a:	3301      	adds	r3, #1
   8024c:	42a3      	cmp	r3, r4
   8024e:	dbef      	blt.n	80230 <can_init+0x8c>
   80250:	4b07      	ldr	r3, [pc, #28]	; (80270 <can_init+0xcc>)
   80252:	6058      	str	r0, [r3, #4]
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   80254:	f44f 6100 	mov.w	r1, #2048	; 0x800
   80258:	4a09      	ldr	r2, [pc, #36]	; (80280 <can_init+0xdc>)
   8025a:	6051      	str	r1, [r2, #4]
   8025c:	681a      	ldr	r2, [r3, #0]
   8025e:	f042 0201 	orr.w	r2, r2, #1
   80262:	601a      	str	r2, [r3, #0]
   80264:	2000      	movs	r0, #0
   80266:	bcf0      	pop	{r4, r5, r6, r7}
   80268:	4770      	bx	lr
   8026a:	2001      	movs	r0, #1
   8026c:	e7fb      	b.n	80266 <can_init+0xc2>
   8026e:	bf00      	nop
   80270:	400b4000 	.word	0x400b4000
   80274:	400e0e00 	.word	0x400e0e00
   80278:	1000102b 	.word	0x1000102b
   8027c:	1f83ffff 	.word	0x1f83ffff
   80280:	e000e100 	.word	0xe000e100

00080284 <can_receive>:
   80284:	014b      	lsls	r3, r1, #5
   80286:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   8028a:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   8028e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
   80292:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   80296:	d033      	beq.n	80300 <can_receive+0x7c>
   80298:	b470      	push	{r4, r5, r6}
   8029a:	014b      	lsls	r3, r1, #5
   8029c:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   802a0:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   802a4:	f8d3 4214 	ldr.w	r4, [r3, #532]	; 0x214
   802a8:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
   802ac:	f8d3 5208 	ldr.w	r5, [r3, #520]	; 0x208
   802b0:	f3c5 4587 	ubfx	r5, r5, #18, #8
   802b4:	7005      	strb	r5, [r0, #0]
   802b6:	f8d3 5210 	ldr.w	r5, [r3, #528]	; 0x210
   802ba:	f3c5 4503 	ubfx	r5, r5, #16, #4
   802be:	7045      	strb	r5, [r0, #1]
   802c0:	2300      	movs	r3, #0
   802c2:	e003      	b.n	802cc <can_receive+0x48>
   802c4:	18c6      	adds	r6, r0, r3
   802c6:	70b2      	strb	r2, [r6, #2]
   802c8:	0a12      	lsrs	r2, r2, #8
   802ca:	3301      	adds	r3, #1
   802cc:	42ab      	cmp	r3, r5
   802ce:	da05      	bge.n	802dc <can_receive+0x58>
   802d0:	2b03      	cmp	r3, #3
   802d2:	dcf7      	bgt.n	802c4 <can_receive+0x40>
   802d4:	18c6      	adds	r6, r0, r3
   802d6:	70b4      	strb	r4, [r6, #2]
   802d8:	0a24      	lsrs	r4, r4, #8
   802da:	e7f6      	b.n	802ca <can_receive+0x46>
   802dc:	4b09      	ldr	r3, [pc, #36]	; (80304 <can_receive+0x80>)
   802de:	f101 0210 	add.w	r2, r1, #16
   802e2:	0152      	lsls	r2, r2, #5
   802e4:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
   802e8:	5098      	str	r0, [r3, r2]
   802ea:	eb03 1141 	add.w	r1, r3, r1, lsl #5
   802ee:	f8d1 321c 	ldr.w	r3, [r1, #540]	; 0x21c
   802f2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   802f6:	f8c1 321c 	str.w	r3, [r1, #540]	; 0x21c
   802fa:	2000      	movs	r0, #0
   802fc:	bc70      	pop	{r4, r5, r6}
   802fe:	4770      	bx	lr
   80300:	2001      	movs	r0, #1
   80302:	4770      	bx	lr
   80304:	400b4000 	.word	0x400b4000

00080308 <CAN0_Handler>:
 * \param void
 *
 * \retval 
 */
void CAN0_Handler( void )
{
   80308:	b510      	push	{r4, lr}
   8030a:	b084      	sub	sp, #16
	//if(DEBUG_INTERRUPT)printf("CAN0 interrupt\n\r");
	char can_sr = CAN0->CAN_SR; 
   8030c:	4b1a      	ldr	r3, [pc, #104]	; (80378 <CAN0_Handler+0x70>)
   8030e:	691c      	ldr	r4, [r3, #16]
	
	//RX interrupt
	if(can_sr & (CAN_SR_MB1 | CAN_SR_MB2) )//Only mailbox 1 and 2 specified for receiving
   80310:	f014 0f06 	tst.w	r4, #6
   80314:	d01d      	beq.n	80352 <CAN0_Handler+0x4a>
	{
		CAN_MESSAGE message;
		if(can_sr & CAN_SR_MB1)  //Mailbox 1 event
   80316:	f014 0f02 	tst.w	r4, #2
   8031a:	d108      	bne.n	8032e <CAN0_Handler+0x26>
		{
			can_receive(&message, 1);

		}
		else if(can_sr & CAN_SR_MB2) //Mailbox 2 event
   8031c:	f014 0f04 	tst.w	r4, #4
   80320:	d00a      	beq.n	80338 <CAN0_Handler+0x30>
		
		{
			can_receive(&message, 2);
   80322:	2102      	movs	r1, #2
   80324:	a801      	add	r0, sp, #4
   80326:	4b15      	ldr	r3, [pc, #84]	; (8037c <CAN0_Handler+0x74>)
   80328:	4798      	blx	r3
		if(DEBUG_INTERRUPT)printf("message id: %d\n\r", message.id);
		if(DEBUG_INTERRUPT)printf("message data length: %d\n\r", message.data_length);
		
	
		
		for (int i = 0; i < message.data_length; i++)
   8032a:	2300      	movs	r3, #0
   8032c:	e009      	b.n	80342 <CAN0_Handler+0x3a>
			can_receive(&message, 1);
   8032e:	2101      	movs	r1, #1
   80330:	a801      	add	r0, sp, #4
   80332:	4b12      	ldr	r3, [pc, #72]	; (8037c <CAN0_Handler+0x74>)
   80334:	4798      	blx	r3
   80336:	e7f8      	b.n	8032a <CAN0_Handler+0x22>
			printf("CAN0 message arrived in non-used mailbox\n\r");
   80338:	4811      	ldr	r0, [pc, #68]	; (80380 <CAN0_Handler+0x78>)
   8033a:	4b12      	ldr	r3, [pc, #72]	; (80384 <CAN0_Handler+0x7c>)
   8033c:	4798      	blx	r3
   8033e:	e7f4      	b.n	8032a <CAN0_Handler+0x22>
		for (int i = 0; i < message.data_length; i++)
   80340:	3301      	adds	r3, #1
   80342:	f89d 2005 	ldrb.w	r2, [sp, #5]
   80346:	4293      	cmp	r3, r2
   80348:	dbfa      	blt.n	80340 <CAN0_Handler+0x38>
		{
			if(DEBUG_INTERRUPT)printf("%d ", message.data[i]);
		}
		if (message.id == 25){
   8034a:	f89d 3004 	ldrb.w	r3, [sp, #4]
   8034e:	2b19      	cmp	r3, #25
   80350:	d00c      	beq.n	8036c <CAN0_Handler+0x64>
		}
		//can_send(&message, 0); //REPLIES WITH THE SAME MESSAGE BACK
		if(DEBUG_INTERRUPT)printf("\n\r");
	}
	
	if(can_sr & CAN_SR_MB0)
   80352:	f014 0f01 	tst.w	r4, #1
   80356:	d002      	beq.n	8035e <CAN0_Handler+0x56>
	{
		//if(DEBUG_INTERRUPT) printf("CAN0 MB0 ready to send \n\r");
		
	//Disable interrupt
		CAN0->CAN_IDR = CAN_IER_MB0;
   80358:	2201      	movs	r2, #1
   8035a:	4b07      	ldr	r3, [pc, #28]	; (80378 <CAN0_Handler+0x70>)
   8035c:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   8035e:	f44f 6200 	mov.w	r2, #2048	; 0x800
   80362:	4b09      	ldr	r3, [pc, #36]	; (80388 <CAN0_Handler+0x80>)
   80364:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184

	}
	
	NVIC_ClearPendingIRQ(ID_CAN0);
	//sei();*/
}
   80368:	b004      	add	sp, #16
   8036a:	bd10      	pop	{r4, pc}
			pwm_set_servo(message.data[1]);
   8036c:	f89d 0007 	ldrb.w	r0, [sp, #7]
   80370:	4b06      	ldr	r3, [pc, #24]	; (8038c <CAN0_Handler+0x84>)
   80372:	4798      	blx	r3
   80374:	e7ed      	b.n	80352 <CAN0_Handler+0x4a>
   80376:	bf00      	nop
   80378:	400b4000 	.word	0x400b4000
   8037c:	00080285 	.word	0x00080285
   80380:	00080ad8 	.word	0x00080ad8
   80384:	00080791 	.word	0x00080791
   80388:	e000e100 	.word	0xe000e100
   8038c:	00080859 	.word	0x00080859

00080390 <Dummy_Handler>:
   80390:	e7fe      	b.n	80390 <Dummy_Handler>
	...

00080394 <Reset_Handler>:
   80394:	b508      	push	{r3, lr}
   80396:	4b11      	ldr	r3, [pc, #68]	; (803dc <Reset_Handler+0x48>)
   80398:	4a11      	ldr	r2, [pc, #68]	; (803e0 <Reset_Handler+0x4c>)
   8039a:	429a      	cmp	r2, r3
   8039c:	d009      	beq.n	803b2 <Reset_Handler+0x1e>
   8039e:	4b0f      	ldr	r3, [pc, #60]	; (803dc <Reset_Handler+0x48>)
   803a0:	4a0f      	ldr	r2, [pc, #60]	; (803e0 <Reset_Handler+0x4c>)
   803a2:	e003      	b.n	803ac <Reset_Handler+0x18>
   803a4:	6811      	ldr	r1, [r2, #0]
   803a6:	6019      	str	r1, [r3, #0]
   803a8:	3304      	adds	r3, #4
   803aa:	3204      	adds	r2, #4
   803ac:	490d      	ldr	r1, [pc, #52]	; (803e4 <Reset_Handler+0x50>)
   803ae:	428b      	cmp	r3, r1
   803b0:	d3f8      	bcc.n	803a4 <Reset_Handler+0x10>
   803b2:	4b0d      	ldr	r3, [pc, #52]	; (803e8 <Reset_Handler+0x54>)
   803b4:	e002      	b.n	803bc <Reset_Handler+0x28>
   803b6:	2200      	movs	r2, #0
   803b8:	601a      	str	r2, [r3, #0]
   803ba:	3304      	adds	r3, #4
   803bc:	4a0b      	ldr	r2, [pc, #44]	; (803ec <Reset_Handler+0x58>)
   803be:	4293      	cmp	r3, r2
   803c0:	d3f9      	bcc.n	803b6 <Reset_Handler+0x22>
   803c2:	4b0b      	ldr	r3, [pc, #44]	; (803f0 <Reset_Handler+0x5c>)
   803c4:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   803c8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   803cc:	4a09      	ldr	r2, [pc, #36]	; (803f4 <Reset_Handler+0x60>)
   803ce:	6093      	str	r3, [r2, #8]
   803d0:	4b09      	ldr	r3, [pc, #36]	; (803f8 <Reset_Handler+0x64>)
   803d2:	4798      	blx	r3
   803d4:	4b09      	ldr	r3, [pc, #36]	; (803fc <Reset_Handler+0x68>)
   803d6:	4798      	blx	r3
   803d8:	e7fe      	b.n	803d8 <Reset_Handler+0x44>
   803da:	bf00      	nop
   803dc:	20000000 	.word	0x20000000
   803e0:	00080b54 	.word	0x00080b54
   803e4:	20000434 	.word	0x20000434
   803e8:	20000434 	.word	0x20000434
   803ec:	200004b8 	.word	0x200004b8
   803f0:	00080000 	.word	0x00080000
   803f4:	e000ed00 	.word	0xe000ed00
   803f8:	00080961 	.word	0x00080961
   803fc:	000804a5 	.word	0x000804a5

00080400 <SystemInit>:
   80400:	f44f 6380 	mov.w	r3, #1024	; 0x400
   80404:	4a20      	ldr	r2, [pc, #128]	; (80488 <SystemInit+0x88>)
   80406:	6013      	str	r3, [r2, #0]
   80408:	f502 7200 	add.w	r2, r2, #512	; 0x200
   8040c:	6013      	str	r3, [r2, #0]
   8040e:	4b1f      	ldr	r3, [pc, #124]	; (8048c <SystemInit+0x8c>)
   80410:	6a1b      	ldr	r3, [r3, #32]
   80412:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80416:	d107      	bne.n	80428 <SystemInit+0x28>
   80418:	4a1d      	ldr	r2, [pc, #116]	; (80490 <SystemInit+0x90>)
   8041a:	4b1c      	ldr	r3, [pc, #112]	; (8048c <SystemInit+0x8c>)
   8041c:	621a      	str	r2, [r3, #32]
   8041e:	4b1b      	ldr	r3, [pc, #108]	; (8048c <SystemInit+0x8c>)
   80420:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80422:	f013 0f01 	tst.w	r3, #1
   80426:	d0fa      	beq.n	8041e <SystemInit+0x1e>
   80428:	4a1a      	ldr	r2, [pc, #104]	; (80494 <SystemInit+0x94>)
   8042a:	4b18      	ldr	r3, [pc, #96]	; (8048c <SystemInit+0x8c>)
   8042c:	621a      	str	r2, [r3, #32]
   8042e:	4b17      	ldr	r3, [pc, #92]	; (8048c <SystemInit+0x8c>)
   80430:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80432:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   80436:	d0fa      	beq.n	8042e <SystemInit+0x2e>
   80438:	4a14      	ldr	r2, [pc, #80]	; (8048c <SystemInit+0x8c>)
   8043a:	6b13      	ldr	r3, [r2, #48]	; 0x30
   8043c:	f023 0303 	bic.w	r3, r3, #3
   80440:	f043 0301 	orr.w	r3, r3, #1
   80444:	6313      	str	r3, [r2, #48]	; 0x30
   80446:	4b11      	ldr	r3, [pc, #68]	; (8048c <SystemInit+0x8c>)
   80448:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8044a:	f013 0f08 	tst.w	r3, #8
   8044e:	d0fa      	beq.n	80446 <SystemInit+0x46>
   80450:	4a11      	ldr	r2, [pc, #68]	; (80498 <SystemInit+0x98>)
   80452:	4b0e      	ldr	r3, [pc, #56]	; (8048c <SystemInit+0x8c>)
   80454:	629a      	str	r2, [r3, #40]	; 0x28
   80456:	4b0d      	ldr	r3, [pc, #52]	; (8048c <SystemInit+0x8c>)
   80458:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8045a:	f013 0f02 	tst.w	r3, #2
   8045e:	d0fa      	beq.n	80456 <SystemInit+0x56>
   80460:	2211      	movs	r2, #17
   80462:	4b0a      	ldr	r3, [pc, #40]	; (8048c <SystemInit+0x8c>)
   80464:	631a      	str	r2, [r3, #48]	; 0x30
   80466:	4b09      	ldr	r3, [pc, #36]	; (8048c <SystemInit+0x8c>)
   80468:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8046a:	f013 0f08 	tst.w	r3, #8
   8046e:	d0fa      	beq.n	80466 <SystemInit+0x66>
   80470:	2212      	movs	r2, #18
   80472:	4b06      	ldr	r3, [pc, #24]	; (8048c <SystemInit+0x8c>)
   80474:	631a      	str	r2, [r3, #48]	; 0x30
   80476:	4b05      	ldr	r3, [pc, #20]	; (8048c <SystemInit+0x8c>)
   80478:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8047a:	f013 0f08 	tst.w	r3, #8
   8047e:	d0fa      	beq.n	80476 <SystemInit+0x76>
   80480:	4a06      	ldr	r2, [pc, #24]	; (8049c <SystemInit+0x9c>)
   80482:	4b07      	ldr	r3, [pc, #28]	; (804a0 <SystemInit+0xa0>)
   80484:	601a      	str	r2, [r3, #0]
   80486:	4770      	bx	lr
   80488:	400e0a00 	.word	0x400e0a00
   8048c:	400e0600 	.word	0x400e0600
   80490:	00370809 	.word	0x00370809
   80494:	01370809 	.word	0x01370809
   80498:	200d3f01 	.word	0x200d3f01
   8049c:	0501bd00 	.word	0x0501bd00
   804a0:	20000000 	.word	0x20000000

000804a4 <main>:




int main(void)
{
   804a4:	b508      	push	{r3, lr}
    /* Initialize the SAM system */
    SystemInit();
   804a6:	4b0e      	ldr	r3, [pc, #56]	; (804e0 <main+0x3c>)
   804a8:	4798      	blx	r3
	
	
	
	
	configure_uart(); //STARTS THE UART
   804aa:	4b0e      	ldr	r3, [pc, #56]	; (804e4 <main+0x40>)
   804ac:	4798      	blx	r3
	
	can_init(0x1292177,1,2);
   804ae:	2202      	movs	r2, #2
   804b0:	2101      	movs	r1, #1
   804b2:	480d      	ldr	r0, [pc, #52]	; (804e8 <main+0x44>)
   804b4:	4b0d      	ldr	r3, [pc, #52]	; (804ec <main+0x48>)
   804b6:	4798      	blx	r3
	
	pwm_init();
   804b8:	4b0d      	ldr	r3, [pc, #52]	; (804f0 <main+0x4c>)
   804ba:	4798      	blx	r3
	
	adc_init();
   804bc:	4b0d      	ldr	r3, [pc, #52]	; (804f4 <main+0x50>)
   804be:	4798      	blx	r3
	
	WDT->WDT_MR = WDT_MR_WDDIS; //DISABLES THE WATCHDOG
   804c0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   804c4:	4b0c      	ldr	r3, [pc, #48]	; (804f8 <main+0x54>)
   804c6:	605a      	str	r2, [r3, #4]
	
	PIOA->PIO_PER = PIO_PA19 | PIO_PA20; // PIN I/O SELECT
   804c8:	f5a3 6345 	sub.w	r3, r3, #3152	; 0xc50
   804cc:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
   804d0:	601a      	str	r2, [r3, #0]
	PIOA->PIO_OER = PIO_PA19 | PIO_PA20; // PIN OUTPUT SELECT
   804d2:	611a      	str	r2, [r3, #16]
	
	PIOA->PIO_SODR = PIO_PA19; //PIN SET OUTPUT DATA REGISTER
   804d4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   804d8:	631a      	str	r2, [r3, #48]	; 0x30
	//PIOA->PIO_SODR = PIO_PA20;
	int i = 1;
	
	while (1) 
    {
		adc_read();
   804da:	4b08      	ldr	r3, [pc, #32]	; (804fc <main+0x58>)
   804dc:	4798      	blx	r3
   804de:	e7fc      	b.n	804da <main+0x36>
   804e0:	00080401 	.word	0x00080401
   804e4:	0008086d 	.word	0x0008086d
   804e8:	01292177 	.word	0x01292177
   804ec:	000801a5 	.word	0x000801a5
   804f0:	000807b5 	.word	0x000807b5
   804f4:	00080161 	.word	0x00080161
   804f8:	400e1a50 	.word	0x400e1a50
   804fc:	00080189 	.word	0x00080189

00080500 <printchar>:
#include "uart.h"


//insert function to print to here
static void printchar(char **str, int c)
{
   80500:	b508      	push	{r3, lr}
	(void) uart_putchar(c);  //Send characters to uart
   80502:	b2c8      	uxtb	r0, r1
   80504:	4b01      	ldr	r3, [pc, #4]	; (8050c <printchar+0xc>)
   80506:	4798      	blx	r3
   80508:	bd08      	pop	{r3, pc}
   8050a:	bf00      	nop
   8050c:	000808d5 	.word	0x000808d5

00080510 <prints>:

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
   80510:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80514:	4607      	mov	r7, r0
   80516:	460e      	mov	r6, r1
	register int pc = 0, padchar = ' ';

	if (width > 0) {
   80518:	1e15      	subs	r5, r2, #0
   8051a:	dd02      	ble.n	80522 <prints+0x12>
   8051c:	460a      	mov	r2, r1
   8051e:	2100      	movs	r1, #0
   80520:	e004      	b.n	8052c <prints+0x1c>
	register int pc = 0, padchar = ' ';
   80522:	f04f 0820 	mov.w	r8, #32
   80526:	e00e      	b.n	80546 <prints+0x36>
		register int len = 0;
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
   80528:	3101      	adds	r1, #1
   8052a:	3201      	adds	r2, #1
   8052c:	7810      	ldrb	r0, [r2, #0]
   8052e:	2800      	cmp	r0, #0
   80530:	d1fa      	bne.n	80528 <prints+0x18>
		if (len >= width) width = 0;
   80532:	42a9      	cmp	r1, r5
   80534:	da01      	bge.n	8053a <prints+0x2a>
		else width -= len;
   80536:	1a6d      	subs	r5, r5, r1
   80538:	e000      	b.n	8053c <prints+0x2c>
		if (len >= width) width = 0;
   8053a:	2500      	movs	r5, #0
		if (pad & PAD_ZERO) padchar = '0';
   8053c:	f013 0f02 	tst.w	r3, #2
   80540:	d106      	bne.n	80550 <prints+0x40>
	register int pc = 0, padchar = ' ';
   80542:	f04f 0820 	mov.w	r8, #32
	}
	if (!(pad & PAD_RIGHT)) {
   80546:	f013 0401 	ands.w	r4, r3, #1
   8054a:	d00a      	beq.n	80562 <prints+0x52>
	register int pc = 0, padchar = ' ';
   8054c:	2400      	movs	r4, #0
   8054e:	e010      	b.n	80572 <prints+0x62>
		if (pad & PAD_ZERO) padchar = '0';
   80550:	f04f 0830 	mov.w	r8, #48	; 0x30
   80554:	e7f7      	b.n	80546 <prints+0x36>
		for ( ; width > 0; --width) {
			printchar (out, padchar);
   80556:	4641      	mov	r1, r8
   80558:	4638      	mov	r0, r7
   8055a:	4b0d      	ldr	r3, [pc, #52]	; (80590 <prints+0x80>)
   8055c:	4798      	blx	r3
			++pc;
   8055e:	3401      	adds	r4, #1
		for ( ; width > 0; --width) {
   80560:	3d01      	subs	r5, #1
   80562:	2d00      	cmp	r5, #0
   80564:	dcf7      	bgt.n	80556 <prints+0x46>
   80566:	e004      	b.n	80572 <prints+0x62>
		}
	}
	for ( ; *string ; ++string) {
		printchar (out, *string);
   80568:	4638      	mov	r0, r7
   8056a:	4b09      	ldr	r3, [pc, #36]	; (80590 <prints+0x80>)
   8056c:	4798      	blx	r3
		++pc;
   8056e:	3401      	adds	r4, #1
	for ( ; *string ; ++string) {
   80570:	3601      	adds	r6, #1
   80572:	7831      	ldrb	r1, [r6, #0]
   80574:	2900      	cmp	r1, #0
   80576:	d1f7      	bne.n	80568 <prints+0x58>
   80578:	e005      	b.n	80586 <prints+0x76>
	}
	for ( ; width > 0; --width) {
		printchar (out, padchar);
   8057a:	4641      	mov	r1, r8
   8057c:	4638      	mov	r0, r7
   8057e:	4b04      	ldr	r3, [pc, #16]	; (80590 <prints+0x80>)
   80580:	4798      	blx	r3
		++pc;
   80582:	3401      	adds	r4, #1
	for ( ; width > 0; --width) {
   80584:	3d01      	subs	r5, #1
   80586:	2d00      	cmp	r5, #0
   80588:	dcf7      	bgt.n	8057a <prints+0x6a>
	}

	return pc;
}
   8058a:	4620      	mov	r0, r4
   8058c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80590:	00080501 	.word	0x00080501

00080594 <printi>:

/* the following should be enough for 32 bit int */
#define PRINT_BUF_LEN 12

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
   80594:	b5f0      	push	{r4, r5, r6, r7, lr}
   80596:	b085      	sub	sp, #20
   80598:	4607      	mov	r7, r0
   8059a:	980c      	ldr	r0, [sp, #48]	; 0x30
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
	register unsigned int u = i;

	if (i == 0) {
   8059c:	b151      	cbz	r1, 805b4 <printi+0x20>
   8059e:	461e      	mov	r6, r3
   805a0:	460c      	mov	r4, r1
		print_buf[0] = '0';
		print_buf[1] = '\0';
		return prints (out, print_buf, width, pad);
	}

	if (sg && b == 10 && i < 0) {
   805a2:	b113      	cbz	r3, 805aa <printi+0x16>
   805a4:	2a0a      	cmp	r2, #10
   805a6:	d012      	beq.n	805ce <printi+0x3a>
	register int t, neg = 0, pc = 0;
   805a8:	2600      	movs	r6, #0
		neg = 1;
		u = -i;
	}

	s = print_buf + PRINT_BUF_LEN-1;
	*s = '\0';
   805aa:	ad04      	add	r5, sp, #16
   805ac:	2300      	movs	r3, #0
   805ae:	f805 3d01 	strb.w	r3, [r5, #-1]!

	while (u) {
   805b2:	e018      	b.n	805e6 <printi+0x52>
		print_buf[0] = '0';
   805b4:	2330      	movs	r3, #48	; 0x30
   805b6:	f88d 3004 	strb.w	r3, [sp, #4]
		print_buf[1] = '\0';
   805ba:	2300      	movs	r3, #0
   805bc:	f88d 3005 	strb.w	r3, [sp, #5]
		return prints (out, print_buf, width, pad);
   805c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   805c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   805c4:	a901      	add	r1, sp, #4
   805c6:	4638      	mov	r0, r7
   805c8:	4c1b      	ldr	r4, [pc, #108]	; (80638 <printi+0xa4>)
   805ca:	47a0      	blx	r4
   805cc:	e029      	b.n	80622 <printi+0x8e>
	if (sg && b == 10 && i < 0) {
   805ce:	2900      	cmp	r1, #0
   805d0:	db01      	blt.n	805d6 <printi+0x42>
	register int t, neg = 0, pc = 0;
   805d2:	2600      	movs	r6, #0
   805d4:	e7e9      	b.n	805aa <printi+0x16>
		u = -i;
   805d6:	424c      	negs	r4, r1
		neg = 1;
   805d8:	2601      	movs	r6, #1
   805da:	e7e6      	b.n	805aa <printi+0x16>
		t = u % b;
		if( t >= 10 )
			t += letbase - '0' - 10;
		*--s = t + '0';
   805dc:	3330      	adds	r3, #48	; 0x30
   805de:	f805 3d01 	strb.w	r3, [r5, #-1]!
		u /= b;
   805e2:	fbb4 f4f2 	udiv	r4, r4, r2
	while (u) {
   805e6:	b14c      	cbz	r4, 805fc <printi+0x68>
		t = u % b;
   805e8:	fbb4 f3f2 	udiv	r3, r4, r2
   805ec:	fb02 4313 	mls	r3, r2, r3, r4
		if( t >= 10 )
   805f0:	2b09      	cmp	r3, #9
   805f2:	ddf3      	ble.n	805dc <printi+0x48>
			t += letbase - '0' - 10;
   805f4:	f1a0 013a 	sub.w	r1, r0, #58	; 0x3a
   805f8:	440b      	add	r3, r1
   805fa:	e7ef      	b.n	805dc <printi+0x48>
	}

	if (neg) {
   805fc:	b156      	cbz	r6, 80614 <printi+0x80>
		if( width && (pad & PAD_ZERO) ) {
   805fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   80600:	b11b      	cbz	r3, 8060a <printi+0x76>
   80602:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   80604:	f013 0f02 	tst.w	r3, #2
   80608:	d10d      	bne.n	80626 <printi+0x92>
			printchar (out, '-');
			++pc;
			--width;
		}
		else {
			*--s = '-';
   8060a:	232d      	movs	r3, #45	; 0x2d
   8060c:	f805 3c01 	strb.w	r3, [r5, #-1]
   80610:	3d01      	subs	r5, #1
	register int t, neg = 0, pc = 0;
   80612:	2600      	movs	r6, #0
		}
	}

	return pc + prints (out, s, width, pad);
   80614:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   80616:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   80618:	4629      	mov	r1, r5
   8061a:	4638      	mov	r0, r7
   8061c:	4c06      	ldr	r4, [pc, #24]	; (80638 <printi+0xa4>)
   8061e:	47a0      	blx	r4
   80620:	4430      	add	r0, r6
}
   80622:	b005      	add	sp, #20
   80624:	bdf0      	pop	{r4, r5, r6, r7, pc}
			printchar (out, '-');
   80626:	212d      	movs	r1, #45	; 0x2d
   80628:	4638      	mov	r0, r7
   8062a:	4b04      	ldr	r3, [pc, #16]	; (8063c <printi+0xa8>)
   8062c:	4798      	blx	r3
			--width;
   8062e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   80630:	3b01      	subs	r3, #1
   80632:	930a      	str	r3, [sp, #40]	; 0x28
   80634:	e7ee      	b.n	80614 <printi+0x80>
   80636:	bf00      	nop
   80638:	00080511 	.word	0x00080511
   8063c:	00080501 	.word	0x00080501

00080640 <print>:

static int print( char **out, const char *format, va_list args )
{
   80640:	b5f0      	push	{r4, r5, r6, r7, lr}
   80642:	b089      	sub	sp, #36	; 0x24
   80644:	4606      	mov	r6, r0
   80646:	460c      	mov	r4, r1
   80648:	9205      	str	r2, [sp, #20]
	register int width, pad;
	register int pc = 0;
   8064a:	2500      	movs	r5, #0
	char scr[2];

	for (; *format != 0; ++format) {
   8064c:	e081      	b.n	80752 <print+0x112>
			++format;
			width = pad = 0;
			if (*format == '\0') break;
			if (*format == '%') goto out;
			if (*format == '-') {
				++format;
   8064e:	1ca2      	adds	r2, r4, #2
				pad = PAD_RIGHT;
   80650:	2301      	movs	r3, #1
   80652:	e08b      	b.n	8076c <print+0x12c>
			}
			while (*format == '0') {
				++format;
   80654:	3401      	adds	r4, #1
				pad |= PAD_ZERO;
   80656:	f043 0302 	orr.w	r3, r3, #2
			while (*format == '0') {
   8065a:	7822      	ldrb	r2, [r4, #0]
   8065c:	2a30      	cmp	r2, #48	; 0x30
   8065e:	d0f9      	beq.n	80654 <print+0x14>
   80660:	2200      	movs	r2, #0
   80662:	e006      	b.n	80672 <print+0x32>
			}
			for ( ; *format >= '0' && *format <= '9'; ++format) {
				width *= 10;
   80664:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   80668:	0050      	lsls	r0, r2, #1
				width += *format - '0';
   8066a:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   8066e:	4402      	add	r2, r0
			for ( ; *format >= '0' && *format <= '9'; ++format) {
   80670:	3401      	adds	r4, #1
   80672:	7821      	ldrb	r1, [r4, #0]
   80674:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
   80678:	b2c0      	uxtb	r0, r0
   8067a:	2809      	cmp	r0, #9
   8067c:	d9f2      	bls.n	80664 <print+0x24>
			}
			if( *format == 's' ) {
   8067e:	2973      	cmp	r1, #115	; 0x73
   80680:	d018      	beq.n	806b4 <print+0x74>
				register char *s = (char *)va_arg( args, int );
				pc += prints (out, s?s:"(null)", width, pad);
				continue;
			}
			if( *format == 'd' ) {
   80682:	2964      	cmp	r1, #100	; 0x64
   80684:	d022      	beq.n	806cc <print+0x8c>
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
				continue;
			}
			if( *format == 'x' ) {
   80686:	2978      	cmp	r1, #120	; 0x78
   80688:	d02f      	beq.n	806ea <print+0xaa>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
				continue;
			}
			if( *format == 'X' ) {
   8068a:	2958      	cmp	r1, #88	; 0x58
   8068c:	d03c      	beq.n	80708 <print+0xc8>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
				continue;
			}
			if( *format == 'u' ) {
   8068e:	2975      	cmp	r1, #117	; 0x75
   80690:	d049      	beq.n	80726 <print+0xe6>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
				continue;
			}
			if( *format == 'c' ) {
   80692:	2963      	cmp	r1, #99	; 0x63
   80694:	d15c      	bne.n	80750 <print+0x110>
				/* char are converted to int then pushed on the stack */
				scr[0] = (char)va_arg( args, int );
   80696:	9905      	ldr	r1, [sp, #20]
   80698:	1d08      	adds	r0, r1, #4
   8069a:	9005      	str	r0, [sp, #20]
   8069c:	7809      	ldrb	r1, [r1, #0]
   8069e:	f88d 101c 	strb.w	r1, [sp, #28]
				scr[1] = '\0';
   806a2:	2100      	movs	r1, #0
   806a4:	f88d 101d 	strb.w	r1, [sp, #29]
				pc += prints (out, scr, width, pad);
   806a8:	a907      	add	r1, sp, #28
   806aa:	4630      	mov	r0, r6
   806ac:	4f34      	ldr	r7, [pc, #208]	; (80780 <print+0x140>)
   806ae:	47b8      	blx	r7
   806b0:	4405      	add	r5, r0
				continue;
   806b2:	e04d      	b.n	80750 <print+0x110>
				register char *s = (char *)va_arg( args, int );
   806b4:	9905      	ldr	r1, [sp, #20]
   806b6:	1d08      	adds	r0, r1, #4
   806b8:	9005      	str	r0, [sp, #20]
   806ba:	6809      	ldr	r1, [r1, #0]
				pc += prints (out, s?s:"(null)", width, pad);
   806bc:	b121      	cbz	r1, 806c8 <print+0x88>
   806be:	4630      	mov	r0, r6
   806c0:	4f2f      	ldr	r7, [pc, #188]	; (80780 <print+0x140>)
   806c2:	47b8      	blx	r7
   806c4:	4405      	add	r5, r0
				continue;
   806c6:	e043      	b.n	80750 <print+0x110>
				pc += prints (out, s?s:"(null)", width, pad);
   806c8:	492e      	ldr	r1, [pc, #184]	; (80784 <print+0x144>)
   806ca:	e7f8      	b.n	806be <print+0x7e>
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
   806cc:	9905      	ldr	r1, [sp, #20]
   806ce:	1d08      	adds	r0, r1, #4
   806d0:	9005      	str	r0, [sp, #20]
   806d2:	6809      	ldr	r1, [r1, #0]
   806d4:	2061      	movs	r0, #97	; 0x61
   806d6:	9002      	str	r0, [sp, #8]
   806d8:	9301      	str	r3, [sp, #4]
   806da:	9200      	str	r2, [sp, #0]
   806dc:	2301      	movs	r3, #1
   806de:	220a      	movs	r2, #10
   806e0:	4630      	mov	r0, r6
   806e2:	4f29      	ldr	r7, [pc, #164]	; (80788 <print+0x148>)
   806e4:	47b8      	blx	r7
   806e6:	4405      	add	r5, r0
				continue;
   806e8:	e032      	b.n	80750 <print+0x110>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
   806ea:	9905      	ldr	r1, [sp, #20]
   806ec:	1d08      	adds	r0, r1, #4
   806ee:	9005      	str	r0, [sp, #20]
   806f0:	6809      	ldr	r1, [r1, #0]
   806f2:	2061      	movs	r0, #97	; 0x61
   806f4:	9002      	str	r0, [sp, #8]
   806f6:	9301      	str	r3, [sp, #4]
   806f8:	9200      	str	r2, [sp, #0]
   806fa:	2300      	movs	r3, #0
   806fc:	2210      	movs	r2, #16
   806fe:	4630      	mov	r0, r6
   80700:	4f21      	ldr	r7, [pc, #132]	; (80788 <print+0x148>)
   80702:	47b8      	blx	r7
   80704:	4405      	add	r5, r0
				continue;
   80706:	e023      	b.n	80750 <print+0x110>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
   80708:	9905      	ldr	r1, [sp, #20]
   8070a:	1d08      	adds	r0, r1, #4
   8070c:	9005      	str	r0, [sp, #20]
   8070e:	6809      	ldr	r1, [r1, #0]
   80710:	2041      	movs	r0, #65	; 0x41
   80712:	9002      	str	r0, [sp, #8]
   80714:	9301      	str	r3, [sp, #4]
   80716:	9200      	str	r2, [sp, #0]
   80718:	2300      	movs	r3, #0
   8071a:	2210      	movs	r2, #16
   8071c:	4630      	mov	r0, r6
   8071e:	4f1a      	ldr	r7, [pc, #104]	; (80788 <print+0x148>)
   80720:	47b8      	blx	r7
   80722:	4405      	add	r5, r0
				continue;
   80724:	e014      	b.n	80750 <print+0x110>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
   80726:	9905      	ldr	r1, [sp, #20]
   80728:	1d08      	adds	r0, r1, #4
   8072a:	9005      	str	r0, [sp, #20]
   8072c:	6809      	ldr	r1, [r1, #0]
   8072e:	2061      	movs	r0, #97	; 0x61
   80730:	9002      	str	r0, [sp, #8]
   80732:	9301      	str	r3, [sp, #4]
   80734:	9200      	str	r2, [sp, #0]
   80736:	2300      	movs	r3, #0
   80738:	220a      	movs	r2, #10
   8073a:	4630      	mov	r0, r6
   8073c:	4f12      	ldr	r7, [pc, #72]	; (80788 <print+0x148>)
   8073e:	47b8      	blx	r7
   80740:	4405      	add	r5, r0
				continue;
   80742:	e005      	b.n	80750 <print+0x110>
			++format;
   80744:	4614      	mov	r4, r2
			}
		}
		else {
		out:
			printchar (out, *format);
   80746:	7821      	ldrb	r1, [r4, #0]
   80748:	4630      	mov	r0, r6
   8074a:	4b10      	ldr	r3, [pc, #64]	; (8078c <print+0x14c>)
   8074c:	4798      	blx	r3
			++pc;
   8074e:	3501      	adds	r5, #1
	for (; *format != 0; ++format) {
   80750:	3401      	adds	r4, #1
   80752:	7823      	ldrb	r3, [r4, #0]
   80754:	b163      	cbz	r3, 80770 <print+0x130>
		if (*format == '%') {
   80756:	2b25      	cmp	r3, #37	; 0x25
   80758:	d1f5      	bne.n	80746 <print+0x106>
			++format;
   8075a:	1c62      	adds	r2, r4, #1
			if (*format == '\0') break;
   8075c:	7863      	ldrb	r3, [r4, #1]
   8075e:	b13b      	cbz	r3, 80770 <print+0x130>
			if (*format == '%') goto out;
   80760:	2b25      	cmp	r3, #37	; 0x25
   80762:	d0ef      	beq.n	80744 <print+0x104>
			if (*format == '-') {
   80764:	2b2d      	cmp	r3, #45	; 0x2d
   80766:	f43f af72 	beq.w	8064e <print+0xe>
			width = pad = 0;
   8076a:	2300      	movs	r3, #0
   8076c:	4614      	mov	r4, r2
   8076e:	e774      	b.n	8065a <print+0x1a>
		}
	}
	if (out) **out = '\0';
   80770:	b116      	cbz	r6, 80778 <print+0x138>
   80772:	6833      	ldr	r3, [r6, #0]
   80774:	2200      	movs	r2, #0
   80776:	701a      	strb	r2, [r3, #0]
	va_end( args );
	return pc;
}
   80778:	4628      	mov	r0, r5
   8077a:	b009      	add	sp, #36	; 0x24
   8077c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8077e:	bf00      	nop
   80780:	00080511 	.word	0x00080511
   80784:	00080b04 	.word	0x00080b04
   80788:	00080595 	.word	0x00080595
   8078c:	00080501 	.word	0x00080501

00080790 <printf>:

int printf(const char *format, ...)
{
   80790:	b40f      	push	{r0, r1, r2, r3}
   80792:	b500      	push	{lr}
   80794:	b083      	sub	sp, #12
   80796:	aa04      	add	r2, sp, #16
   80798:	f852 1b04 	ldr.w	r1, [r2], #4
        va_list args;
        
        va_start( args, format );
   8079c:	9201      	str	r2, [sp, #4]
        return print( 0, format, args );
   8079e:	2000      	movs	r0, #0
   807a0:	4b03      	ldr	r3, [pc, #12]	; (807b0 <printf+0x20>)
   807a2:	4798      	blx	r3
}
   807a4:	b003      	add	sp, #12
   807a6:	f85d eb04 	ldr.w	lr, [sp], #4
   807aa:	b004      	add	sp, #16
   807ac:	4770      	bx	lr
   807ae:	bf00      	nop
   807b0:	00080641 	.word	0x00080641

000807b4 <pwm_init>:


void pwm_init(void) {
	
	
	PMC->PMC_PCER1 |= 1 << (ID_PWM - 32); //Allows power to PID36, PWM;
   807b4:	4a18      	ldr	r2, [pc, #96]	; (80818 <pwm_init+0x64>)
   807b6:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
   807ba:	f043 0310 	orr.w	r3, r3, #16
   807be:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

	PIOC->PIO_PDR |= PIO_PC18B_PWMH6 | PIO_PC19B_PWMH5; //Disables the PIO, so that peripheral can use it. Not sure if this is the correct implementation
   807c2:	4b16      	ldr	r3, [pc, #88]	; (8081c <pwm_init+0x68>)
   807c4:	685a      	ldr	r2, [r3, #4]
   807c6:	f442 2240 	orr.w	r2, r2, #786432	; 0xc0000
   807ca:	605a      	str	r2, [r3, #4]
	PIOC->PIO_ABSR |= PIO_PC18B_PWMH6 | PIO_PC19B_PWMH5; //Selects peripheral 2.
   807cc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   807ce:	f442 2240 	orr.w	r2, r2, #786432	; 0xc0000
   807d2:	671a      	str	r2, [r3, #112]	; 0x70
	
	PWM->PWM_WPCR |= 0xFC; // SELECTS GROUP 0-6; WPRGx
   807d4:	4b12      	ldr	r3, [pc, #72]	; (80820 <pwm_init+0x6c>)
   807d6:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
   807da:	f042 02fc 	orr.w	r2, r2, #252	; 0xfc
   807de:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PWM->PWM_WPCR |= PWM_WPCR_WPCMD(0); //Unlock user interface
   807e2:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
   807e6:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	
	PWM->PWM_CLK = PWM_CLK_DIVA(1) | PWM_CLK_DIVB(1) | PWM_CLK_PREA(7) | PWM_CLK_PREB(7); //TODO: check if this is correct, MCK/128
   807ea:	4a0e      	ldr	r2, [pc, #56]	; (80824 <pwm_init+0x70>)
   807ec:	601a      	str	r2, [r3, #0]
	
	PWM->PWM_DIS = PWM_DIS_CHID5 | PWM_DIS_CHID6;
   807ee:	2160      	movs	r1, #96	; 0x60
   807f0:	6099      	str	r1, [r3, #8]
	
	REG_PWM_CMR5 = PWM_CMR_CPRE_CLKA; //CLOCK A, LEFT ALIGNED
   807f2:	200b      	movs	r0, #11
   807f4:	4a0c      	ldr	r2, [pc, #48]	; (80828 <pwm_init+0x74>)
   807f6:	6010      	str	r0, [r2, #0]
	REG_PWM_CMR6 = PWM_CMR_CPRE_CLKB; //CLOCK B, LEFT ALIGNED
   807f8:	200c      	movs	r0, #12
   807fa:	3220      	adds	r2, #32
   807fc:	6010      	str	r0, [r2, #0]
	
	REG_PWM_CPRD5 = 0x3345; //SETS THE PERIOD TO 20MS, 58MHZ*20ms = X * CPRD
   807fe:	f243 3245 	movw	r2, #13125	; 0x3345
   80802:	480a      	ldr	r0, [pc, #40]	; (8082c <pwm_init+0x78>)
   80804:	6002      	str	r2, [r0, #0]
	REG_PWM_CPRD6 = 0x3345;
   80806:	3020      	adds	r0, #32
   80808:	6002      	str	r2, [r0, #0]
	
	REG_PWM_CDTY5 = 0x3345; // 
   8080a:	3828      	subs	r0, #40	; 0x28
   8080c:	6002      	str	r2, [r0, #0]
	REG_PWM_CDTY6 = 0x3345; //used to actually change pwm, 0x3345 = 0 V, 0x00 = 5V
   8080e:	3020      	adds	r0, #32
   80810:	6002      	str	r2, [r0, #0]
	

	PWM->PWM_ENA = PWM_ENA_CHID5 | PWM_ENA_CHID6; //ENABLE
   80812:	6059      	str	r1, [r3, #4]
   80814:	4770      	bx	lr
   80816:	bf00      	nop
   80818:	400e0600 	.word	0x400e0600
   8081c:	400e1200 	.word	0x400e1200
   80820:	40094000 	.word	0x40094000
   80824:	07010701 	.word	0x07010701
   80828:	400942a0 	.word	0x400942a0
   8082c:	400942ac 	.word	0x400942ac

00080830 <pwm_set>:
	
}

void pwm_set(int value) {
	// SETS THE PWM VALUE, CAPPED TO 0,9ms - 2.1 ms
	if (value > 1378){
   80830:	f240 5362 	movw	r3, #1378	; 0x562
   80834:	4298      	cmp	r0, r3
   80836:	dd00      	ble.n	8083a <pwm_set+0xa>
		value = 1378;
   80838:	4618      	mov	r0, r3
		
	}
	if (value < 591){
   8083a:	f240 234e 	movw	r3, #590	; 0x24e
   8083e:	4298      	cmp	r0, r3
   80840:	dc01      	bgt.n	80846 <pwm_set+0x16>
		value = 591;
   80842:	f240 204f 	movw	r0, #591	; 0x24f
	}
	
	REG_PWM_CDTY5 = (0x3345 - value);	
   80846:	f5c0 504d 	rsb	r0, r0, #13120	; 0x3340
   8084a:	3005      	adds	r0, #5
   8084c:	4b01      	ldr	r3, [pc, #4]	; (80854 <pwm_set+0x24>)
   8084e:	6018      	str	r0, [r3, #0]
   80850:	4770      	bx	lr
   80852:	bf00      	nop
   80854:	400942a4 	.word	0x400942a4

00080858 <pwm_set_servo>:
}

void pwm_set_servo(int value){
   80858:	b508      	push	{r3, lr}
	//SETS THE PWM VALUE BASED OF JOYSTICK, GETS 0-200 in, ~591-1378 out
	
	value = value*4 + 591;
   8085a:	0080      	lsls	r0, r0, #2
	pwm_set(value);
   8085c:	f200 204f 	addw	r0, r0, #591	; 0x24f
   80860:	4b01      	ldr	r3, [pc, #4]	; (80868 <pwm_set_servo+0x10>)
   80862:	4798      	blx	r3
   80864:	bd08      	pop	{r3, pc}
   80866:	bf00      	nop
   80868:	00080831 	.word	0x00080831

0008086c <configure_uart>:
	uint32_t ul_sr;

/*
Initialize UART ring buffer as empty
*/
rx_buffer.head=0;
   8086c:	4b16      	ldr	r3, [pc, #88]	; (808c8 <configure_uart+0x5c>)
   8086e:	2200      	movs	r2, #0
   80870:	701a      	strb	r2, [r3, #0]
rx_buffer.tail=0;
   80872:	705a      	strb	r2, [r3, #1]
/*
Initialize UART communication
*/
	// Pin configuration
	// Disable interrupts on Uart receive (URXD) and transmit (UTXD) pins
	PIOA->PIO_IDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   80874:	4b15      	ldr	r3, [pc, #84]	; (808cc <configure_uart+0x60>)
   80876:	f44f 7140 	mov.w	r1, #768	; 0x300
   8087a:	6459      	str	r1, [r3, #68]	; 0x44

	// Disable the Parallel IO (PIO) of the URXD and UTXD pins so that the peripheral controller can use them
	PIOA->PIO_PDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   8087c:	6059      	str	r1, [r3, #4]

	// Read current peripheral AB select register and set the UTXD and URXD pins to 0 (UART is connected as peripheral A)
	ul_sr = PIOA->PIO_ABSR;
   8087e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
	PIOA->PIO_ABSR &= ~(PIO_PA8A_URXD | PIO_PA9A_UTXD) & ul_sr;
   80880:	6f18      	ldr	r0, [r3, #112]	; 0x70
   80882:	4002      	ands	r2, r0
   80884:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   80888:	671a      	str	r2, [r3, #112]	; 0x70

	// Enable pull up resistor on URXD and UTXD pin
	PIOA->PIO_PUER = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   8088a:	6659      	str	r1, [r3, #100]	; 0x64

	// Uart configuration
	
	// Enable the peripheral UART controller in Power Management Controller (PMC)
	PMC->PMC_PCER0 = 1 << ID_UART;
   8088c:	f44f 7280 	mov.w	r2, #256	; 0x100
   80890:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
   80894:	611a      	str	r2, [r3, #16]

	// Reset and disable receiver and transmitter
	UART->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX | UART_CR_RXDIS | UART_CR_TXDIS;
   80896:	f503 7300 	add.w	r3, r3, #512	; 0x200
   8089a:	21ac      	movs	r1, #172	; 0xac
   8089c:	6019      	str	r1, [r3, #0]

	// Set the baudrate
	UART->UART_BRGR = 547; // MCK / 16 * x = BaudRate (write x into UART_BRGR)  MCK = 84 Mhz
   8089e:	f240 2123 	movw	r1, #547	; 0x223
   808a2:	6219      	str	r1, [r3, #32]

	// No parity bits
	UART->UART_MR = UART_MR_PAR_NO | UART_MR_CHMODE_NORMAL;	
   808a4:	f44f 6100 	mov.w	r1, #2048	; 0x800
   808a8:	6059      	str	r1, [r3, #4]

	// Disable PDC channel
	UART->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   808aa:	f240 2102 	movw	r1, #514	; 0x202
   808ae:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120

	// Configure interrupts on receive ready and errors
	UART->UART_IDR = 0xFFFFFFFF;
   808b2:	f04f 31ff 	mov.w	r1, #4294967295
   808b6:	60d9      	str	r1, [r3, #12]
	UART->UART_IER = UART_IER_RXRDY | UART_IER_OVRE | UART_IER_FRAME | UART_IER_PARE;
   808b8:	21e1      	movs	r1, #225	; 0xe1
   808ba:	6099      	str	r1, [r3, #8]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   808bc:	4904      	ldr	r1, [pc, #16]	; (808d0 <configure_uart+0x64>)
   808be:	600a      	str	r2, [r1, #0]

	// Enable UART interrupt in the Nested Vectored Interrupt Controller(NVIC)
	NVIC_EnableIRQ((IRQn_Type) ID_UART);

	// Enable UART receiver and transmitter
	UART->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   808c0:	2250      	movs	r2, #80	; 0x50
   808c2:	601a      	str	r2, [r3, #0]
   808c4:	4770      	bx	lr
   808c6:	bf00      	nop
   808c8:	20000450 	.word	0x20000450
   808cc:	400e0e00 	.word	0x400e0e00
   808d0:	e000e100 	.word	0xe000e100

000808d4 <uart_putchar>:
 * \retval Success(0) or failure(1).
 */
int uart_putchar(const uint8_t c)
{
	// Check if the transmitter is ready
	if((UART->UART_SR & UART_SR_TXRDY) != UART_SR_TXRDY)
   808d4:	4b07      	ldr	r3, [pc, #28]	; (808f4 <uart_putchar+0x20>)
   808d6:	695b      	ldr	r3, [r3, #20]
   808d8:	f013 0f02 	tst.w	r3, #2
   808dc:	d008      	beq.n	808f0 <uart_putchar+0x1c>
	return 1;

	// Send the character
	UART->UART_THR = c;
   808de:	4b05      	ldr	r3, [pc, #20]	; (808f4 <uart_putchar+0x20>)
   808e0:	61d8      	str	r0, [r3, #28]
	while(!((UART->UART_SR) & UART_SR_TXEMPTY)); // Wait for the character to be sent, can implement ring buffer to remove the wait
   808e2:	4b04      	ldr	r3, [pc, #16]	; (808f4 <uart_putchar+0x20>)
   808e4:	695b      	ldr	r3, [r3, #20]
   808e6:	f413 7f00 	tst.w	r3, #512	; 0x200
   808ea:	d0fa      	beq.n	808e2 <uart_putchar+0xe>
	return 0;
   808ec:	2000      	movs	r0, #0
   808ee:	4770      	bx	lr
	return 1;
   808f0:	2001      	movs	r0, #1
}
   808f2:	4770      	bx	lr
   808f4:	400e0800 	.word	0x400e0800

000808f8 <UART_Handler>:

void UART_Handler(void)
{
   808f8:	b508      	push	{r3, lr}
	uint32_t status = UART->UART_SR;
   808fa:	4b15      	ldr	r3, [pc, #84]	; (80950 <UART_Handler+0x58>)
   808fc:	695b      	ldr	r3, [r3, #20]
	
	//Reset UART at overflow error and frame error
	if(status & (UART_SR_OVRE | UART_SR_FRAME | UART_SR_PARE))
   808fe:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   80902:	d003      	beq.n	8090c <UART_Handler+0x14>
	{
		UART->UART_CR = UART_CR_RXEN | UART_CR_TXEN | UART_CR_RSTSTA;
   80904:	f44f 71a8 	mov.w	r1, #336	; 0x150
   80908:	4a11      	ldr	r2, [pc, #68]	; (80950 <UART_Handler+0x58>)
   8090a:	6011      	str	r1, [r2, #0]
	}
	
	//Check if message is ready to be received
	if(status & UART_SR_RXRDY)
   8090c:	f013 0f01 	tst.w	r3, #1
   80910:	d012      	beq.n	80938 <UART_Handler+0x40>
	{
		//Check if receive ring buffer is full and 
		if((rx_buffer.tail + 1) % UART_RINGBUFFER_SIZE == rx_buffer.head)
   80912:	4810      	ldr	r0, [pc, #64]	; (80954 <UART_Handler+0x5c>)
   80914:	7842      	ldrb	r2, [r0, #1]
   80916:	1c53      	adds	r3, r2, #1
   80918:	4259      	negs	r1, r3
   8091a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   8091e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   80922:	bf58      	it	pl
   80924:	424b      	negpl	r3, r1
   80926:	7801      	ldrb	r1, [r0, #0]
   80928:	428b      	cmp	r3, r1
   8092a:	d006      	beq.n	8093a <UART_Handler+0x42>
		{
			printf("ERR: UART RX buffer is full\n\r");
			rx_buffer.data[rx_buffer.tail] = UART->UART_RHR; //Throw away message
			return;
		}
		rx_buffer.data[rx_buffer.tail] = UART->UART_RHR;
   8092c:	4908      	ldr	r1, [pc, #32]	; (80950 <UART_Handler+0x58>)
   8092e:	6988      	ldr	r0, [r1, #24]
   80930:	4908      	ldr	r1, [pc, #32]	; (80954 <UART_Handler+0x5c>)
   80932:	440a      	add	r2, r1
   80934:	7090      	strb	r0, [r2, #2]
		rx_buffer.tail = (rx_buffer.tail + 1) % UART_RINGBUFFER_SIZE;
   80936:	704b      	strb	r3, [r1, #1]
   80938:	bd08      	pop	{r3, pc}
			printf("ERR: UART RX buffer is full\n\r");
   8093a:	4807      	ldr	r0, [pc, #28]	; (80958 <UART_Handler+0x60>)
   8093c:	4b07      	ldr	r3, [pc, #28]	; (8095c <UART_Handler+0x64>)
   8093e:	4798      	blx	r3
			rx_buffer.data[rx_buffer.tail] = UART->UART_RHR; //Throw away message
   80940:	4b04      	ldr	r3, [pc, #16]	; (80954 <UART_Handler+0x5c>)
   80942:	7859      	ldrb	r1, [r3, #1]
   80944:	4a02      	ldr	r2, [pc, #8]	; (80950 <UART_Handler+0x58>)
   80946:	6992      	ldr	r2, [r2, #24]
   80948:	440b      	add	r3, r1
   8094a:	709a      	strb	r2, [r3, #2]
			return;
   8094c:	bd08      	pop	{r3, pc}
   8094e:	bf00      	nop
   80950:	400e0800 	.word	0x400e0800
   80954:	20000450 	.word	0x20000450
   80958:	00080b0c 	.word	0x00080b0c
   8095c:	00080791 	.word	0x00080791

00080960 <__libc_init_array>:
   80960:	b570      	push	{r4, r5, r6, lr}
   80962:	4e0f      	ldr	r6, [pc, #60]	; (809a0 <__libc_init_array+0x40>)
   80964:	4d0f      	ldr	r5, [pc, #60]	; (809a4 <__libc_init_array+0x44>)
   80966:	1b76      	subs	r6, r6, r5
   80968:	10b6      	asrs	r6, r6, #2
   8096a:	bf18      	it	ne
   8096c:	2400      	movne	r4, #0
   8096e:	d005      	beq.n	8097c <__libc_init_array+0x1c>
   80970:	3401      	adds	r4, #1
   80972:	f855 3b04 	ldr.w	r3, [r5], #4
   80976:	4798      	blx	r3
   80978:	42a6      	cmp	r6, r4
   8097a:	d1f9      	bne.n	80970 <__libc_init_array+0x10>
   8097c:	4e0a      	ldr	r6, [pc, #40]	; (809a8 <__libc_init_array+0x48>)
   8097e:	4d0b      	ldr	r5, [pc, #44]	; (809ac <__libc_init_array+0x4c>)
   80980:	f000 f8d6 	bl	80b30 <_init>
   80984:	1b76      	subs	r6, r6, r5
   80986:	10b6      	asrs	r6, r6, #2
   80988:	bf18      	it	ne
   8098a:	2400      	movne	r4, #0
   8098c:	d006      	beq.n	8099c <__libc_init_array+0x3c>
   8098e:	3401      	adds	r4, #1
   80990:	f855 3b04 	ldr.w	r3, [r5], #4
   80994:	4798      	blx	r3
   80996:	42a6      	cmp	r6, r4
   80998:	d1f9      	bne.n	8098e <__libc_init_array+0x2e>
   8099a:	bd70      	pop	{r4, r5, r6, pc}
   8099c:	bd70      	pop	{r4, r5, r6, pc}
   8099e:	bf00      	nop
   809a0:	00080b3c 	.word	0x00080b3c
   809a4:	00080b3c 	.word	0x00080b3c
   809a8:	00080b44 	.word	0x00080b44
   809ac:	00080b3c 	.word	0x00080b3c

000809b0 <register_fini>:
   809b0:	4b02      	ldr	r3, [pc, #8]	; (809bc <register_fini+0xc>)
   809b2:	b113      	cbz	r3, 809ba <register_fini+0xa>
   809b4:	4802      	ldr	r0, [pc, #8]	; (809c0 <register_fini+0x10>)
   809b6:	f000 b805 	b.w	809c4 <atexit>
   809ba:	4770      	bx	lr
   809bc:	00000000 	.word	0x00000000
   809c0:	000809d1 	.word	0x000809d1

000809c4 <atexit>:
   809c4:	2300      	movs	r3, #0
   809c6:	4601      	mov	r1, r0
   809c8:	461a      	mov	r2, r3
   809ca:	4618      	mov	r0, r3
   809cc:	f000 b81e 	b.w	80a0c <__register_exitproc>

000809d0 <__libc_fini_array>:
   809d0:	b538      	push	{r3, r4, r5, lr}
   809d2:	4c0a      	ldr	r4, [pc, #40]	; (809fc <__libc_fini_array+0x2c>)
   809d4:	4d0a      	ldr	r5, [pc, #40]	; (80a00 <__libc_fini_array+0x30>)
   809d6:	1b64      	subs	r4, r4, r5
   809d8:	10a4      	asrs	r4, r4, #2
   809da:	d00a      	beq.n	809f2 <__libc_fini_array+0x22>
   809dc:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   809e0:	3b01      	subs	r3, #1
   809e2:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   809e6:	3c01      	subs	r4, #1
   809e8:	f855 3904 	ldr.w	r3, [r5], #-4
   809ec:	4798      	blx	r3
   809ee:	2c00      	cmp	r4, #0
   809f0:	d1f9      	bne.n	809e6 <__libc_fini_array+0x16>
   809f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   809f6:	f000 b8a5 	b.w	80b44 <_fini>
   809fa:	bf00      	nop
   809fc:	00080b54 	.word	0x00080b54
   80a00:	00080b50 	.word	0x00080b50

00080a04 <__retarget_lock_acquire_recursive>:
   80a04:	4770      	bx	lr
   80a06:	bf00      	nop

00080a08 <__retarget_lock_release_recursive>:
   80a08:	4770      	bx	lr
   80a0a:	bf00      	nop

00080a0c <__register_exitproc>:
   80a0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   80a10:	4d2c      	ldr	r5, [pc, #176]	; (80ac4 <__register_exitproc+0xb8>)
   80a12:	4606      	mov	r6, r0
   80a14:	6828      	ldr	r0, [r5, #0]
   80a16:	4698      	mov	r8, r3
   80a18:	460f      	mov	r7, r1
   80a1a:	4691      	mov	r9, r2
   80a1c:	f7ff fff2 	bl	80a04 <__retarget_lock_acquire_recursive>
   80a20:	4b29      	ldr	r3, [pc, #164]	; (80ac8 <__register_exitproc+0xbc>)
   80a22:	681c      	ldr	r4, [r3, #0]
   80a24:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   80a28:	2b00      	cmp	r3, #0
   80a2a:	d03e      	beq.n	80aaa <__register_exitproc+0x9e>
   80a2c:	685a      	ldr	r2, [r3, #4]
   80a2e:	2a1f      	cmp	r2, #31
   80a30:	dc1c      	bgt.n	80a6c <__register_exitproc+0x60>
   80a32:	f102 0e01 	add.w	lr, r2, #1
   80a36:	b176      	cbz	r6, 80a56 <__register_exitproc+0x4a>
   80a38:	2101      	movs	r1, #1
   80a3a:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   80a3e:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   80a42:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   80a46:	4091      	lsls	r1, r2
   80a48:	4308      	orrs	r0, r1
   80a4a:	2e02      	cmp	r6, #2
   80a4c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   80a50:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   80a54:	d023      	beq.n	80a9e <__register_exitproc+0x92>
   80a56:	3202      	adds	r2, #2
   80a58:	f8c3 e004 	str.w	lr, [r3, #4]
   80a5c:	6828      	ldr	r0, [r5, #0]
   80a5e:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   80a62:	f7ff ffd1 	bl	80a08 <__retarget_lock_release_recursive>
   80a66:	2000      	movs	r0, #0
   80a68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   80a6c:	4b17      	ldr	r3, [pc, #92]	; (80acc <__register_exitproc+0xc0>)
   80a6e:	b30b      	cbz	r3, 80ab4 <__register_exitproc+0xa8>
   80a70:	f44f 70c8 	mov.w	r0, #400	; 0x190
   80a74:	f3af 8000 	nop.w
   80a78:	4603      	mov	r3, r0
   80a7a:	b1d8      	cbz	r0, 80ab4 <__register_exitproc+0xa8>
   80a7c:	2000      	movs	r0, #0
   80a7e:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   80a82:	f04f 0e01 	mov.w	lr, #1
   80a86:	6058      	str	r0, [r3, #4]
   80a88:	6019      	str	r1, [r3, #0]
   80a8a:	4602      	mov	r2, r0
   80a8c:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   80a90:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   80a94:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   80a98:	2e00      	cmp	r6, #0
   80a9a:	d0dc      	beq.n	80a56 <__register_exitproc+0x4a>
   80a9c:	e7cc      	b.n	80a38 <__register_exitproc+0x2c>
   80a9e:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   80aa2:	4301      	orrs	r1, r0
   80aa4:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   80aa8:	e7d5      	b.n	80a56 <__register_exitproc+0x4a>
   80aaa:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   80aae:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   80ab2:	e7bb      	b.n	80a2c <__register_exitproc+0x20>
   80ab4:	6828      	ldr	r0, [r5, #0]
   80ab6:	f7ff ffa7 	bl	80a08 <__retarget_lock_release_recursive>
   80aba:	f04f 30ff 	mov.w	r0, #4294967295
   80abe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   80ac2:	bf00      	nop
   80ac4:	20000430 	.word	0x20000430
   80ac8:	00080b2c 	.word	0x00080b2c
   80acc:	00000000 	.word	0x00000000
   80ad0:	0d206425 	.word	0x0d206425
   80ad4:	00000a20 	.word	0x00000a20
   80ad8:	304e4143 	.word	0x304e4143
   80adc:	73656d20 	.word	0x73656d20
   80ae0:	65676173 	.word	0x65676173
   80ae4:	72726120 	.word	0x72726120
   80ae8:	64657669 	.word	0x64657669
   80aec:	206e6920 	.word	0x206e6920
   80af0:	2d6e6f6e 	.word	0x2d6e6f6e
   80af4:	64657375 	.word	0x64657375
   80af8:	69616d20 	.word	0x69616d20
   80afc:	786f626c 	.word	0x786f626c
   80b00:	00000d0a 	.word	0x00000d0a
   80b04:	6c756e28 	.word	0x6c756e28
   80b08:	0000296c 	.word	0x0000296c
   80b0c:	3a525245 	.word	0x3a525245
   80b10:	52415520 	.word	0x52415520
   80b14:	58522054 	.word	0x58522054
   80b18:	66756220 	.word	0x66756220
   80b1c:	20726566 	.word	0x20726566
   80b20:	66207369 	.word	0x66207369
   80b24:	0a6c6c75 	.word	0x0a6c6c75
   80b28:	0000000d 	.word	0x0000000d

00080b2c <_global_impure_ptr>:
   80b2c:	20000008                                ... 

00080b30 <_init>:
   80b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80b32:	bf00      	nop
   80b34:	bcf8      	pop	{r3, r4, r5, r6, r7}
   80b36:	bc08      	pop	{r3}
   80b38:	469e      	mov	lr, r3
   80b3a:	4770      	bx	lr

00080b3c <__init_array_start>:
   80b3c:	000809b1 	.word	0x000809b1

00080b40 <__frame_dummy_init_array_entry>:
   80b40:	00080119                                ....

00080b44 <_fini>:
   80b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80b46:	bf00      	nop
   80b48:	bcf8      	pop	{r3, r4, r5, r6, r7}
   80b4a:	bc08      	pop	{r3}
   80b4c:	469e      	mov	lr, r3
   80b4e:	4770      	bx	lr

00080b50 <__fini_array_start>:
   80b50:	000800f5 	.word	0x000800f5
