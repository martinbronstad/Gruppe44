
Gruppe44.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000d6  00800100  0000115e  000011f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000115e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000097  008001d6  008001d6  000012c8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000012c8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001324  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c8  00000000  00000000  00001360  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000238b  00000000  00000000  00001528  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e53  00000000  00000000  000038b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000113a  00000000  00000000  00004706  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000049c  00000000  00000000  00005840  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000089d  00000000  00000000  00005cdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000dd0  00000000  00000000  00006579  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000168  00000000  00000000  00007349  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
       4:	0c 94 d2 01 	jmp	0x3a4	; 0x3a4 <__vector_1>
       8:	0c 94 f8 01 	jmp	0x3f0	; 0x3f0 <__vector_2>
       c:	0c 94 1e 02 	jmp	0x43c	; 0x43c <__vector_3>
      10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
      70:	11 24       	eor	r1, r1
      72:	1f be       	out	0x3f, r1	; 63
      74:	cf ef       	ldi	r28, 0xFF	; 255
      76:	d4 e0       	ldi	r29, 0x04	; 4
      78:	de bf       	out	0x3e, r29	; 62
      7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
      7c:	11 e0       	ldi	r17, 0x01	; 1
      7e:	a0 e0       	ldi	r26, 0x00	; 0
      80:	b1 e0       	ldi	r27, 0x01	; 1
      82:	ee e5       	ldi	r30, 0x5E	; 94
      84:	f1 e1       	ldi	r31, 0x11	; 17
      86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
      88:	05 90       	lpm	r0, Z+
      8a:	0d 92       	st	X+, r0
      8c:	a6 3d       	cpi	r26, 0xD6	; 214
      8e:	b1 07       	cpc	r27, r17
      90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
      92:	22 e0       	ldi	r18, 0x02	; 2
      94:	a6 ed       	ldi	r26, 0xD6	; 214
      96:	b1 e0       	ldi	r27, 0x01	; 1
      98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
      9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
      9c:	ad 36       	cpi	r26, 0x6D	; 109
      9e:	b2 07       	cpc	r27, r18
      a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
      a2:	0e 94 9a 02 	call	0x534	; 0x534 <main>
      a6:	0c 94 ad 08 	jmp	0x115a	; 0x115a <_exit>

000000aa <__bad_interrupt>:
      aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <adc_init>:
#include "util/delay.h"
#include <math.h>

void adc_init (void){
	
	DDRD |= (1 << PD5); // Set port PD5 to 1
      ae:	81 b3       	in	r24, 0x11	; 17
      b0:	80 62       	ori	r24, 0x20	; 32
      b2:	81 bb       	out	0x11, r24	; 17
	TCCR1A |= (1 << COM1A0)|(1 << COM1B0); // Timer/Counter1 Control Register A (TCCR1A): Setting bit 6 and 4 to 1 - "Toggle OCnA/OCnB on Compare Match."
      b4:	8f b5       	in	r24, 0x2f	; 47
      b6:	80 65       	ori	r24, 0x50	; 80
      b8:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1 << WGM12)|(1 << CS10); // Timer/Counter1 Control Register B (TCCR1B): Setting bit 3 to 1 - "CTC-mode", and bit 0 to 1 "clkI/O/1 (No prescaling)"
      ba:	8e b5       	in	r24, 0x2e	; 46
      bc:	89 60       	ori	r24, 0x09	; 9
      be:	8e bd       	out	0x2e, r24	; 46
	OCR1A = 0x1; // Setting Compare Match bit - which bit the counter triggers on
      c0:	81 e0       	ldi	r24, 0x01	; 1
      c2:	90 e0       	ldi	r25, 0x00	; 0
      c4:	9b bd       	out	0x2b, r25	; 43
      c6:	8a bd       	out	0x2a, r24	; 42
      c8:	08 95       	ret

000000ca <adc_read>:
}

void adc_read(void){
	// SEND TO ADC
	volatile char * adc = ( char *) 0x1400; // Set pointer at starting memory of ADC
	adc [0] = 0xff; // Send random value to initiate
      ca:	8f ef       	ldi	r24, 0xFF	; 255
      cc:	80 93 00 14 	sts	0x1400, r24	; 0x801400 <__bss_end+0x1193>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      d0:	84 e1       	ldi	r24, 0x14	; 20
      d2:	8a 95       	dec	r24
      d4:	f1 f7       	brne	.-4      	; 0xd2 <adc_read+0x8>
	
	// WAIT
	_delay_us(60); // Is this one necessary?
	
	// READ FROM ADC
	for (int i=0;i<4;i++) // Need to read 4 values - analog input 0 to 3
      d6:	80 e0       	ldi	r24, 0x00	; 0
      d8:	90 e0       	ldi	r25, 0x00	; 0
      da:	0b c0       	rjmp	.+22     	; 0xf2 <adc_read+0x28>
	{
		uint8_t number = adc [0]; // Read the ADC value and store it in variable
      dc:	20 91 00 14 	lds	r18, 0x1400	; 0x801400 <__bss_end+0x1193>
		ADC_states[i] = number;
      e0:	fc 01       	movw	r30, r24
      e2:	ee 0f       	add	r30, r30
      e4:	ff 1f       	adc	r31, r31
      e6:	ee 51       	subi	r30, 0x1E	; 30
      e8:	fe 4f       	sbci	r31, 0xFE	; 254
      ea:	30 e0       	ldi	r19, 0x00	; 0
      ec:	31 83       	std	Z+1, r19	; 0x01
      ee:	20 83       	st	Z, r18
	
	// WAIT
	_delay_us(60); // Is this one necessary?
	
	// READ FROM ADC
	for (int i=0;i<4;i++) // Need to read 4 values - analog input 0 to 3
      f0:	01 96       	adiw	r24, 0x01	; 1
      f2:	84 30       	cpi	r24, 0x04	; 4
      f4:	91 05       	cpc	r25, r1
      f6:	94 f3       	brlt	.-28     	; 0xdc <adc_read+0x12>
		ADC_states[i] = number;
		//if (i == 0){
		//printf( "%d ", number); // Print analog input i TODO: Change this from debugging later
		//}
	}
}
      f8:	08 95       	ret

000000fa <adc_calibrate>:

void adc_calibrate(void){
	adc_read();
      fa:	0e 94 65 00 	call	0xca	; 0xca <adc_read>
	X_neutral = ADC_states[0];
      fe:	e2 ee       	ldi	r30, 0xE2	; 226
     100:	f1 e0       	ldi	r31, 0x01	; 1
     102:	80 81       	ld	r24, Z
     104:	91 81       	ldd	r25, Z+1	; 0x01
     106:	90 93 d9 01 	sts	0x01D9, r25	; 0x8001d9 <X_neutral+0x1>
     10a:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <X_neutral>
	Y_neutral = ADC_states[1];
     10e:	82 81       	ldd	r24, Z+2	; 0x02
     110:	93 81       	ldd	r25, Z+3	; 0x03
     112:	90 93 d7 01 	sts	0x01D7, r25	; 0x8001d7 <__data_end+0x1>
     116:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <__data_end>
     11a:	08 95       	ret

0000011c <get_stick_state>:
}

void get_stick_state(void){ //Transform the stickstates from 0 <-> 255 to -100 <-> 100
     11c:	0f 93       	push	r16
     11e:	1f 93       	push	r17
     120:	cf 93       	push	r28
     122:	df 93       	push	r29
	adc_read();
     124:	0e 94 65 00 	call	0xca	; 0xca <adc_read>
	uint8_t raw_x = ADC_states[0];
     128:	e2 ee       	ldi	r30, 0xE2	; 226
     12a:	f1 e0       	ldi	r31, 0x01	; 1
     12c:	00 81       	ld	r16, Z
     12e:	11 81       	ldd	r17, Z+1	; 0x01
	uint8_t raw_y = ADC_states[1];
     130:	c2 81       	ldd	r28, Z+2	; 0x02
     132:	d3 81       	ldd	r29, Z+3	; 0x03
     134:	dd 27       	eor	r29, r29
	printf("%d \r\n",raw_y);
     136:	df 93       	push	r29
     138:	cf 93       	push	r28
     13a:	86 e0       	ldi	r24, 0x06	; 6
     13c:	91 e0       	ldi	r25, 0x01	; 1
     13e:	9f 93       	push	r25
     140:	8f 93       	push	r24
     142:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <printf>
     146:	c8 01       	movw	r24, r16
     148:	99 27       	eor	r25, r25
	//uint8_t b = 51;
	if (raw_x > X_neutral){
     14a:	60 91 d8 01 	lds	r22, 0x01D8	; 0x8001d8 <X_neutral>
     14e:	70 91 d9 01 	lds	r23, 0x01D9	; 0x8001d9 <X_neutral+0x1>
     152:	0f 90       	pop	r0
     154:	0f 90       	pop	r0
     156:	0f 90       	pop	r0
     158:	0f 90       	pop	r0
     15a:	68 17       	cp	r22, r24
     15c:	79 07       	cpc	r23, r25
     15e:	b4 f4       	brge	.+44     	; 0x18c <get_stick_state+0x70>
		stick_state.X_state = (((raw_x-X_neutral) * 100 )/ (255 - X_neutral));
     160:	9c 01       	movw	r18, r24
     162:	26 1b       	sub	r18, r22
     164:	37 0b       	sbc	r19, r23
     166:	44 e6       	ldi	r20, 0x64	; 100
     168:	42 9f       	mul	r20, r18
     16a:	c0 01       	movw	r24, r0
     16c:	43 9f       	mul	r20, r19
     16e:	90 0d       	add	r25, r0
     170:	11 24       	eor	r1, r1
     172:	2f ef       	ldi	r18, 0xFF	; 255
     174:	30 e0       	ldi	r19, 0x00	; 0
     176:	a9 01       	movw	r20, r18
     178:	46 1b       	sub	r20, r22
     17a:	57 0b       	sbc	r21, r23
     17c:	ba 01       	movw	r22, r20
     17e:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <__divmodhi4>
     182:	70 93 db 01 	sts	0x01DB, r23	; 0x8001db <stick_state+0x1>
     186:	60 93 da 01 	sts	0x01DA, r22	; 0x8001da <stick_state>
     18a:	0f c0       	rjmp	.+30     	; 0x1aa <get_stick_state+0x8e>
	}
	else {
		stick_state.X_state = (((raw_x-X_neutral) * 100) / (X_neutral));
     18c:	9c 01       	movw	r18, r24
     18e:	26 1b       	sub	r18, r22
     190:	37 0b       	sbc	r19, r23
     192:	44 e6       	ldi	r20, 0x64	; 100
     194:	42 9f       	mul	r20, r18
     196:	c0 01       	movw	r24, r0
     198:	43 9f       	mul	r20, r19
     19a:	90 0d       	add	r25, r0
     19c:	11 24       	eor	r1, r1
     19e:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <__divmodhi4>
     1a2:	70 93 db 01 	sts	0x01DB, r23	; 0x8001db <stick_state+0x1>
     1a6:	60 93 da 01 	sts	0x01DA, r22	; 0x8001da <stick_state>
	}
	
	if (raw_y > Y_neutral){
     1aa:	60 91 d6 01 	lds	r22, 0x01D6	; 0x8001d6 <__data_end>
     1ae:	70 91 d7 01 	lds	r23, 0x01D7	; 0x8001d7 <__data_end+0x1>
     1b2:	6c 17       	cp	r22, r28
     1b4:	7d 07       	cpc	r23, r29
     1b6:	ac f4       	brge	.+42     	; 0x1e2 <get_stick_state+0xc6>
		stick_state.Y_state = (((raw_y-Y_neutral) * 100 )/ (255 - Y_neutral));
     1b8:	c6 1b       	sub	r28, r22
     1ba:	d7 0b       	sbc	r29, r23
     1bc:	24 e6       	ldi	r18, 0x64	; 100
     1be:	2c 9f       	mul	r18, r28
     1c0:	c0 01       	movw	r24, r0
     1c2:	2d 9f       	mul	r18, r29
     1c4:	90 0d       	add	r25, r0
     1c6:	11 24       	eor	r1, r1
     1c8:	2f ef       	ldi	r18, 0xFF	; 255
     1ca:	30 e0       	ldi	r19, 0x00	; 0
     1cc:	a9 01       	movw	r20, r18
     1ce:	46 1b       	sub	r20, r22
     1d0:	57 0b       	sbc	r21, r23
     1d2:	ba 01       	movw	r22, r20
     1d4:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <__divmodhi4>
     1d8:	70 93 dd 01 	sts	0x01DD, r23	; 0x8001dd <stick_state+0x3>
     1dc:	60 93 dc 01 	sts	0x01DC, r22	; 0x8001dc <stick_state+0x2>
     1e0:	0e c0       	rjmp	.+28     	; 0x1fe <get_stick_state+0xe2>
	}
	else {
		stick_state.Y_state = (((raw_y-Y_neutral) * 100) / (Y_neutral));
     1e2:	c6 1b       	sub	r28, r22
     1e4:	d7 0b       	sbc	r29, r23
     1e6:	24 e6       	ldi	r18, 0x64	; 100
     1e8:	2c 9f       	mul	r18, r28
     1ea:	c0 01       	movw	r24, r0
     1ec:	2d 9f       	mul	r18, r29
     1ee:	90 0d       	add	r25, r0
     1f0:	11 24       	eor	r1, r1
     1f2:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <__divmodhi4>
     1f6:	70 93 dd 01 	sts	0x01DD, r23	; 0x8001dd <stick_state+0x3>
     1fa:	60 93 dc 01 	sts	0x01DC, r22	; 0x8001dc <stick_state+0x2>
	}
	
}
     1fe:	df 91       	pop	r29
     200:	cf 91       	pop	r28
     202:	1f 91       	pop	r17
     204:	0f 91       	pop	r16
     206:	08 95       	ret

00000208 <CAN_read>:
     208:	cf 93       	push	r28
     20a:	c8 2f       	mov	r28, r24
     20c:	88 b3       	in	r24, 0x18	; 24
     20e:	8f 7e       	andi	r24, 0xEF	; 239
     210:	88 bb       	out	0x18, r24	; 24
     212:	83 e0       	ldi	r24, 0x03	; 3
     214:	90 e0       	ldi	r25, 0x00	; 0
     216:	0e 94 de 03 	call	0x7bc	; 0x7bc <SPI_write>
     21a:	8c 2f       	mov	r24, r28
     21c:	90 e0       	ldi	r25, 0x00	; 0
     21e:	0e 94 de 03 	call	0x7bc	; 0x7bc <SPI_write>
     222:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <SPI_read>
     226:	98 b3       	in	r25, 0x18	; 24
     228:	90 61       	ori	r25, 0x10	; 16
     22a:	98 bb       	out	0x18, r25	; 24
     22c:	cf 91       	pop	r28
     22e:	08 95       	ret

00000230 <CAN_bit_modify>:
     230:	1f 93       	push	r17
     232:	cf 93       	push	r28
     234:	df 93       	push	r29
     236:	18 2f       	mov	r17, r24
     238:	d6 2f       	mov	r29, r22
     23a:	c4 2f       	mov	r28, r20
     23c:	88 b3       	in	r24, 0x18	; 24
     23e:	8f 7e       	andi	r24, 0xEF	; 239
     240:	88 bb       	out	0x18, r24	; 24
     242:	85 e0       	ldi	r24, 0x05	; 5
     244:	90 e0       	ldi	r25, 0x00	; 0
     246:	0e 94 de 03 	call	0x7bc	; 0x7bc <SPI_write>
     24a:	81 2f       	mov	r24, r17
     24c:	90 e0       	ldi	r25, 0x00	; 0
     24e:	0e 94 de 03 	call	0x7bc	; 0x7bc <SPI_write>
     252:	8d 2f       	mov	r24, r29
     254:	90 e0       	ldi	r25, 0x00	; 0
     256:	0e 94 de 03 	call	0x7bc	; 0x7bc <SPI_write>
     25a:	8c 2f       	mov	r24, r28
     25c:	90 e0       	ldi	r25, 0x00	; 0
     25e:	0e 94 de 03 	call	0x7bc	; 0x7bc <SPI_write>
     262:	88 b3       	in	r24, 0x18	; 24
     264:	80 61       	ori	r24, 0x10	; 16
     266:	88 bb       	out	0x18, r24	; 24
     268:	df 91       	pop	r29
     26a:	cf 91       	pop	r28
     26c:	1f 91       	pop	r17
     26e:	08 95       	ret

00000270 <CAN_reset>:
     270:	88 b3       	in	r24, 0x18	; 24
     272:	8f 7e       	andi	r24, 0xEF	; 239
     274:	88 bb       	out	0x18, r24	; 24
     276:	80 ec       	ldi	r24, 0xC0	; 192
     278:	90 e0       	ldi	r25, 0x00	; 0
     27a:	0e 94 de 03 	call	0x7bc	; 0x7bc <SPI_write>
     27e:	88 b3       	in	r24, 0x18	; 24
     280:	80 61       	ori	r24, 0x10	; 16
     282:	88 bb       	out	0x18, r24	; 24
     284:	08 95       	ret

00000286 <CAN_init>:
     286:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <SPI_init>
     28a:	0e 94 38 01 	call	0x270	; 0x270 <CAN_reset>
     28e:	8e e0       	ldi	r24, 0x0E	; 14
     290:	0e 94 04 01 	call	0x208	; 0x208 <CAN_read>
     294:	80 7e       	andi	r24, 0xE0	; 224
     296:	80 38       	cpi	r24, 0x80	; 128
     298:	31 f0       	breq	.+12     	; 0x2a6 <CAN_init+0x20>
     29a:	8c e0       	ldi	r24, 0x0C	; 12
     29c:	91 e0       	ldi	r25, 0x01	; 1
     29e:	0e 94 71 04 	call	0x8e2	; 0x8e2 <puts>
     2a2:	81 e0       	ldi	r24, 0x01	; 1
     2a4:	08 95       	ret
     2a6:	43 e8       	ldi	r20, 0x83	; 131
     2a8:	6f ef       	ldi	r22, 0xFF	; 255
     2aa:	8a e2       	ldi	r24, 0x2A	; 42
     2ac:	0e 94 18 01 	call	0x230	; 0x230 <CAN_bit_modify>
     2b0:	49 ef       	ldi	r20, 0xF9	; 249
     2b2:	6f ef       	ldi	r22, 0xFF	; 255
     2b4:	89 e2       	ldi	r24, 0x29	; 41
     2b6:	0e 94 18 01 	call	0x230	; 0x230 <CAN_bit_modify>
     2ba:	47 e0       	ldi	r20, 0x07	; 7
     2bc:	67 ec       	ldi	r22, 0xC7	; 199
     2be:	88 e2       	ldi	r24, 0x28	; 40
     2c0:	0e 94 18 01 	call	0x230	; 0x230 <CAN_bit_modify>
     2c4:	40 e2       	ldi	r20, 0x20	; 32
     2c6:	60 e6       	ldi	r22, 0x60	; 96
     2c8:	80 e6       	ldi	r24, 0x60	; 96
     2ca:	0e 94 18 01 	call	0x230	; 0x230 <CAN_bit_modify>
     2ce:	41 e0       	ldi	r20, 0x01	; 1
     2d0:	61 e0       	ldi	r22, 0x01	; 1
     2d2:	8b e2       	ldi	r24, 0x2B	; 43
     2d4:	0e 94 18 01 	call	0x230	; 0x230 <CAN_bit_modify>
     2d8:	40 e0       	ldi	r20, 0x00	; 0
     2da:	60 ee       	ldi	r22, 0xE0	; 224
     2dc:	8f e0       	ldi	r24, 0x0F	; 15
     2de:	0e 94 18 01 	call	0x230	; 0x230 <CAN_bit_modify>
     2e2:	80 e0       	ldi	r24, 0x00	; 0
     2e4:	08 95       	ret

000002e6 <CAN_read_message>:
     2e6:	ff 92       	push	r15
     2e8:	0f 93       	push	r16
     2ea:	1f 93       	push	r17
     2ec:	cf 93       	push	r28
     2ee:	df 93       	push	r29
     2f0:	8c 01       	movw	r16, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2f2:	83 ec       	ldi	r24, 0xC3	; 195
     2f4:	99 e0       	ldi	r25, 0x09	; 9
     2f6:	01 97       	sbiw	r24, 0x01	; 1
     2f8:	f1 f7       	brne	.-4      	; 0x2f6 <CAN_read_message+0x10>
     2fa:	00 c0       	rjmp	.+0      	; 0x2fc <CAN_read_message+0x16>
     2fc:	00 00       	nop
     2fe:	85 e6       	ldi	r24, 0x65	; 101
     300:	0e 94 04 01 	call	0x208	; 0x208 <CAN_read>
     304:	8f 70       	andi	r24, 0x0F	; 15
     306:	f8 2e       	mov	r15, r24
     308:	f8 01       	movw	r30, r16
     30a:	81 83       	std	Z+1, r24	; 0x01
     30c:	83 ec       	ldi	r24, 0xC3	; 195
     30e:	99 e0       	ldi	r25, 0x09	; 9
     310:	01 97       	sbiw	r24, 0x01	; 1
     312:	f1 f7       	brne	.-4      	; 0x310 <CAN_read_message+0x2a>
     314:	00 c0       	rjmp	.+0      	; 0x316 <CAN_read_message+0x30>
     316:	00 00       	nop
     318:	81 e6       	ldi	r24, 0x61	; 97
     31a:	0e 94 04 01 	call	0x208	; 0x208 <CAN_read>
     31e:	c8 2f       	mov	r28, r24
     320:	d0 e0       	ldi	r29, 0x00	; 0
     322:	cc 0f       	add	r28, r28
     324:	dd 1f       	adc	r29, r29
     326:	cc 0f       	add	r28, r28
     328:	dd 1f       	adc	r29, r29
     32a:	cc 0f       	add	r28, r28
     32c:	dd 1f       	adc	r29, r29
     32e:	82 e6       	ldi	r24, 0x62	; 98
     330:	0e 94 04 01 	call	0x208	; 0x208 <CAN_read>
     334:	82 95       	swap	r24
     336:	86 95       	lsr	r24
     338:	87 70       	andi	r24, 0x07	; 7
     33a:	c8 2b       	or	r28, r24
     33c:	f8 01       	movw	r30, r16
     33e:	c0 83       	st	Z, r28
     340:	c0 e0       	ldi	r28, 0x00	; 0
     342:	d0 e0       	ldi	r29, 0x00	; 0
     344:	0f c0       	rjmp	.+30     	; 0x364 <CAN_read_message+0x7e>
     346:	8c 2f       	mov	r24, r28
     348:	8a 59       	subi	r24, 0x9A	; 154
     34a:	0e 94 04 01 	call	0x208	; 0x208 <CAN_read>
     34e:	f8 01       	movw	r30, r16
     350:	ec 0f       	add	r30, r28
     352:	fd 1f       	adc	r31, r29
     354:	82 83       	std	Z+2, r24	; 0x02
     356:	83 ec       	ldi	r24, 0xC3	; 195
     358:	99 e0       	ldi	r25, 0x09	; 9
     35a:	01 97       	sbiw	r24, 0x01	; 1
     35c:	f1 f7       	brne	.-4      	; 0x35a <CAN_read_message+0x74>
     35e:	00 c0       	rjmp	.+0      	; 0x360 <CAN_read_message+0x7a>
     360:	00 00       	nop
     362:	21 96       	adiw	r28, 0x01	; 1
     364:	8f 2d       	mov	r24, r15
     366:	90 e0       	ldi	r25, 0x00	; 0
     368:	c8 17       	cp	r28, r24
     36a:	d9 07       	cpc	r29, r25
     36c:	64 f3       	brlt	.-40     	; 0x346 <CAN_read_message+0x60>
     36e:	40 e0       	ldi	r20, 0x00	; 0
     370:	61 e0       	ldi	r22, 0x01	; 1
     372:	8c e2       	ldi	r24, 0x2C	; 44
     374:	0e 94 18 01 	call	0x230	; 0x230 <CAN_bit_modify>
     378:	c8 01       	movw	r24, r16
     37a:	df 91       	pop	r29
     37c:	cf 91       	pop	r28
     37e:	1f 91       	pop	r17
     380:	0f 91       	pop	r16
     382:	ff 90       	pop	r15
     384:	08 95       	ret

00000386 <USART_Init>:
     386:	9c bf       	out	0x3c, r25	; 60
     388:	80 b9       	out	0x00, r24	; 0
     38a:	88 e1       	ldi	r24, 0x18	; 24
     38c:	81 b9       	out	0x01, r24	; 1
     38e:	8e e8       	ldi	r24, 0x8E	; 142
     390:	8c bf       	out	0x3c, r24	; 60
     392:	08 95       	ret

00000394 <USART_Transmit>:
     394:	15 9b       	sbis	0x02, 5	; 2
     396:	fe cf       	rjmp	.-4      	; 0x394 <USART_Transmit>
     398:	83 b9       	out	0x03, r24	; 3
     39a:	08 95       	ret

0000039c <USART_Receive>:
     39c:	17 9b       	sbis	0x02, 7	; 2
     39e:	fe cf       	rjmp	.-4      	; 0x39c <USART_Receive>
     3a0:	83 b1       	in	r24, 0x03	; 3
     3a2:	08 95       	ret

000003a4 <__vector_1>:
#define MYUBRR FOSC/16/BAUD-1 // = 31

// #define different id values


ISR(INT0_vect){
     3a4:	1f 92       	push	r1
     3a6:	0f 92       	push	r0
     3a8:	0f b6       	in	r0, 0x3f	; 63
     3aa:	0f 92       	push	r0
     3ac:	11 24       	eor	r1, r1
     3ae:	2f 93       	push	r18
     3b0:	3f 93       	push	r19
     3b2:	4f 93       	push	r20
     3b4:	5f 93       	push	r21
     3b6:	6f 93       	push	r22
     3b8:	7f 93       	push	r23
     3ba:	8f 93       	push	r24
     3bc:	9f 93       	push	r25
     3be:	af 93       	push	r26
     3c0:	bf 93       	push	r27
     3c2:	ef 93       	push	r30
     3c4:	ff 93       	push	r31
	printf("\r\nRight button\r\n");
     3c6:	80 e4       	ldi	r24, 0x40	; 64
     3c8:	91 e0       	ldi	r25, 0x01	; 1
     3ca:	0e 94 71 04 	call	0x8e2	; 0x8e2 <puts>
}
     3ce:	ff 91       	pop	r31
     3d0:	ef 91       	pop	r30
     3d2:	bf 91       	pop	r27
     3d4:	af 91       	pop	r26
     3d6:	9f 91       	pop	r25
     3d8:	8f 91       	pop	r24
     3da:	7f 91       	pop	r23
     3dc:	6f 91       	pop	r22
     3de:	5f 91       	pop	r21
     3e0:	4f 91       	pop	r20
     3e2:	3f 91       	pop	r19
     3e4:	2f 91       	pop	r18
     3e6:	0f 90       	pop	r0
     3e8:	0f be       	out	0x3f, r0	; 63
     3ea:	0f 90       	pop	r0
     3ec:	1f 90       	pop	r1
     3ee:	18 95       	reti

000003f0 <__vector_2>:
ISR(INT1_vect){
     3f0:	1f 92       	push	r1
     3f2:	0f 92       	push	r0
     3f4:	0f b6       	in	r0, 0x3f	; 63
     3f6:	0f 92       	push	r0
     3f8:	11 24       	eor	r1, r1
     3fa:	2f 93       	push	r18
     3fc:	3f 93       	push	r19
     3fe:	4f 93       	push	r20
     400:	5f 93       	push	r21
     402:	6f 93       	push	r22
     404:	7f 93       	push	r23
     406:	8f 93       	push	r24
     408:	9f 93       	push	r25
     40a:	af 93       	push	r26
     40c:	bf 93       	push	r27
     40e:	ef 93       	push	r30
     410:	ff 93       	push	r31
	printf("\r\nLeft button\r\n");
     412:	80 e5       	ldi	r24, 0x50	; 80
     414:	91 e0       	ldi	r25, 0x01	; 1
     416:	0e 94 71 04 	call	0x8e2	; 0x8e2 <puts>
}
     41a:	ff 91       	pop	r31
     41c:	ef 91       	pop	r30
     41e:	bf 91       	pop	r27
     420:	af 91       	pop	r26
     422:	9f 91       	pop	r25
     424:	8f 91       	pop	r24
     426:	7f 91       	pop	r23
     428:	6f 91       	pop	r22
     42a:	5f 91       	pop	r21
     42c:	4f 91       	pop	r20
     42e:	3f 91       	pop	r19
     430:	2f 91       	pop	r18
     432:	0f 90       	pop	r0
     434:	0f be       	out	0x3f, r0	; 63
     436:	0f 90       	pop	r0
     438:	1f 90       	pop	r1
     43a:	18 95       	reti

0000043c <__vector_3>:
ISR(INT2_vect){
     43c:	1f 92       	push	r1
     43e:	0f 92       	push	r0
     440:	0f b6       	in	r0, 0x3f	; 63
     442:	0f 92       	push	r0
     444:	11 24       	eor	r1, r1
     446:	ef 92       	push	r14
     448:	ff 92       	push	r15
     44a:	0f 93       	push	r16
     44c:	1f 93       	push	r17
     44e:	2f 93       	push	r18
     450:	3f 93       	push	r19
     452:	4f 93       	push	r20
     454:	5f 93       	push	r21
     456:	6f 93       	push	r22
     458:	7f 93       	push	r23
     45a:	8f 93       	push	r24
     45c:	9f 93       	push	r25
     45e:	af 93       	push	r26
     460:	bf 93       	push	r27
     462:	ef 93       	push	r30
     464:	ff 93       	push	r31
     466:	cf 93       	push	r28
     468:	df 93       	push	r29
     46a:	cd b7       	in	r28, 0x3d	; 61
     46c:	de b7       	in	r29, 0x3e	; 62
     46e:	2a 97       	sbiw	r28, 0x0a	; 10
     470:	de bf       	out	0x3e, r29	; 62
     472:	cd bf       	out	0x3d, r28	; 61
     474:	87 ea       	ldi	r24, 0xA7	; 167
     476:	91 e6       	ldi	r25, 0x61	; 97
     478:	01 97       	sbiw	r24, 0x01	; 1
     47a:	f1 f7       	brne	.-4      	; 0x478 <__vector_3+0x3c>
     47c:	00 c0       	rjmp	.+0      	; 0x47e <__vector_3+0x42>
     47e:	00 00       	nop
	//printf("\r\n Element %u", OLED_contents.menu_index);
	
	_delay_ms(100);
	struct Can_Message rec_message = CAN_read_message();
     480:	ce 01       	movw	r24, r28
     482:	01 96       	adiw	r24, 0x01	; 1
     484:	0e 94 73 01 	call	0x2e6	; 0x2e6 <CAN_read_message>
	if(rec_message.id != 0 & rec_message.id < 31){
     488:	89 81       	ldd	r24, Y+1	; 0x01
     48a:	9f ef       	ldi	r25, 0xFF	; 255
     48c:	98 0f       	add	r25, r24
     48e:	9e 31       	cpi	r25, 0x1E	; 30
     490:	a0 f5       	brcc	.+104    	; 0x4fa <__vector_3+0xbe>
		//printf("len: %i, id: %i, data: %i \r \n", rec_message.length, rec_message.id, rec_message.data[4]);
		printf("len: %i, id: %i \r \n", rec_message.length, rec_message.id);
     492:	9a 81       	ldd	r25, Y+2	; 0x02
     494:	e9 2e       	mov	r14, r25
     496:	f1 2c       	mov	r15, r1
     498:	1f 92       	push	r1
     49a:	8f 93       	push	r24
     49c:	1f 92       	push	r1
     49e:	9f 93       	push	r25
     4a0:	8f e5       	ldi	r24, 0x5F	; 95
     4a2:	91 e0       	ldi	r25, 0x01	; 1
     4a4:	9f 93       	push	r25
     4a6:	8f 93       	push	r24
     4a8:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <printf>
		for (int i = 0; i < rec_message.length; i++){
     4ac:	0f 90       	pop	r0
     4ae:	0f 90       	pop	r0
     4b0:	0f 90       	pop	r0
     4b2:	0f 90       	pop	r0
     4b4:	0f 90       	pop	r0
     4b6:	0f 90       	pop	r0
     4b8:	00 e0       	ldi	r16, 0x00	; 0
     4ba:	10 e0       	ldi	r17, 0x00	; 0
     4bc:	1b c0       	rjmp	.+54     	; 0x4f4 <__vector_3+0xb8>
			printf("DATA: %i \r \n", rec_message.data[i]);
     4be:	e3 e0       	ldi	r30, 0x03	; 3
     4c0:	f0 e0       	ldi	r31, 0x00	; 0
     4c2:	ec 0f       	add	r30, r28
     4c4:	fd 1f       	adc	r31, r29
     4c6:	e0 0f       	add	r30, r16
     4c8:	f1 1f       	adc	r31, r17
     4ca:	80 81       	ld	r24, Z
     4cc:	1f 92       	push	r1
     4ce:	8f 93       	push	r24
     4d0:	83 e7       	ldi	r24, 0x73	; 115
     4d2:	91 e0       	ldi	r25, 0x01	; 1
     4d4:	9f 93       	push	r25
     4d6:	8f 93       	push	r24
     4d8:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <printf>
     4dc:	83 ec       	ldi	r24, 0xC3	; 195
     4de:	99 e0       	ldi	r25, 0x09	; 9
     4e0:	01 97       	sbiw	r24, 0x01	; 1
     4e2:	f1 f7       	brne	.-4      	; 0x4e0 <__vector_3+0xa4>
     4e4:	00 c0       	rjmp	.+0      	; 0x4e6 <__vector_3+0xaa>
     4e6:	00 00       	nop
	_delay_ms(100);
	struct Can_Message rec_message = CAN_read_message();
	if(rec_message.id != 0 & rec_message.id < 31){
		//printf("len: %i, id: %i, data: %i \r \n", rec_message.length, rec_message.id, rec_message.data[4]);
		printf("len: %i, id: %i \r \n", rec_message.length, rec_message.id);
		for (int i = 0; i < rec_message.length; i++){
     4e8:	0f 5f       	subi	r16, 0xFF	; 255
     4ea:	1f 4f       	sbci	r17, 0xFF	; 255
     4ec:	0f 90       	pop	r0
     4ee:	0f 90       	pop	r0
     4f0:	0f 90       	pop	r0
     4f2:	0f 90       	pop	r0
     4f4:	0e 15       	cp	r16, r14
     4f6:	1f 05       	cpc	r17, r15
     4f8:	14 f3       	brlt	.-60     	; 0x4be <__vector_3+0x82>
			printf("DATA: %i \r \n", rec_message.data[i]);
			_delay_ms(10);
		}
	}
	
}
     4fa:	2a 96       	adiw	r28, 0x0a	; 10
     4fc:	0f b6       	in	r0, 0x3f	; 63
     4fe:	f8 94       	cli
     500:	de bf       	out	0x3e, r29	; 62
     502:	0f be       	out	0x3f, r0	; 63
     504:	cd bf       	out	0x3d, r28	; 61
     506:	df 91       	pop	r29
     508:	cf 91       	pop	r28
     50a:	ff 91       	pop	r31
     50c:	ef 91       	pop	r30
     50e:	bf 91       	pop	r27
     510:	af 91       	pop	r26
     512:	9f 91       	pop	r25
     514:	8f 91       	pop	r24
     516:	7f 91       	pop	r23
     518:	6f 91       	pop	r22
     51a:	5f 91       	pop	r21
     51c:	4f 91       	pop	r20
     51e:	3f 91       	pop	r19
     520:	2f 91       	pop	r18
     522:	1f 91       	pop	r17
     524:	0f 91       	pop	r16
     526:	ff 90       	pop	r15
     528:	ef 90       	pop	r14
     52a:	0f 90       	pop	r0
     52c:	0f be       	out	0x3f, r0	; 63
     52e:	0f 90       	pop	r0
     530:	1f 90       	pop	r1
     532:	18 95       	reti

00000534 <main>:

int main(void)
{

	//FIX CODE SO THIS ONLY RUNS ONCE
	USART_Init(31);
     534:	8f e1       	ldi	r24, 0x1F	; 31
     536:	90 e0       	ldi	r25, 0x00	; 0
     538:	0e 94 c3 01 	call	0x386	; 0x386 <USART_Init>
	fdevopen(USART_Transmit, USART_Receive);
     53c:	6e ec       	ldi	r22, 0xCE	; 206
     53e:	71 e0       	ldi	r23, 0x01	; 1
     540:	8a ec       	ldi	r24, 0xCA	; 202
     542:	91 e0       	ldi	r25, 0x01	; 1
     544:	0e 94 10 04 	call	0x820	; 0x820 <fdevopen>
	
	adc_init();
     548:	0e 94 57 00 	call	0xae	; 0xae <adc_init>
	
	// PINx & 0x01
	cli();
     54c:	f8 94       	cli
	
	DDRD &= ~(1 << PIND)|(1 << PIND); //Set port to input
     54e:	20 b3       	in	r18, 0x10	; 16
     550:	81 e0       	ldi	r24, 0x01	; 1
     552:	90 e0       	ldi	r25, 0x00	; 0
     554:	ac 01       	movw	r20, r24
     556:	02 c0       	rjmp	.+4      	; 0x55c <main+0x28>
     558:	44 0f       	add	r20, r20
     55a:	55 1f       	adc	r21, r21
     55c:	2a 95       	dec	r18
     55e:	e2 f7       	brpl	.-8      	; 0x558 <main+0x24>
     560:	9a 01       	movw	r18, r20
     562:	20 95       	com	r18
     564:	30 95       	com	r19
     566:	40 b3       	in	r20, 0x10	; 16
     568:	02 c0       	rjmp	.+4      	; 0x56e <main+0x3a>
     56a:	88 0f       	add	r24, r24
     56c:	99 1f       	adc	r25, r25
     56e:	4a 95       	dec	r20
     570:	e2 f7       	brpl	.-8      	; 0x56a <main+0x36>
     572:	82 2b       	or	r24, r18
     574:	93 2b       	or	r25, r19
     576:	91 b3       	in	r25, 0x11	; 17
     578:	89 23       	and	r24, r25
     57a:	81 bb       	out	0x11, r24	; 17
	DDRE &= ~(1 << PINE0);
     57c:	86 b1       	in	r24, 0x06	; 6
     57e:	8e 7f       	andi	r24, 0xFE	; 254
     580:	86 b9       	out	0x06, r24	; 6
	PORTE |= (1 << PINE0); // Internal pull up
     582:	87 b1       	in	r24, 0x07	; 7
     584:	81 60       	ori	r24, 0x01	; 1
     586:	87 b9       	out	0x07, r24	; 7
	
	MCUCR |= (1 << SRE ); // enable XMEM
     588:	85 b7       	in	r24, 0x35	; 53
     58a:	80 68       	ori	r24, 0x80	; 128
     58c:	85 bf       	out	0x35, r24	; 53
	MCUCR |= (1 << ISC11)|(1 << ISC10)|(1 << ISC01)|(1 << ISC00); //Sets the interrupt at positive flank
     58e:	85 b7       	in	r24, 0x35	; 53
     590:	8f 60       	ori	r24, 0x0F	; 15
     592:	85 bf       	out	0x35, r24	; 53
	EMCUCR |= (0 << ISC2); // Rising edge on INT2
     594:	86 b7       	in	r24, 0x36	; 54
     596:	86 bf       	out	0x36, r24	; 54
	GICR |= (1 << INT0)|(1 << INT1)|(1 << INT2); //Enables the interrupt
     598:	8b b7       	in	r24, 0x3b	; 59
     59a:	80 6e       	ori	r24, 0xE0	; 224
     59c:	8b bf       	out	0x3b, r24	; 59
	SFIOR |= (1 << XMM0 ); // mask unused bits
     59e:	80 b7       	in	r24, 0x30	; 48
     5a0:	88 60       	ori	r24, 0x08	; 8
     5a2:	80 bf       	out	0x30, r24	; 48
	
	sei();
     5a4:	78 94       	sei
	adc_calibrate();
     5a6:	0e 94 7d 00 	call	0xfa	; 0xfa <adc_calibrate>
	OLED_init();
     5aa:	0e 94 33 03 	call	0x666	; 0x666 <OLED_init>
	OLED_reset();
     5ae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <OLED_reset>

	strcpy(OLED_contents.line_0, "-----MENU-----");
     5b2:	8f e0       	ldi	r24, 0x0F	; 15
     5b4:	e6 ec       	ldi	r30, 0xC6	; 198
     5b6:	f1 e0       	ldi	r31, 0x01	; 1
     5b8:	ab ee       	ldi	r26, 0xEB	; 235
     5ba:	b1 e0       	ldi	r27, 0x01	; 1
     5bc:	01 90       	ld	r0, Z+
     5be:	0d 92       	st	X+, r0
     5c0:	8a 95       	dec	r24
     5c2:	e1 f7       	brne	.-8      	; 0x5bc <main+0x88>
	strcpy(OLED_contents.line_1, "element 1");
     5c4:	8a e0       	ldi	r24, 0x0A	; 10
     5c6:	e0 e8       	ldi	r30, 0x80	; 128
     5c8:	f1 e0       	ldi	r31, 0x01	; 1
     5ca:	aa ef       	ldi	r26, 0xFA	; 250
     5cc:	b1 e0       	ldi	r27, 0x01	; 1
     5ce:	01 90       	ld	r0, Z+
     5d0:	0d 92       	st	X+, r0
     5d2:	8a 95       	dec	r24
     5d4:	e1 f7       	brne	.-8      	; 0x5ce <main+0x9a>
	strcpy(OLED_contents.line_2, "element 2");
     5d6:	8a e0       	ldi	r24, 0x0A	; 10
     5d8:	ea e8       	ldi	r30, 0x8A	; 138
     5da:	f1 e0       	ldi	r31, 0x01	; 1
     5dc:	a9 e0       	ldi	r26, 0x09	; 9
     5de:	b2 e0       	ldi	r27, 0x02	; 2
     5e0:	01 90       	ld	r0, Z+
     5e2:	0d 92       	st	X+, r0
     5e4:	8a 95       	dec	r24
     5e6:	e1 f7       	brne	.-8      	; 0x5e0 <main+0xac>
	strcpy(OLED_contents.line_3, "element 3");
     5e8:	8a e0       	ldi	r24, 0x0A	; 10
     5ea:	e4 e9       	ldi	r30, 0x94	; 148
     5ec:	f1 e0       	ldi	r31, 0x01	; 1
     5ee:	a8 e1       	ldi	r26, 0x18	; 24
     5f0:	b2 e0       	ldi	r27, 0x02	; 2
     5f2:	01 90       	ld	r0, Z+
     5f4:	0d 92       	st	X+, r0
     5f6:	8a 95       	dec	r24
     5f8:	e1 f7       	brne	.-8      	; 0x5f2 <main+0xbe>
	strcpy(OLED_contents.line_4, "element 4");
     5fa:	8a e0       	ldi	r24, 0x0A	; 10
     5fc:	ee e9       	ldi	r30, 0x9E	; 158
     5fe:	f1 e0       	ldi	r31, 0x01	; 1
     600:	a7 e2       	ldi	r26, 0x27	; 39
     602:	b2 e0       	ldi	r27, 0x02	; 2
     604:	01 90       	ld	r0, Z+
     606:	0d 92       	st	X+, r0
     608:	8a 95       	dec	r24
     60a:	e1 f7       	brne	.-8      	; 0x604 <main+0xd0>
	strcpy(OLED_contents.line_5, "element 5");
     60c:	8a e0       	ldi	r24, 0x0A	; 10
     60e:	e8 ea       	ldi	r30, 0xA8	; 168
     610:	f1 e0       	ldi	r31, 0x01	; 1
     612:	a6 e3       	ldi	r26, 0x36	; 54
     614:	b2 e0       	ldi	r27, 0x02	; 2
     616:	01 90       	ld	r0, Z+
     618:	0d 92       	st	X+, r0
     61a:	8a 95       	dec	r24
     61c:	e1 f7       	brne	.-8      	; 0x616 <main+0xe2>
	strcpy(OLED_contents.line_6, "element 6");
     61e:	8a e0       	ldi	r24, 0x0A	; 10
     620:	e2 eb       	ldi	r30, 0xB2	; 178
     622:	f1 e0       	ldi	r31, 0x01	; 1
     624:	a5 e4       	ldi	r26, 0x45	; 69
     626:	b2 e0       	ldi	r27, 0x02	; 2
     628:	01 90       	ld	r0, Z+
     62a:	0d 92       	st	X+, r0
     62c:	8a 95       	dec	r24
     62e:	e1 f7       	brne	.-8      	; 0x628 <main+0xf4>
	strcpy(OLED_contents.line_7, "element 7");
     630:	8a e0       	ldi	r24, 0x0A	; 10
     632:	ec eb       	ldi	r30, 0xBC	; 188
     634:	f1 e0       	ldi	r31, 0x01	; 1
     636:	a4 e5       	ldi	r26, 0x54	; 84
     638:	b2 e0       	ldi	r27, 0x02	; 2
     63a:	01 90       	ld	r0, Z+
     63c:	0d 92       	st	X+, r0
     63e:	8a 95       	dec	r24
     640:	e1 f7       	brne	.-8      	; 0x63a <main+0x106>
	OLED_contents.menu_index = 1;
     642:	81 e0       	ldi	r24, 0x01	; 1
     644:	80 93 ea 01 	sts	0x01EA, r24	; 0x8001ea <OLED_contents>
	
	CAN_init();
     648:	0e 94 43 01 	call	0x286	; 0x286 <CAN_init>
	
	struct Can_Message can_message;
	can_message.id = 25;
	can_message.length = 8;
	//can_message.data[0] = 5;
	for (int i = 0; i < can_message.length; i++){
     64c:	80 e0       	ldi	r24, 0x00	; 0
     64e:	90 e0       	ldi	r25, 0x00	; 0
     650:	01 c0       	rjmp	.+2      	; 0x654 <main+0x120>
     652:	01 96       	adiw	r24, 0x01	; 1
     654:	88 30       	cpi	r24, 0x08	; 8
     656:	91 05       	cpc	r25, r1
     658:	e4 f3       	brlt	.-8      	; 0x652 <main+0x11e>
	int x = 0;
	
	while (1)
	{
		// CAN TEST IN LOOPBACK MODE:
		get_stick_state();
     65a:	0e 94 8e 00 	call	0x11c	; 0x11c <get_stick_state>
     65e:	fd cf       	rjmp	.-6      	; 0x65a <main+0x126>

00000660 <OLED_write_c>:
     660:	80 93 00 10 	sts	0x1000, r24	; 0x801000 <__bss_end+0xd93>
     664:	08 95       	ret

00000666 <OLED_init>:
     666:	8e ea       	ldi	r24, 0xAE	; 174
     668:	0e 94 30 03 	call	0x660	; 0x660 <OLED_write_c>
     66c:	81 ea       	ldi	r24, 0xA1	; 161
     66e:	0e 94 30 03 	call	0x660	; 0x660 <OLED_write_c>
     672:	8a ed       	ldi	r24, 0xDA	; 218
     674:	0e 94 30 03 	call	0x660	; 0x660 <OLED_write_c>
     678:	82 e1       	ldi	r24, 0x12	; 18
     67a:	0e 94 30 03 	call	0x660	; 0x660 <OLED_write_c>
     67e:	88 ec       	ldi	r24, 0xC8	; 200
     680:	0e 94 30 03 	call	0x660	; 0x660 <OLED_write_c>
     684:	88 ea       	ldi	r24, 0xA8	; 168
     686:	0e 94 30 03 	call	0x660	; 0x660 <OLED_write_c>
     68a:	8f e3       	ldi	r24, 0x3F	; 63
     68c:	0e 94 30 03 	call	0x660	; 0x660 <OLED_write_c>
     690:	85 ed       	ldi	r24, 0xD5	; 213
     692:	0e 94 30 03 	call	0x660	; 0x660 <OLED_write_c>
     696:	80 e8       	ldi	r24, 0x80	; 128
     698:	0e 94 30 03 	call	0x660	; 0x660 <OLED_write_c>
     69c:	81 e8       	ldi	r24, 0x81	; 129
     69e:	0e 94 30 03 	call	0x660	; 0x660 <OLED_write_c>
     6a2:	80 e5       	ldi	r24, 0x50	; 80
     6a4:	0e 94 30 03 	call	0x660	; 0x660 <OLED_write_c>
     6a8:	89 ed       	ldi	r24, 0xD9	; 217
     6aa:	0e 94 30 03 	call	0x660	; 0x660 <OLED_write_c>
     6ae:	81 e2       	ldi	r24, 0x21	; 33
     6b0:	0e 94 30 03 	call	0x660	; 0x660 <OLED_write_c>
     6b4:	80 e2       	ldi	r24, 0x20	; 32
     6b6:	0e 94 30 03 	call	0x660	; 0x660 <OLED_write_c>
     6ba:	82 e0       	ldi	r24, 0x02	; 2
     6bc:	0e 94 30 03 	call	0x660	; 0x660 <OLED_write_c>
     6c0:	8b ed       	ldi	r24, 0xDB	; 219
     6c2:	0e 94 30 03 	call	0x660	; 0x660 <OLED_write_c>
     6c6:	80 e3       	ldi	r24, 0x30	; 48
     6c8:	0e 94 30 03 	call	0x660	; 0x660 <OLED_write_c>
     6cc:	8d ea       	ldi	r24, 0xAD	; 173
     6ce:	0e 94 30 03 	call	0x660	; 0x660 <OLED_write_c>
     6d2:	80 e0       	ldi	r24, 0x00	; 0
     6d4:	0e 94 30 03 	call	0x660	; 0x660 <OLED_write_c>
     6d8:	84 ea       	ldi	r24, 0xA4	; 164
     6da:	0e 94 30 03 	call	0x660	; 0x660 <OLED_write_c>
     6de:	86 ea       	ldi	r24, 0xA6	; 166
     6e0:	0e 94 30 03 	call	0x660	; 0x660 <OLED_write_c>
     6e4:	8f ea       	ldi	r24, 0xAF	; 175
     6e6:	0e 94 30 03 	call	0x660	; 0x660 <OLED_write_c>
     6ea:	08 95       	ret

000006ec <OLED_write_d>:
     6ec:	80 93 00 12 	sts	0x1200, r24	; 0x801200 <__bss_end+0xf93>
     6f0:	08 95       	ret

000006f2 <OLED_reset>:
     6f2:	cf 93       	push	r28
     6f4:	80 eb       	ldi	r24, 0xB0	; 176
     6f6:	0e 94 30 03 	call	0x660	; 0x660 <OLED_write_c>
     6fa:	c0 e0       	ldi	r28, 0x00	; 0
     6fc:	04 c0       	rjmp	.+8      	; 0x706 <OLED_reset+0x14>
     6fe:	80 e0       	ldi	r24, 0x00	; 0
     700:	0e 94 76 03 	call	0x6ec	; 0x6ec <OLED_write_d>
     704:	cf 5f       	subi	r28, 0xFF	; 255
     706:	cc 23       	and	r28, r28
     708:	d4 f7       	brge	.-12     	; 0x6fe <OLED_reset+0xc>
     70a:	81 eb       	ldi	r24, 0xB1	; 177
     70c:	0e 94 30 03 	call	0x660	; 0x660 <OLED_write_c>
     710:	c0 e0       	ldi	r28, 0x00	; 0
     712:	04 c0       	rjmp	.+8      	; 0x71c <OLED_reset+0x2a>
     714:	80 e0       	ldi	r24, 0x00	; 0
     716:	0e 94 76 03 	call	0x6ec	; 0x6ec <OLED_write_d>
     71a:	cf 5f       	subi	r28, 0xFF	; 255
     71c:	cc 23       	and	r28, r28
     71e:	d4 f7       	brge	.-12     	; 0x714 <OLED_reset+0x22>
     720:	82 eb       	ldi	r24, 0xB2	; 178
     722:	0e 94 30 03 	call	0x660	; 0x660 <OLED_write_c>
     726:	c0 e0       	ldi	r28, 0x00	; 0
     728:	04 c0       	rjmp	.+8      	; 0x732 <OLED_reset+0x40>
     72a:	80 e0       	ldi	r24, 0x00	; 0
     72c:	0e 94 76 03 	call	0x6ec	; 0x6ec <OLED_write_d>
     730:	cf 5f       	subi	r28, 0xFF	; 255
     732:	cc 23       	and	r28, r28
     734:	d4 f7       	brge	.-12     	; 0x72a <OLED_reset+0x38>
     736:	83 eb       	ldi	r24, 0xB3	; 179
     738:	0e 94 30 03 	call	0x660	; 0x660 <OLED_write_c>
     73c:	c0 e0       	ldi	r28, 0x00	; 0
     73e:	04 c0       	rjmp	.+8      	; 0x748 <OLED_reset+0x56>
     740:	80 e0       	ldi	r24, 0x00	; 0
     742:	0e 94 76 03 	call	0x6ec	; 0x6ec <OLED_write_d>
     746:	cf 5f       	subi	r28, 0xFF	; 255
     748:	cc 23       	and	r28, r28
     74a:	d4 f7       	brge	.-12     	; 0x740 <OLED_reset+0x4e>
     74c:	84 eb       	ldi	r24, 0xB4	; 180
     74e:	0e 94 30 03 	call	0x660	; 0x660 <OLED_write_c>
     752:	c0 e0       	ldi	r28, 0x00	; 0
     754:	04 c0       	rjmp	.+8      	; 0x75e <OLED_reset+0x6c>
     756:	80 e0       	ldi	r24, 0x00	; 0
     758:	0e 94 76 03 	call	0x6ec	; 0x6ec <OLED_write_d>
     75c:	cf 5f       	subi	r28, 0xFF	; 255
     75e:	cc 23       	and	r28, r28
     760:	d4 f7       	brge	.-12     	; 0x756 <OLED_reset+0x64>
     762:	85 eb       	ldi	r24, 0xB5	; 181
     764:	0e 94 30 03 	call	0x660	; 0x660 <OLED_write_c>
     768:	c0 e0       	ldi	r28, 0x00	; 0
     76a:	04 c0       	rjmp	.+8      	; 0x774 <OLED_reset+0x82>
     76c:	80 e0       	ldi	r24, 0x00	; 0
     76e:	0e 94 76 03 	call	0x6ec	; 0x6ec <OLED_write_d>
     772:	cf 5f       	subi	r28, 0xFF	; 255
     774:	cc 23       	and	r28, r28
     776:	d4 f7       	brge	.-12     	; 0x76c <OLED_reset+0x7a>
     778:	86 eb       	ldi	r24, 0xB6	; 182
     77a:	0e 94 30 03 	call	0x660	; 0x660 <OLED_write_c>
     77e:	c0 e0       	ldi	r28, 0x00	; 0
     780:	04 c0       	rjmp	.+8      	; 0x78a <OLED_reset+0x98>
     782:	80 e0       	ldi	r24, 0x00	; 0
     784:	0e 94 76 03 	call	0x6ec	; 0x6ec <OLED_write_d>
     788:	cf 5f       	subi	r28, 0xFF	; 255
     78a:	cc 23       	and	r28, r28
     78c:	d4 f7       	brge	.-12     	; 0x782 <OLED_reset+0x90>
     78e:	87 eb       	ldi	r24, 0xB7	; 183
     790:	0e 94 30 03 	call	0x660	; 0x660 <OLED_write_c>
     794:	c0 e0       	ldi	r28, 0x00	; 0
     796:	04 c0       	rjmp	.+8      	; 0x7a0 <OLED_reset+0xae>
     798:	80 e0       	ldi	r24, 0x00	; 0
     79a:	0e 94 76 03 	call	0x6ec	; 0x6ec <OLED_write_d>
     79e:	cf 5f       	subi	r28, 0xFF	; 255
     7a0:	cc 23       	and	r28, r28
     7a2:	d4 f7       	brge	.-12     	; 0x798 <OLED_reset+0xa6>
     7a4:	cf 91       	pop	r28
     7a6:	08 95       	ret

000007a8 <SPI_init>:
     7a8:	87 b3       	in	r24, 0x17	; 23
     7aa:	80 6b       	ori	r24, 0xB0	; 176
     7ac:	87 bb       	out	0x17, r24	; 23
     7ae:	8d b1       	in	r24, 0x0d	; 13
     7b0:	81 65       	ori	r24, 0x51	; 81
     7b2:	8d b9       	out	0x0d, r24	; 13
     7b4:	88 b3       	in	r24, 0x18	; 24
     7b6:	80 61       	ori	r24, 0x10	; 16
     7b8:	88 bb       	out	0x18, r24	; 24
     7ba:	08 95       	ret

000007bc <SPI_write>:
     7bc:	8f b9       	out	0x0f, r24	; 15
     7be:	77 9b       	sbis	0x0e, 7	; 14
     7c0:	fe cf       	rjmp	.-4      	; 0x7be <SPI_write+0x2>
     7c2:	08 95       	ret

000007c4 <SPI_read>:
     7c4:	8f ef       	ldi	r24, 0xFF	; 255
     7c6:	8f b9       	out	0x0f, r24	; 15
     7c8:	77 9b       	sbis	0x0e, 7	; 14
     7ca:	fe cf       	rjmp	.-4      	; 0x7c8 <SPI_read+0x4>
     7cc:	8f b1       	in	r24, 0x0f	; 15
     7ce:	08 95       	ret

000007d0 <__divmodhi4>:
     7d0:	97 fb       	bst	r25, 7
     7d2:	07 2e       	mov	r0, r23
     7d4:	16 f4       	brtc	.+4      	; 0x7da <__divmodhi4+0xa>
     7d6:	00 94       	com	r0
     7d8:	07 d0       	rcall	.+14     	; 0x7e8 <__divmodhi4_neg1>
     7da:	77 fd       	sbrc	r23, 7
     7dc:	09 d0       	rcall	.+18     	; 0x7f0 <__divmodhi4_neg2>
     7de:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <__udivmodhi4>
     7e2:	07 fc       	sbrc	r0, 7
     7e4:	05 d0       	rcall	.+10     	; 0x7f0 <__divmodhi4_neg2>
     7e6:	3e f4       	brtc	.+14     	; 0x7f6 <__divmodhi4_exit>

000007e8 <__divmodhi4_neg1>:
     7e8:	90 95       	com	r25
     7ea:	81 95       	neg	r24
     7ec:	9f 4f       	sbci	r25, 0xFF	; 255
     7ee:	08 95       	ret

000007f0 <__divmodhi4_neg2>:
     7f0:	70 95       	com	r23
     7f2:	61 95       	neg	r22
     7f4:	7f 4f       	sbci	r23, 0xFF	; 255

000007f6 <__divmodhi4_exit>:
     7f6:	08 95       	ret

000007f8 <__udivmodhi4>:
     7f8:	aa 1b       	sub	r26, r26
     7fa:	bb 1b       	sub	r27, r27
     7fc:	51 e1       	ldi	r21, 0x11	; 17
     7fe:	07 c0       	rjmp	.+14     	; 0x80e <__udivmodhi4_ep>

00000800 <__udivmodhi4_loop>:
     800:	aa 1f       	adc	r26, r26
     802:	bb 1f       	adc	r27, r27
     804:	a6 17       	cp	r26, r22
     806:	b7 07       	cpc	r27, r23
     808:	10 f0       	brcs	.+4      	; 0x80e <__udivmodhi4_ep>
     80a:	a6 1b       	sub	r26, r22
     80c:	b7 0b       	sbc	r27, r23

0000080e <__udivmodhi4_ep>:
     80e:	88 1f       	adc	r24, r24
     810:	99 1f       	adc	r25, r25
     812:	5a 95       	dec	r21
     814:	a9 f7       	brne	.-22     	; 0x800 <__udivmodhi4_loop>
     816:	80 95       	com	r24
     818:	90 95       	com	r25
     81a:	bc 01       	movw	r22, r24
     81c:	cd 01       	movw	r24, r26
     81e:	08 95       	ret

00000820 <fdevopen>:
     820:	0f 93       	push	r16
     822:	1f 93       	push	r17
     824:	cf 93       	push	r28
     826:	df 93       	push	r29
     828:	00 97       	sbiw	r24, 0x00	; 0
     82a:	31 f4       	brne	.+12     	; 0x838 <fdevopen+0x18>
     82c:	61 15       	cp	r22, r1
     82e:	71 05       	cpc	r23, r1
     830:	19 f4       	brne	.+6      	; 0x838 <fdevopen+0x18>
     832:	80 e0       	ldi	r24, 0x00	; 0
     834:	90 e0       	ldi	r25, 0x00	; 0
     836:	3a c0       	rjmp	.+116    	; 0x8ac <fdevopen+0x8c>
     838:	8b 01       	movw	r16, r22
     83a:	ec 01       	movw	r28, r24
     83c:	6e e0       	ldi	r22, 0x0E	; 14
     83e:	70 e0       	ldi	r23, 0x00	; 0
     840:	81 e0       	ldi	r24, 0x01	; 1
     842:	90 e0       	ldi	r25, 0x00	; 0
     844:	0e 94 82 06 	call	0xd04	; 0xd04 <calloc>
     848:	fc 01       	movw	r30, r24
     84a:	89 2b       	or	r24, r25
     84c:	91 f3       	breq	.-28     	; 0x832 <fdevopen+0x12>
     84e:	80 e8       	ldi	r24, 0x80	; 128
     850:	83 83       	std	Z+3, r24	; 0x03
     852:	01 15       	cp	r16, r1
     854:	11 05       	cpc	r17, r1
     856:	71 f0       	breq	.+28     	; 0x874 <fdevopen+0x54>
     858:	13 87       	std	Z+11, r17	; 0x0b
     85a:	02 87       	std	Z+10, r16	; 0x0a
     85c:	81 e8       	ldi	r24, 0x81	; 129
     85e:	83 83       	std	Z+3, r24	; 0x03
     860:	80 91 63 02 	lds	r24, 0x0263	; 0x800263 <__iob>
     864:	90 91 64 02 	lds	r25, 0x0264	; 0x800264 <__iob+0x1>
     868:	89 2b       	or	r24, r25
     86a:	21 f4       	brne	.+8      	; 0x874 <fdevopen+0x54>
     86c:	f0 93 64 02 	sts	0x0264, r31	; 0x800264 <__iob+0x1>
     870:	e0 93 63 02 	sts	0x0263, r30	; 0x800263 <__iob>
     874:	20 97       	sbiw	r28, 0x00	; 0
     876:	c9 f0       	breq	.+50     	; 0x8aa <fdevopen+0x8a>
     878:	d1 87       	std	Z+9, r29	; 0x09
     87a:	c0 87       	std	Z+8, r28	; 0x08
     87c:	83 81       	ldd	r24, Z+3	; 0x03
     87e:	82 60       	ori	r24, 0x02	; 2
     880:	83 83       	std	Z+3, r24	; 0x03
     882:	80 91 65 02 	lds	r24, 0x0265	; 0x800265 <__iob+0x2>
     886:	90 91 66 02 	lds	r25, 0x0266	; 0x800266 <__iob+0x3>
     88a:	89 2b       	or	r24, r25
     88c:	71 f4       	brne	.+28     	; 0x8aa <fdevopen+0x8a>
     88e:	f0 93 66 02 	sts	0x0266, r31	; 0x800266 <__iob+0x3>
     892:	e0 93 65 02 	sts	0x0265, r30	; 0x800265 <__iob+0x2>
     896:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <__iob+0x4>
     89a:	90 91 68 02 	lds	r25, 0x0268	; 0x800268 <__iob+0x5>
     89e:	89 2b       	or	r24, r25
     8a0:	21 f4       	brne	.+8      	; 0x8aa <fdevopen+0x8a>
     8a2:	f0 93 68 02 	sts	0x0268, r31	; 0x800268 <__iob+0x5>
     8a6:	e0 93 67 02 	sts	0x0267, r30	; 0x800267 <__iob+0x4>
     8aa:	cf 01       	movw	r24, r30
     8ac:	df 91       	pop	r29
     8ae:	cf 91       	pop	r28
     8b0:	1f 91       	pop	r17
     8b2:	0f 91       	pop	r16
     8b4:	08 95       	ret

000008b6 <printf>:
     8b6:	a0 e0       	ldi	r26, 0x00	; 0
     8b8:	b0 e0       	ldi	r27, 0x00	; 0
     8ba:	e1 e6       	ldi	r30, 0x61	; 97
     8bc:	f4 e0       	ldi	r31, 0x04	; 4
     8be:	0c 94 86 08 	jmp	0x110c	; 0x110c <__prologue_saves__+0x20>
     8c2:	ae 01       	movw	r20, r28
     8c4:	4b 5f       	subi	r20, 0xFB	; 251
     8c6:	5f 4f       	sbci	r21, 0xFF	; 255
     8c8:	fa 01       	movw	r30, r20
     8ca:	61 91       	ld	r22, Z+
     8cc:	71 91       	ld	r23, Z+
     8ce:	af 01       	movw	r20, r30
     8d0:	80 91 65 02 	lds	r24, 0x0265	; 0x800265 <__iob+0x2>
     8d4:	90 91 66 02 	lds	r25, 0x0266	; 0x800266 <__iob+0x3>
     8d8:	0e 94 a1 04 	call	0x942	; 0x942 <vfprintf>
     8dc:	e2 e0       	ldi	r30, 0x02	; 2
     8de:	0c 94 a2 08 	jmp	0x1144	; 0x1144 <__epilogue_restores__+0x20>

000008e2 <puts>:
     8e2:	0f 93       	push	r16
     8e4:	1f 93       	push	r17
     8e6:	cf 93       	push	r28
     8e8:	df 93       	push	r29
     8ea:	e0 91 65 02 	lds	r30, 0x0265	; 0x800265 <__iob+0x2>
     8ee:	f0 91 66 02 	lds	r31, 0x0266	; 0x800266 <__iob+0x3>
     8f2:	23 81       	ldd	r18, Z+3	; 0x03
     8f4:	21 ff       	sbrs	r18, 1
     8f6:	1b c0       	rjmp	.+54     	; 0x92e <puts+0x4c>
     8f8:	8c 01       	movw	r16, r24
     8fa:	d0 e0       	ldi	r29, 0x00	; 0
     8fc:	c0 e0       	ldi	r28, 0x00	; 0
     8fe:	f8 01       	movw	r30, r16
     900:	81 91       	ld	r24, Z+
     902:	8f 01       	movw	r16, r30
     904:	60 91 65 02 	lds	r22, 0x0265	; 0x800265 <__iob+0x2>
     908:	70 91 66 02 	lds	r23, 0x0266	; 0x800266 <__iob+0x3>
     90c:	db 01       	movw	r26, r22
     90e:	18 96       	adiw	r26, 0x08	; 8
     910:	ed 91       	ld	r30, X+
     912:	fc 91       	ld	r31, X
     914:	19 97       	sbiw	r26, 0x09	; 9
     916:	88 23       	and	r24, r24
     918:	31 f0       	breq	.+12     	; 0x926 <puts+0x44>
     91a:	09 95       	icall
     91c:	89 2b       	or	r24, r25
     91e:	79 f3       	breq	.-34     	; 0x8fe <puts+0x1c>
     920:	df ef       	ldi	r29, 0xFF	; 255
     922:	cf ef       	ldi	r28, 0xFF	; 255
     924:	ec cf       	rjmp	.-40     	; 0x8fe <puts+0x1c>
     926:	8a e0       	ldi	r24, 0x0A	; 10
     928:	09 95       	icall
     92a:	89 2b       	or	r24, r25
     92c:	19 f0       	breq	.+6      	; 0x934 <puts+0x52>
     92e:	8f ef       	ldi	r24, 0xFF	; 255
     930:	9f ef       	ldi	r25, 0xFF	; 255
     932:	02 c0       	rjmp	.+4      	; 0x938 <puts+0x56>
     934:	8d 2f       	mov	r24, r29
     936:	9c 2f       	mov	r25, r28
     938:	df 91       	pop	r29
     93a:	cf 91       	pop	r28
     93c:	1f 91       	pop	r17
     93e:	0f 91       	pop	r16
     940:	08 95       	ret

00000942 <vfprintf>:
     942:	ab e0       	ldi	r26, 0x0B	; 11
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e7 ea       	ldi	r30, 0xA7	; 167
     948:	f4 e0       	ldi	r31, 0x04	; 4
     94a:	0c 94 76 08 	jmp	0x10ec	; 0x10ec <__prologue_saves__>
     94e:	6c 01       	movw	r12, r24
     950:	7b 01       	movw	r14, r22
     952:	8a 01       	movw	r16, r20
     954:	fc 01       	movw	r30, r24
     956:	17 82       	std	Z+7, r1	; 0x07
     958:	16 82       	std	Z+6, r1	; 0x06
     95a:	83 81       	ldd	r24, Z+3	; 0x03
     95c:	81 ff       	sbrs	r24, 1
     95e:	cc c1       	rjmp	.+920    	; 0xcf8 <vfprintf+0x3b6>
     960:	ce 01       	movw	r24, r28
     962:	01 96       	adiw	r24, 0x01	; 1
     964:	3c 01       	movw	r6, r24
     966:	f6 01       	movw	r30, r12
     968:	93 81       	ldd	r25, Z+3	; 0x03
     96a:	f7 01       	movw	r30, r14
     96c:	93 fd       	sbrc	r25, 3
     96e:	85 91       	lpm	r24, Z+
     970:	93 ff       	sbrs	r25, 3
     972:	81 91       	ld	r24, Z+
     974:	7f 01       	movw	r14, r30
     976:	88 23       	and	r24, r24
     978:	09 f4       	brne	.+2      	; 0x97c <vfprintf+0x3a>
     97a:	ba c1       	rjmp	.+884    	; 0xcf0 <vfprintf+0x3ae>
     97c:	85 32       	cpi	r24, 0x25	; 37
     97e:	39 f4       	brne	.+14     	; 0x98e <vfprintf+0x4c>
     980:	93 fd       	sbrc	r25, 3
     982:	85 91       	lpm	r24, Z+
     984:	93 ff       	sbrs	r25, 3
     986:	81 91       	ld	r24, Z+
     988:	7f 01       	movw	r14, r30
     98a:	85 32       	cpi	r24, 0x25	; 37
     98c:	29 f4       	brne	.+10     	; 0x998 <vfprintf+0x56>
     98e:	b6 01       	movw	r22, r12
     990:	90 e0       	ldi	r25, 0x00	; 0
     992:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <fputc>
     996:	e7 cf       	rjmp	.-50     	; 0x966 <vfprintf+0x24>
     998:	91 2c       	mov	r9, r1
     99a:	21 2c       	mov	r2, r1
     99c:	31 2c       	mov	r3, r1
     99e:	ff e1       	ldi	r31, 0x1F	; 31
     9a0:	f3 15       	cp	r31, r3
     9a2:	d8 f0       	brcs	.+54     	; 0x9da <vfprintf+0x98>
     9a4:	8b 32       	cpi	r24, 0x2B	; 43
     9a6:	79 f0       	breq	.+30     	; 0x9c6 <vfprintf+0x84>
     9a8:	38 f4       	brcc	.+14     	; 0x9b8 <vfprintf+0x76>
     9aa:	80 32       	cpi	r24, 0x20	; 32
     9ac:	79 f0       	breq	.+30     	; 0x9cc <vfprintf+0x8a>
     9ae:	83 32       	cpi	r24, 0x23	; 35
     9b0:	a1 f4       	brne	.+40     	; 0x9da <vfprintf+0x98>
     9b2:	23 2d       	mov	r18, r3
     9b4:	20 61       	ori	r18, 0x10	; 16
     9b6:	1d c0       	rjmp	.+58     	; 0x9f2 <vfprintf+0xb0>
     9b8:	8d 32       	cpi	r24, 0x2D	; 45
     9ba:	61 f0       	breq	.+24     	; 0x9d4 <vfprintf+0x92>
     9bc:	80 33       	cpi	r24, 0x30	; 48
     9be:	69 f4       	brne	.+26     	; 0x9da <vfprintf+0x98>
     9c0:	23 2d       	mov	r18, r3
     9c2:	21 60       	ori	r18, 0x01	; 1
     9c4:	16 c0       	rjmp	.+44     	; 0x9f2 <vfprintf+0xb0>
     9c6:	83 2d       	mov	r24, r3
     9c8:	82 60       	ori	r24, 0x02	; 2
     9ca:	38 2e       	mov	r3, r24
     9cc:	e3 2d       	mov	r30, r3
     9ce:	e4 60       	ori	r30, 0x04	; 4
     9d0:	3e 2e       	mov	r3, r30
     9d2:	2a c0       	rjmp	.+84     	; 0xa28 <vfprintf+0xe6>
     9d4:	f3 2d       	mov	r31, r3
     9d6:	f8 60       	ori	r31, 0x08	; 8
     9d8:	1d c0       	rjmp	.+58     	; 0xa14 <vfprintf+0xd2>
     9da:	37 fc       	sbrc	r3, 7
     9dc:	2d c0       	rjmp	.+90     	; 0xa38 <vfprintf+0xf6>
     9de:	20 ed       	ldi	r18, 0xD0	; 208
     9e0:	28 0f       	add	r18, r24
     9e2:	2a 30       	cpi	r18, 0x0A	; 10
     9e4:	40 f0       	brcs	.+16     	; 0x9f6 <vfprintf+0xb4>
     9e6:	8e 32       	cpi	r24, 0x2E	; 46
     9e8:	b9 f4       	brne	.+46     	; 0xa18 <vfprintf+0xd6>
     9ea:	36 fc       	sbrc	r3, 6
     9ec:	81 c1       	rjmp	.+770    	; 0xcf0 <vfprintf+0x3ae>
     9ee:	23 2d       	mov	r18, r3
     9f0:	20 64       	ori	r18, 0x40	; 64
     9f2:	32 2e       	mov	r3, r18
     9f4:	19 c0       	rjmp	.+50     	; 0xa28 <vfprintf+0xe6>
     9f6:	36 fe       	sbrs	r3, 6
     9f8:	06 c0       	rjmp	.+12     	; 0xa06 <vfprintf+0xc4>
     9fa:	8a e0       	ldi	r24, 0x0A	; 10
     9fc:	98 9e       	mul	r9, r24
     9fe:	20 0d       	add	r18, r0
     a00:	11 24       	eor	r1, r1
     a02:	92 2e       	mov	r9, r18
     a04:	11 c0       	rjmp	.+34     	; 0xa28 <vfprintf+0xe6>
     a06:	ea e0       	ldi	r30, 0x0A	; 10
     a08:	2e 9e       	mul	r2, r30
     a0a:	20 0d       	add	r18, r0
     a0c:	11 24       	eor	r1, r1
     a0e:	22 2e       	mov	r2, r18
     a10:	f3 2d       	mov	r31, r3
     a12:	f0 62       	ori	r31, 0x20	; 32
     a14:	3f 2e       	mov	r3, r31
     a16:	08 c0       	rjmp	.+16     	; 0xa28 <vfprintf+0xe6>
     a18:	8c 36       	cpi	r24, 0x6C	; 108
     a1a:	21 f4       	brne	.+8      	; 0xa24 <vfprintf+0xe2>
     a1c:	83 2d       	mov	r24, r3
     a1e:	80 68       	ori	r24, 0x80	; 128
     a20:	38 2e       	mov	r3, r24
     a22:	02 c0       	rjmp	.+4      	; 0xa28 <vfprintf+0xe6>
     a24:	88 36       	cpi	r24, 0x68	; 104
     a26:	41 f4       	brne	.+16     	; 0xa38 <vfprintf+0xf6>
     a28:	f7 01       	movw	r30, r14
     a2a:	93 fd       	sbrc	r25, 3
     a2c:	85 91       	lpm	r24, Z+
     a2e:	93 ff       	sbrs	r25, 3
     a30:	81 91       	ld	r24, Z+
     a32:	7f 01       	movw	r14, r30
     a34:	81 11       	cpse	r24, r1
     a36:	b3 cf       	rjmp	.-154    	; 0x99e <vfprintf+0x5c>
     a38:	98 2f       	mov	r25, r24
     a3a:	9f 7d       	andi	r25, 0xDF	; 223
     a3c:	95 54       	subi	r25, 0x45	; 69
     a3e:	93 30       	cpi	r25, 0x03	; 3
     a40:	28 f4       	brcc	.+10     	; 0xa4c <vfprintf+0x10a>
     a42:	0c 5f       	subi	r16, 0xFC	; 252
     a44:	1f 4f       	sbci	r17, 0xFF	; 255
     a46:	9f e3       	ldi	r25, 0x3F	; 63
     a48:	99 83       	std	Y+1, r25	; 0x01
     a4a:	0d c0       	rjmp	.+26     	; 0xa66 <vfprintf+0x124>
     a4c:	83 36       	cpi	r24, 0x63	; 99
     a4e:	31 f0       	breq	.+12     	; 0xa5c <vfprintf+0x11a>
     a50:	83 37       	cpi	r24, 0x73	; 115
     a52:	71 f0       	breq	.+28     	; 0xa70 <vfprintf+0x12e>
     a54:	83 35       	cpi	r24, 0x53	; 83
     a56:	09 f0       	breq	.+2      	; 0xa5a <vfprintf+0x118>
     a58:	59 c0       	rjmp	.+178    	; 0xb0c <vfprintf+0x1ca>
     a5a:	21 c0       	rjmp	.+66     	; 0xa9e <vfprintf+0x15c>
     a5c:	f8 01       	movw	r30, r16
     a5e:	80 81       	ld	r24, Z
     a60:	89 83       	std	Y+1, r24	; 0x01
     a62:	0e 5f       	subi	r16, 0xFE	; 254
     a64:	1f 4f       	sbci	r17, 0xFF	; 255
     a66:	88 24       	eor	r8, r8
     a68:	83 94       	inc	r8
     a6a:	91 2c       	mov	r9, r1
     a6c:	53 01       	movw	r10, r6
     a6e:	13 c0       	rjmp	.+38     	; 0xa96 <vfprintf+0x154>
     a70:	28 01       	movw	r4, r16
     a72:	f2 e0       	ldi	r31, 0x02	; 2
     a74:	4f 0e       	add	r4, r31
     a76:	51 1c       	adc	r5, r1
     a78:	f8 01       	movw	r30, r16
     a7a:	a0 80       	ld	r10, Z
     a7c:	b1 80       	ldd	r11, Z+1	; 0x01
     a7e:	36 fe       	sbrs	r3, 6
     a80:	03 c0       	rjmp	.+6      	; 0xa88 <vfprintf+0x146>
     a82:	69 2d       	mov	r22, r9
     a84:	70 e0       	ldi	r23, 0x00	; 0
     a86:	02 c0       	rjmp	.+4      	; 0xa8c <vfprintf+0x14a>
     a88:	6f ef       	ldi	r22, 0xFF	; 255
     a8a:	7f ef       	ldi	r23, 0xFF	; 255
     a8c:	c5 01       	movw	r24, r10
     a8e:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <strnlen>
     a92:	4c 01       	movw	r8, r24
     a94:	82 01       	movw	r16, r4
     a96:	f3 2d       	mov	r31, r3
     a98:	ff 77       	andi	r31, 0x7F	; 127
     a9a:	3f 2e       	mov	r3, r31
     a9c:	16 c0       	rjmp	.+44     	; 0xaca <vfprintf+0x188>
     a9e:	28 01       	movw	r4, r16
     aa0:	22 e0       	ldi	r18, 0x02	; 2
     aa2:	42 0e       	add	r4, r18
     aa4:	51 1c       	adc	r5, r1
     aa6:	f8 01       	movw	r30, r16
     aa8:	a0 80       	ld	r10, Z
     aaa:	b1 80       	ldd	r11, Z+1	; 0x01
     aac:	36 fe       	sbrs	r3, 6
     aae:	03 c0       	rjmp	.+6      	; 0xab6 <vfprintf+0x174>
     ab0:	69 2d       	mov	r22, r9
     ab2:	70 e0       	ldi	r23, 0x00	; 0
     ab4:	02 c0       	rjmp	.+4      	; 0xaba <vfprintf+0x178>
     ab6:	6f ef       	ldi	r22, 0xFF	; 255
     ab8:	7f ef       	ldi	r23, 0xFF	; 255
     aba:	c5 01       	movw	r24, r10
     abc:	0e 94 bf 07 	call	0xf7e	; 0xf7e <strnlen_P>
     ac0:	4c 01       	movw	r8, r24
     ac2:	f3 2d       	mov	r31, r3
     ac4:	f0 68       	ori	r31, 0x80	; 128
     ac6:	3f 2e       	mov	r3, r31
     ac8:	82 01       	movw	r16, r4
     aca:	33 fc       	sbrc	r3, 3
     acc:	1b c0       	rjmp	.+54     	; 0xb04 <vfprintf+0x1c2>
     ace:	82 2d       	mov	r24, r2
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	88 16       	cp	r8, r24
     ad4:	99 06       	cpc	r9, r25
     ad6:	b0 f4       	brcc	.+44     	; 0xb04 <vfprintf+0x1c2>
     ad8:	b6 01       	movw	r22, r12
     ada:	80 e2       	ldi	r24, 0x20	; 32
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <fputc>
     ae2:	2a 94       	dec	r2
     ae4:	f4 cf       	rjmp	.-24     	; 0xace <vfprintf+0x18c>
     ae6:	f5 01       	movw	r30, r10
     ae8:	37 fc       	sbrc	r3, 7
     aea:	85 91       	lpm	r24, Z+
     aec:	37 fe       	sbrs	r3, 7
     aee:	81 91       	ld	r24, Z+
     af0:	5f 01       	movw	r10, r30
     af2:	b6 01       	movw	r22, r12
     af4:	90 e0       	ldi	r25, 0x00	; 0
     af6:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <fputc>
     afa:	21 10       	cpse	r2, r1
     afc:	2a 94       	dec	r2
     afe:	21 e0       	ldi	r18, 0x01	; 1
     b00:	82 1a       	sub	r8, r18
     b02:	91 08       	sbc	r9, r1
     b04:	81 14       	cp	r8, r1
     b06:	91 04       	cpc	r9, r1
     b08:	71 f7       	brne	.-36     	; 0xae6 <vfprintf+0x1a4>
     b0a:	e8 c0       	rjmp	.+464    	; 0xcdc <vfprintf+0x39a>
     b0c:	84 36       	cpi	r24, 0x64	; 100
     b0e:	11 f0       	breq	.+4      	; 0xb14 <vfprintf+0x1d2>
     b10:	89 36       	cpi	r24, 0x69	; 105
     b12:	41 f5       	brne	.+80     	; 0xb64 <vfprintf+0x222>
     b14:	f8 01       	movw	r30, r16
     b16:	37 fe       	sbrs	r3, 7
     b18:	07 c0       	rjmp	.+14     	; 0xb28 <vfprintf+0x1e6>
     b1a:	60 81       	ld	r22, Z
     b1c:	71 81       	ldd	r23, Z+1	; 0x01
     b1e:	82 81       	ldd	r24, Z+2	; 0x02
     b20:	93 81       	ldd	r25, Z+3	; 0x03
     b22:	0c 5f       	subi	r16, 0xFC	; 252
     b24:	1f 4f       	sbci	r17, 0xFF	; 255
     b26:	08 c0       	rjmp	.+16     	; 0xb38 <vfprintf+0x1f6>
     b28:	60 81       	ld	r22, Z
     b2a:	71 81       	ldd	r23, Z+1	; 0x01
     b2c:	07 2e       	mov	r0, r23
     b2e:	00 0c       	add	r0, r0
     b30:	88 0b       	sbc	r24, r24
     b32:	99 0b       	sbc	r25, r25
     b34:	0e 5f       	subi	r16, 0xFE	; 254
     b36:	1f 4f       	sbci	r17, 0xFF	; 255
     b38:	f3 2d       	mov	r31, r3
     b3a:	ff 76       	andi	r31, 0x6F	; 111
     b3c:	3f 2e       	mov	r3, r31
     b3e:	97 ff       	sbrs	r25, 7
     b40:	09 c0       	rjmp	.+18     	; 0xb54 <vfprintf+0x212>
     b42:	90 95       	com	r25
     b44:	80 95       	com	r24
     b46:	70 95       	com	r23
     b48:	61 95       	neg	r22
     b4a:	7f 4f       	sbci	r23, 0xFF	; 255
     b4c:	8f 4f       	sbci	r24, 0xFF	; 255
     b4e:	9f 4f       	sbci	r25, 0xFF	; 255
     b50:	f0 68       	ori	r31, 0x80	; 128
     b52:	3f 2e       	mov	r3, r31
     b54:	2a e0       	ldi	r18, 0x0A	; 10
     b56:	30 e0       	ldi	r19, 0x00	; 0
     b58:	a3 01       	movw	r20, r6
     b5a:	0e 94 18 08 	call	0x1030	; 0x1030 <__ultoa_invert>
     b5e:	88 2e       	mov	r8, r24
     b60:	86 18       	sub	r8, r6
     b62:	45 c0       	rjmp	.+138    	; 0xbee <vfprintf+0x2ac>
     b64:	85 37       	cpi	r24, 0x75	; 117
     b66:	31 f4       	brne	.+12     	; 0xb74 <vfprintf+0x232>
     b68:	23 2d       	mov	r18, r3
     b6a:	2f 7e       	andi	r18, 0xEF	; 239
     b6c:	b2 2e       	mov	r11, r18
     b6e:	2a e0       	ldi	r18, 0x0A	; 10
     b70:	30 e0       	ldi	r19, 0x00	; 0
     b72:	25 c0       	rjmp	.+74     	; 0xbbe <vfprintf+0x27c>
     b74:	93 2d       	mov	r25, r3
     b76:	99 7f       	andi	r25, 0xF9	; 249
     b78:	b9 2e       	mov	r11, r25
     b7a:	8f 36       	cpi	r24, 0x6F	; 111
     b7c:	c1 f0       	breq	.+48     	; 0xbae <vfprintf+0x26c>
     b7e:	18 f4       	brcc	.+6      	; 0xb86 <vfprintf+0x244>
     b80:	88 35       	cpi	r24, 0x58	; 88
     b82:	79 f0       	breq	.+30     	; 0xba2 <vfprintf+0x260>
     b84:	b5 c0       	rjmp	.+362    	; 0xcf0 <vfprintf+0x3ae>
     b86:	80 37       	cpi	r24, 0x70	; 112
     b88:	19 f0       	breq	.+6      	; 0xb90 <vfprintf+0x24e>
     b8a:	88 37       	cpi	r24, 0x78	; 120
     b8c:	21 f0       	breq	.+8      	; 0xb96 <vfprintf+0x254>
     b8e:	b0 c0       	rjmp	.+352    	; 0xcf0 <vfprintf+0x3ae>
     b90:	e9 2f       	mov	r30, r25
     b92:	e0 61       	ori	r30, 0x10	; 16
     b94:	be 2e       	mov	r11, r30
     b96:	b4 fe       	sbrs	r11, 4
     b98:	0d c0       	rjmp	.+26     	; 0xbb4 <vfprintf+0x272>
     b9a:	fb 2d       	mov	r31, r11
     b9c:	f4 60       	ori	r31, 0x04	; 4
     b9e:	bf 2e       	mov	r11, r31
     ba0:	09 c0       	rjmp	.+18     	; 0xbb4 <vfprintf+0x272>
     ba2:	34 fe       	sbrs	r3, 4
     ba4:	0a c0       	rjmp	.+20     	; 0xbba <vfprintf+0x278>
     ba6:	29 2f       	mov	r18, r25
     ba8:	26 60       	ori	r18, 0x06	; 6
     baa:	b2 2e       	mov	r11, r18
     bac:	06 c0       	rjmp	.+12     	; 0xbba <vfprintf+0x278>
     bae:	28 e0       	ldi	r18, 0x08	; 8
     bb0:	30 e0       	ldi	r19, 0x00	; 0
     bb2:	05 c0       	rjmp	.+10     	; 0xbbe <vfprintf+0x27c>
     bb4:	20 e1       	ldi	r18, 0x10	; 16
     bb6:	30 e0       	ldi	r19, 0x00	; 0
     bb8:	02 c0       	rjmp	.+4      	; 0xbbe <vfprintf+0x27c>
     bba:	20 e1       	ldi	r18, 0x10	; 16
     bbc:	32 e0       	ldi	r19, 0x02	; 2
     bbe:	f8 01       	movw	r30, r16
     bc0:	b7 fe       	sbrs	r11, 7
     bc2:	07 c0       	rjmp	.+14     	; 0xbd2 <vfprintf+0x290>
     bc4:	60 81       	ld	r22, Z
     bc6:	71 81       	ldd	r23, Z+1	; 0x01
     bc8:	82 81       	ldd	r24, Z+2	; 0x02
     bca:	93 81       	ldd	r25, Z+3	; 0x03
     bcc:	0c 5f       	subi	r16, 0xFC	; 252
     bce:	1f 4f       	sbci	r17, 0xFF	; 255
     bd0:	06 c0       	rjmp	.+12     	; 0xbde <vfprintf+0x29c>
     bd2:	60 81       	ld	r22, Z
     bd4:	71 81       	ldd	r23, Z+1	; 0x01
     bd6:	80 e0       	ldi	r24, 0x00	; 0
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	0e 5f       	subi	r16, 0xFE	; 254
     bdc:	1f 4f       	sbci	r17, 0xFF	; 255
     bde:	a3 01       	movw	r20, r6
     be0:	0e 94 18 08 	call	0x1030	; 0x1030 <__ultoa_invert>
     be4:	88 2e       	mov	r8, r24
     be6:	86 18       	sub	r8, r6
     be8:	fb 2d       	mov	r31, r11
     bea:	ff 77       	andi	r31, 0x7F	; 127
     bec:	3f 2e       	mov	r3, r31
     bee:	36 fe       	sbrs	r3, 6
     bf0:	0d c0       	rjmp	.+26     	; 0xc0c <vfprintf+0x2ca>
     bf2:	23 2d       	mov	r18, r3
     bf4:	2e 7f       	andi	r18, 0xFE	; 254
     bf6:	a2 2e       	mov	r10, r18
     bf8:	89 14       	cp	r8, r9
     bfa:	58 f4       	brcc	.+22     	; 0xc12 <vfprintf+0x2d0>
     bfc:	34 fe       	sbrs	r3, 4
     bfe:	0b c0       	rjmp	.+22     	; 0xc16 <vfprintf+0x2d4>
     c00:	32 fc       	sbrc	r3, 2
     c02:	09 c0       	rjmp	.+18     	; 0xc16 <vfprintf+0x2d4>
     c04:	83 2d       	mov	r24, r3
     c06:	8e 7e       	andi	r24, 0xEE	; 238
     c08:	a8 2e       	mov	r10, r24
     c0a:	05 c0       	rjmp	.+10     	; 0xc16 <vfprintf+0x2d4>
     c0c:	b8 2c       	mov	r11, r8
     c0e:	a3 2c       	mov	r10, r3
     c10:	03 c0       	rjmp	.+6      	; 0xc18 <vfprintf+0x2d6>
     c12:	b8 2c       	mov	r11, r8
     c14:	01 c0       	rjmp	.+2      	; 0xc18 <vfprintf+0x2d6>
     c16:	b9 2c       	mov	r11, r9
     c18:	a4 fe       	sbrs	r10, 4
     c1a:	0f c0       	rjmp	.+30     	; 0xc3a <vfprintf+0x2f8>
     c1c:	fe 01       	movw	r30, r28
     c1e:	e8 0d       	add	r30, r8
     c20:	f1 1d       	adc	r31, r1
     c22:	80 81       	ld	r24, Z
     c24:	80 33       	cpi	r24, 0x30	; 48
     c26:	21 f4       	brne	.+8      	; 0xc30 <vfprintf+0x2ee>
     c28:	9a 2d       	mov	r25, r10
     c2a:	99 7e       	andi	r25, 0xE9	; 233
     c2c:	a9 2e       	mov	r10, r25
     c2e:	09 c0       	rjmp	.+18     	; 0xc42 <vfprintf+0x300>
     c30:	a2 fe       	sbrs	r10, 2
     c32:	06 c0       	rjmp	.+12     	; 0xc40 <vfprintf+0x2fe>
     c34:	b3 94       	inc	r11
     c36:	b3 94       	inc	r11
     c38:	04 c0       	rjmp	.+8      	; 0xc42 <vfprintf+0x300>
     c3a:	8a 2d       	mov	r24, r10
     c3c:	86 78       	andi	r24, 0x86	; 134
     c3e:	09 f0       	breq	.+2      	; 0xc42 <vfprintf+0x300>
     c40:	b3 94       	inc	r11
     c42:	a3 fc       	sbrc	r10, 3
     c44:	11 c0       	rjmp	.+34     	; 0xc68 <vfprintf+0x326>
     c46:	a0 fe       	sbrs	r10, 0
     c48:	06 c0       	rjmp	.+12     	; 0xc56 <vfprintf+0x314>
     c4a:	b2 14       	cp	r11, r2
     c4c:	88 f4       	brcc	.+34     	; 0xc70 <vfprintf+0x32e>
     c4e:	28 0c       	add	r2, r8
     c50:	92 2c       	mov	r9, r2
     c52:	9b 18       	sub	r9, r11
     c54:	0e c0       	rjmp	.+28     	; 0xc72 <vfprintf+0x330>
     c56:	b2 14       	cp	r11, r2
     c58:	60 f4       	brcc	.+24     	; 0xc72 <vfprintf+0x330>
     c5a:	b6 01       	movw	r22, r12
     c5c:	80 e2       	ldi	r24, 0x20	; 32
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <fputc>
     c64:	b3 94       	inc	r11
     c66:	f7 cf       	rjmp	.-18     	; 0xc56 <vfprintf+0x314>
     c68:	b2 14       	cp	r11, r2
     c6a:	18 f4       	brcc	.+6      	; 0xc72 <vfprintf+0x330>
     c6c:	2b 18       	sub	r2, r11
     c6e:	02 c0       	rjmp	.+4      	; 0xc74 <vfprintf+0x332>
     c70:	98 2c       	mov	r9, r8
     c72:	21 2c       	mov	r2, r1
     c74:	a4 fe       	sbrs	r10, 4
     c76:	10 c0       	rjmp	.+32     	; 0xc98 <vfprintf+0x356>
     c78:	b6 01       	movw	r22, r12
     c7a:	80 e3       	ldi	r24, 0x30	; 48
     c7c:	90 e0       	ldi	r25, 0x00	; 0
     c7e:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <fputc>
     c82:	a2 fe       	sbrs	r10, 2
     c84:	17 c0       	rjmp	.+46     	; 0xcb4 <vfprintf+0x372>
     c86:	a1 fc       	sbrc	r10, 1
     c88:	03 c0       	rjmp	.+6      	; 0xc90 <vfprintf+0x34e>
     c8a:	88 e7       	ldi	r24, 0x78	; 120
     c8c:	90 e0       	ldi	r25, 0x00	; 0
     c8e:	02 c0       	rjmp	.+4      	; 0xc94 <vfprintf+0x352>
     c90:	88 e5       	ldi	r24, 0x58	; 88
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	b6 01       	movw	r22, r12
     c96:	0c c0       	rjmp	.+24     	; 0xcb0 <vfprintf+0x36e>
     c98:	8a 2d       	mov	r24, r10
     c9a:	86 78       	andi	r24, 0x86	; 134
     c9c:	59 f0       	breq	.+22     	; 0xcb4 <vfprintf+0x372>
     c9e:	a1 fe       	sbrs	r10, 1
     ca0:	02 c0       	rjmp	.+4      	; 0xca6 <vfprintf+0x364>
     ca2:	8b e2       	ldi	r24, 0x2B	; 43
     ca4:	01 c0       	rjmp	.+2      	; 0xca8 <vfprintf+0x366>
     ca6:	80 e2       	ldi	r24, 0x20	; 32
     ca8:	a7 fc       	sbrc	r10, 7
     caa:	8d e2       	ldi	r24, 0x2D	; 45
     cac:	b6 01       	movw	r22, r12
     cae:	90 e0       	ldi	r25, 0x00	; 0
     cb0:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <fputc>
     cb4:	89 14       	cp	r8, r9
     cb6:	38 f4       	brcc	.+14     	; 0xcc6 <vfprintf+0x384>
     cb8:	b6 01       	movw	r22, r12
     cba:	80 e3       	ldi	r24, 0x30	; 48
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <fputc>
     cc2:	9a 94       	dec	r9
     cc4:	f7 cf       	rjmp	.-18     	; 0xcb4 <vfprintf+0x372>
     cc6:	8a 94       	dec	r8
     cc8:	f3 01       	movw	r30, r6
     cca:	e8 0d       	add	r30, r8
     ccc:	f1 1d       	adc	r31, r1
     cce:	80 81       	ld	r24, Z
     cd0:	b6 01       	movw	r22, r12
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <fputc>
     cd8:	81 10       	cpse	r8, r1
     cda:	f5 cf       	rjmp	.-22     	; 0xcc6 <vfprintf+0x384>
     cdc:	22 20       	and	r2, r2
     cde:	09 f4       	brne	.+2      	; 0xce2 <vfprintf+0x3a0>
     ce0:	42 ce       	rjmp	.-892    	; 0x966 <vfprintf+0x24>
     ce2:	b6 01       	movw	r22, r12
     ce4:	80 e2       	ldi	r24, 0x20	; 32
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <fputc>
     cec:	2a 94       	dec	r2
     cee:	f6 cf       	rjmp	.-20     	; 0xcdc <vfprintf+0x39a>
     cf0:	f6 01       	movw	r30, r12
     cf2:	86 81       	ldd	r24, Z+6	; 0x06
     cf4:	97 81       	ldd	r25, Z+7	; 0x07
     cf6:	02 c0       	rjmp	.+4      	; 0xcfc <vfprintf+0x3ba>
     cf8:	8f ef       	ldi	r24, 0xFF	; 255
     cfa:	9f ef       	ldi	r25, 0xFF	; 255
     cfc:	2b 96       	adiw	r28, 0x0b	; 11
     cfe:	e2 e1       	ldi	r30, 0x12	; 18
     d00:	0c 94 92 08 	jmp	0x1124	; 0x1124 <__epilogue_restores__>

00000d04 <calloc>:
     d04:	0f 93       	push	r16
     d06:	1f 93       	push	r17
     d08:	cf 93       	push	r28
     d0a:	df 93       	push	r29
     d0c:	86 9f       	mul	r24, r22
     d0e:	80 01       	movw	r16, r0
     d10:	87 9f       	mul	r24, r23
     d12:	10 0d       	add	r17, r0
     d14:	96 9f       	mul	r25, r22
     d16:	10 0d       	add	r17, r0
     d18:	11 24       	eor	r1, r1
     d1a:	c8 01       	movw	r24, r16
     d1c:	0e 94 9e 06 	call	0xd3c	; 0xd3c <malloc>
     d20:	ec 01       	movw	r28, r24
     d22:	00 97       	sbiw	r24, 0x00	; 0
     d24:	29 f0       	breq	.+10     	; 0xd30 <calloc+0x2c>
     d26:	a8 01       	movw	r20, r16
     d28:	60 e0       	ldi	r22, 0x00	; 0
     d2a:	70 e0       	ldi	r23, 0x00	; 0
     d2c:	0e 94 ca 07 	call	0xf94	; 0xf94 <memset>
     d30:	ce 01       	movw	r24, r28
     d32:	df 91       	pop	r29
     d34:	cf 91       	pop	r28
     d36:	1f 91       	pop	r17
     d38:	0f 91       	pop	r16
     d3a:	08 95       	ret

00000d3c <malloc>:
     d3c:	0f 93       	push	r16
     d3e:	1f 93       	push	r17
     d40:	cf 93       	push	r28
     d42:	df 93       	push	r29
     d44:	82 30       	cpi	r24, 0x02	; 2
     d46:	91 05       	cpc	r25, r1
     d48:	10 f4       	brcc	.+4      	; 0xd4e <malloc+0x12>
     d4a:	82 e0       	ldi	r24, 0x02	; 2
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	e0 91 6b 02 	lds	r30, 0x026B	; 0x80026b <__flp>
     d52:	f0 91 6c 02 	lds	r31, 0x026C	; 0x80026c <__flp+0x1>
     d56:	20 e0       	ldi	r18, 0x00	; 0
     d58:	30 e0       	ldi	r19, 0x00	; 0
     d5a:	a0 e0       	ldi	r26, 0x00	; 0
     d5c:	b0 e0       	ldi	r27, 0x00	; 0
     d5e:	30 97       	sbiw	r30, 0x00	; 0
     d60:	19 f1       	breq	.+70     	; 0xda8 <malloc+0x6c>
     d62:	40 81       	ld	r20, Z
     d64:	51 81       	ldd	r21, Z+1	; 0x01
     d66:	02 81       	ldd	r16, Z+2	; 0x02
     d68:	13 81       	ldd	r17, Z+3	; 0x03
     d6a:	48 17       	cp	r20, r24
     d6c:	59 07       	cpc	r21, r25
     d6e:	c8 f0       	brcs	.+50     	; 0xda2 <malloc+0x66>
     d70:	84 17       	cp	r24, r20
     d72:	95 07       	cpc	r25, r21
     d74:	69 f4       	brne	.+26     	; 0xd90 <malloc+0x54>
     d76:	10 97       	sbiw	r26, 0x00	; 0
     d78:	31 f0       	breq	.+12     	; 0xd86 <malloc+0x4a>
     d7a:	12 96       	adiw	r26, 0x02	; 2
     d7c:	0c 93       	st	X, r16
     d7e:	12 97       	sbiw	r26, 0x02	; 2
     d80:	13 96       	adiw	r26, 0x03	; 3
     d82:	1c 93       	st	X, r17
     d84:	27 c0       	rjmp	.+78     	; 0xdd4 <malloc+0x98>
     d86:	00 93 6b 02 	sts	0x026B, r16	; 0x80026b <__flp>
     d8a:	10 93 6c 02 	sts	0x026C, r17	; 0x80026c <__flp+0x1>
     d8e:	22 c0       	rjmp	.+68     	; 0xdd4 <malloc+0x98>
     d90:	21 15       	cp	r18, r1
     d92:	31 05       	cpc	r19, r1
     d94:	19 f0       	breq	.+6      	; 0xd9c <malloc+0x60>
     d96:	42 17       	cp	r20, r18
     d98:	53 07       	cpc	r21, r19
     d9a:	18 f4       	brcc	.+6      	; 0xda2 <malloc+0x66>
     d9c:	9a 01       	movw	r18, r20
     d9e:	bd 01       	movw	r22, r26
     da0:	ef 01       	movw	r28, r30
     da2:	df 01       	movw	r26, r30
     da4:	f8 01       	movw	r30, r16
     da6:	db cf       	rjmp	.-74     	; 0xd5e <malloc+0x22>
     da8:	21 15       	cp	r18, r1
     daa:	31 05       	cpc	r19, r1
     dac:	f9 f0       	breq	.+62     	; 0xdec <malloc+0xb0>
     dae:	28 1b       	sub	r18, r24
     db0:	39 0b       	sbc	r19, r25
     db2:	24 30       	cpi	r18, 0x04	; 4
     db4:	31 05       	cpc	r19, r1
     db6:	80 f4       	brcc	.+32     	; 0xdd8 <malloc+0x9c>
     db8:	8a 81       	ldd	r24, Y+2	; 0x02
     dba:	9b 81       	ldd	r25, Y+3	; 0x03
     dbc:	61 15       	cp	r22, r1
     dbe:	71 05       	cpc	r23, r1
     dc0:	21 f0       	breq	.+8      	; 0xdca <malloc+0x8e>
     dc2:	fb 01       	movw	r30, r22
     dc4:	93 83       	std	Z+3, r25	; 0x03
     dc6:	82 83       	std	Z+2, r24	; 0x02
     dc8:	04 c0       	rjmp	.+8      	; 0xdd2 <malloc+0x96>
     dca:	90 93 6c 02 	sts	0x026C, r25	; 0x80026c <__flp+0x1>
     dce:	80 93 6b 02 	sts	0x026B, r24	; 0x80026b <__flp>
     dd2:	fe 01       	movw	r30, r28
     dd4:	32 96       	adiw	r30, 0x02	; 2
     dd6:	44 c0       	rjmp	.+136    	; 0xe60 <malloc+0x124>
     dd8:	fe 01       	movw	r30, r28
     dda:	e2 0f       	add	r30, r18
     ddc:	f3 1f       	adc	r31, r19
     dde:	81 93       	st	Z+, r24
     de0:	91 93       	st	Z+, r25
     de2:	22 50       	subi	r18, 0x02	; 2
     de4:	31 09       	sbc	r19, r1
     de6:	39 83       	std	Y+1, r19	; 0x01
     de8:	28 83       	st	Y, r18
     dea:	3a c0       	rjmp	.+116    	; 0xe60 <malloc+0x124>
     dec:	20 91 69 02 	lds	r18, 0x0269	; 0x800269 <__brkval>
     df0:	30 91 6a 02 	lds	r19, 0x026A	; 0x80026a <__brkval+0x1>
     df4:	23 2b       	or	r18, r19
     df6:	41 f4       	brne	.+16     	; 0xe08 <malloc+0xcc>
     df8:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
     dfc:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
     e00:	30 93 6a 02 	sts	0x026A, r19	; 0x80026a <__brkval+0x1>
     e04:	20 93 69 02 	sts	0x0269, r18	; 0x800269 <__brkval>
     e08:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     e0c:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     e10:	21 15       	cp	r18, r1
     e12:	31 05       	cpc	r19, r1
     e14:	41 f4       	brne	.+16     	; 0xe26 <malloc+0xea>
     e16:	2d b7       	in	r18, 0x3d	; 61
     e18:	3e b7       	in	r19, 0x3e	; 62
     e1a:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
     e1e:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
     e22:	24 1b       	sub	r18, r20
     e24:	35 0b       	sbc	r19, r21
     e26:	e0 91 69 02 	lds	r30, 0x0269	; 0x800269 <__brkval>
     e2a:	f0 91 6a 02 	lds	r31, 0x026A	; 0x80026a <__brkval+0x1>
     e2e:	e2 17       	cp	r30, r18
     e30:	f3 07       	cpc	r31, r19
     e32:	a0 f4       	brcc	.+40     	; 0xe5c <malloc+0x120>
     e34:	2e 1b       	sub	r18, r30
     e36:	3f 0b       	sbc	r19, r31
     e38:	28 17       	cp	r18, r24
     e3a:	39 07       	cpc	r19, r25
     e3c:	78 f0       	brcs	.+30     	; 0xe5c <malloc+0x120>
     e3e:	ac 01       	movw	r20, r24
     e40:	4e 5f       	subi	r20, 0xFE	; 254
     e42:	5f 4f       	sbci	r21, 0xFF	; 255
     e44:	24 17       	cp	r18, r20
     e46:	35 07       	cpc	r19, r21
     e48:	48 f0       	brcs	.+18     	; 0xe5c <malloc+0x120>
     e4a:	4e 0f       	add	r20, r30
     e4c:	5f 1f       	adc	r21, r31
     e4e:	50 93 6a 02 	sts	0x026A, r21	; 0x80026a <__brkval+0x1>
     e52:	40 93 69 02 	sts	0x0269, r20	; 0x800269 <__brkval>
     e56:	81 93       	st	Z+, r24
     e58:	91 93       	st	Z+, r25
     e5a:	02 c0       	rjmp	.+4      	; 0xe60 <malloc+0x124>
     e5c:	e0 e0       	ldi	r30, 0x00	; 0
     e5e:	f0 e0       	ldi	r31, 0x00	; 0
     e60:	cf 01       	movw	r24, r30
     e62:	df 91       	pop	r29
     e64:	cf 91       	pop	r28
     e66:	1f 91       	pop	r17
     e68:	0f 91       	pop	r16
     e6a:	08 95       	ret

00000e6c <free>:
     e6c:	cf 93       	push	r28
     e6e:	df 93       	push	r29
     e70:	00 97       	sbiw	r24, 0x00	; 0
     e72:	09 f4       	brne	.+2      	; 0xe76 <free+0xa>
     e74:	81 c0       	rjmp	.+258    	; 0xf78 <free+0x10c>
     e76:	fc 01       	movw	r30, r24
     e78:	32 97       	sbiw	r30, 0x02	; 2
     e7a:	13 82       	std	Z+3, r1	; 0x03
     e7c:	12 82       	std	Z+2, r1	; 0x02
     e7e:	a0 91 6b 02 	lds	r26, 0x026B	; 0x80026b <__flp>
     e82:	b0 91 6c 02 	lds	r27, 0x026C	; 0x80026c <__flp+0x1>
     e86:	10 97       	sbiw	r26, 0x00	; 0
     e88:	81 f4       	brne	.+32     	; 0xeaa <free+0x3e>
     e8a:	20 81       	ld	r18, Z
     e8c:	31 81       	ldd	r19, Z+1	; 0x01
     e8e:	82 0f       	add	r24, r18
     e90:	93 1f       	adc	r25, r19
     e92:	20 91 69 02 	lds	r18, 0x0269	; 0x800269 <__brkval>
     e96:	30 91 6a 02 	lds	r19, 0x026A	; 0x80026a <__brkval+0x1>
     e9a:	28 17       	cp	r18, r24
     e9c:	39 07       	cpc	r19, r25
     e9e:	51 f5       	brne	.+84     	; 0xef4 <free+0x88>
     ea0:	f0 93 6a 02 	sts	0x026A, r31	; 0x80026a <__brkval+0x1>
     ea4:	e0 93 69 02 	sts	0x0269, r30	; 0x800269 <__brkval>
     ea8:	67 c0       	rjmp	.+206    	; 0xf78 <free+0x10c>
     eaa:	ed 01       	movw	r28, r26
     eac:	20 e0       	ldi	r18, 0x00	; 0
     eae:	30 e0       	ldi	r19, 0x00	; 0
     eb0:	ce 17       	cp	r28, r30
     eb2:	df 07       	cpc	r29, r31
     eb4:	40 f4       	brcc	.+16     	; 0xec6 <free+0x5a>
     eb6:	4a 81       	ldd	r20, Y+2	; 0x02
     eb8:	5b 81       	ldd	r21, Y+3	; 0x03
     eba:	9e 01       	movw	r18, r28
     ebc:	41 15       	cp	r20, r1
     ebe:	51 05       	cpc	r21, r1
     ec0:	f1 f0       	breq	.+60     	; 0xefe <free+0x92>
     ec2:	ea 01       	movw	r28, r20
     ec4:	f5 cf       	rjmp	.-22     	; 0xeb0 <free+0x44>
     ec6:	d3 83       	std	Z+3, r29	; 0x03
     ec8:	c2 83       	std	Z+2, r28	; 0x02
     eca:	40 81       	ld	r20, Z
     ecc:	51 81       	ldd	r21, Z+1	; 0x01
     ece:	84 0f       	add	r24, r20
     ed0:	95 1f       	adc	r25, r21
     ed2:	c8 17       	cp	r28, r24
     ed4:	d9 07       	cpc	r29, r25
     ed6:	59 f4       	brne	.+22     	; 0xeee <free+0x82>
     ed8:	88 81       	ld	r24, Y
     eda:	99 81       	ldd	r25, Y+1	; 0x01
     edc:	84 0f       	add	r24, r20
     ede:	95 1f       	adc	r25, r21
     ee0:	02 96       	adiw	r24, 0x02	; 2
     ee2:	91 83       	std	Z+1, r25	; 0x01
     ee4:	80 83       	st	Z, r24
     ee6:	8a 81       	ldd	r24, Y+2	; 0x02
     ee8:	9b 81       	ldd	r25, Y+3	; 0x03
     eea:	93 83       	std	Z+3, r25	; 0x03
     eec:	82 83       	std	Z+2, r24	; 0x02
     eee:	21 15       	cp	r18, r1
     ef0:	31 05       	cpc	r19, r1
     ef2:	29 f4       	brne	.+10     	; 0xefe <free+0x92>
     ef4:	f0 93 6c 02 	sts	0x026C, r31	; 0x80026c <__flp+0x1>
     ef8:	e0 93 6b 02 	sts	0x026B, r30	; 0x80026b <__flp>
     efc:	3d c0       	rjmp	.+122    	; 0xf78 <free+0x10c>
     efe:	e9 01       	movw	r28, r18
     f00:	fb 83       	std	Y+3, r31	; 0x03
     f02:	ea 83       	std	Y+2, r30	; 0x02
     f04:	49 91       	ld	r20, Y+
     f06:	59 91       	ld	r21, Y+
     f08:	c4 0f       	add	r28, r20
     f0a:	d5 1f       	adc	r29, r21
     f0c:	ec 17       	cp	r30, r28
     f0e:	fd 07       	cpc	r31, r29
     f10:	61 f4       	brne	.+24     	; 0xf2a <free+0xbe>
     f12:	80 81       	ld	r24, Z
     f14:	91 81       	ldd	r25, Z+1	; 0x01
     f16:	84 0f       	add	r24, r20
     f18:	95 1f       	adc	r25, r21
     f1a:	02 96       	adiw	r24, 0x02	; 2
     f1c:	e9 01       	movw	r28, r18
     f1e:	99 83       	std	Y+1, r25	; 0x01
     f20:	88 83       	st	Y, r24
     f22:	82 81       	ldd	r24, Z+2	; 0x02
     f24:	93 81       	ldd	r25, Z+3	; 0x03
     f26:	9b 83       	std	Y+3, r25	; 0x03
     f28:	8a 83       	std	Y+2, r24	; 0x02
     f2a:	e0 e0       	ldi	r30, 0x00	; 0
     f2c:	f0 e0       	ldi	r31, 0x00	; 0
     f2e:	12 96       	adiw	r26, 0x02	; 2
     f30:	8d 91       	ld	r24, X+
     f32:	9c 91       	ld	r25, X
     f34:	13 97       	sbiw	r26, 0x03	; 3
     f36:	00 97       	sbiw	r24, 0x00	; 0
     f38:	19 f0       	breq	.+6      	; 0xf40 <free+0xd4>
     f3a:	fd 01       	movw	r30, r26
     f3c:	dc 01       	movw	r26, r24
     f3e:	f7 cf       	rjmp	.-18     	; 0xf2e <free+0xc2>
     f40:	8d 91       	ld	r24, X+
     f42:	9c 91       	ld	r25, X
     f44:	11 97       	sbiw	r26, 0x01	; 1
     f46:	9d 01       	movw	r18, r26
     f48:	2e 5f       	subi	r18, 0xFE	; 254
     f4a:	3f 4f       	sbci	r19, 0xFF	; 255
     f4c:	82 0f       	add	r24, r18
     f4e:	93 1f       	adc	r25, r19
     f50:	20 91 69 02 	lds	r18, 0x0269	; 0x800269 <__brkval>
     f54:	30 91 6a 02 	lds	r19, 0x026A	; 0x80026a <__brkval+0x1>
     f58:	28 17       	cp	r18, r24
     f5a:	39 07       	cpc	r19, r25
     f5c:	69 f4       	brne	.+26     	; 0xf78 <free+0x10c>
     f5e:	30 97       	sbiw	r30, 0x00	; 0
     f60:	29 f4       	brne	.+10     	; 0xf6c <free+0x100>
     f62:	10 92 6c 02 	sts	0x026C, r1	; 0x80026c <__flp+0x1>
     f66:	10 92 6b 02 	sts	0x026B, r1	; 0x80026b <__flp>
     f6a:	02 c0       	rjmp	.+4      	; 0xf70 <free+0x104>
     f6c:	13 82       	std	Z+3, r1	; 0x03
     f6e:	12 82       	std	Z+2, r1	; 0x02
     f70:	b0 93 6a 02 	sts	0x026A, r27	; 0x80026a <__brkval+0x1>
     f74:	a0 93 69 02 	sts	0x0269, r26	; 0x800269 <__brkval>
     f78:	df 91       	pop	r29
     f7a:	cf 91       	pop	r28
     f7c:	08 95       	ret

00000f7e <strnlen_P>:
     f7e:	fc 01       	movw	r30, r24
     f80:	05 90       	lpm	r0, Z+
     f82:	61 50       	subi	r22, 0x01	; 1
     f84:	70 40       	sbci	r23, 0x00	; 0
     f86:	01 10       	cpse	r0, r1
     f88:	d8 f7       	brcc	.-10     	; 0xf80 <strnlen_P+0x2>
     f8a:	80 95       	com	r24
     f8c:	90 95       	com	r25
     f8e:	8e 0f       	add	r24, r30
     f90:	9f 1f       	adc	r25, r31
     f92:	08 95       	ret

00000f94 <memset>:
     f94:	dc 01       	movw	r26, r24
     f96:	01 c0       	rjmp	.+2      	; 0xf9a <memset+0x6>
     f98:	6d 93       	st	X+, r22
     f9a:	41 50       	subi	r20, 0x01	; 1
     f9c:	50 40       	sbci	r21, 0x00	; 0
     f9e:	e0 f7       	brcc	.-8      	; 0xf98 <memset+0x4>
     fa0:	08 95       	ret

00000fa2 <strnlen>:
     fa2:	fc 01       	movw	r30, r24
     fa4:	61 50       	subi	r22, 0x01	; 1
     fa6:	70 40       	sbci	r23, 0x00	; 0
     fa8:	01 90       	ld	r0, Z+
     faa:	01 10       	cpse	r0, r1
     fac:	d8 f7       	brcc	.-10     	; 0xfa4 <strnlen+0x2>
     fae:	80 95       	com	r24
     fb0:	90 95       	com	r25
     fb2:	8e 0f       	add	r24, r30
     fb4:	9f 1f       	adc	r25, r31
     fb6:	08 95       	ret

00000fb8 <fputc>:
     fb8:	0f 93       	push	r16
     fba:	1f 93       	push	r17
     fbc:	cf 93       	push	r28
     fbe:	df 93       	push	r29
     fc0:	fb 01       	movw	r30, r22
     fc2:	23 81       	ldd	r18, Z+3	; 0x03
     fc4:	21 fd       	sbrc	r18, 1
     fc6:	03 c0       	rjmp	.+6      	; 0xfce <fputc+0x16>
     fc8:	8f ef       	ldi	r24, 0xFF	; 255
     fca:	9f ef       	ldi	r25, 0xFF	; 255
     fcc:	2c c0       	rjmp	.+88     	; 0x1026 <fputc+0x6e>
     fce:	22 ff       	sbrs	r18, 2
     fd0:	16 c0       	rjmp	.+44     	; 0xffe <fputc+0x46>
     fd2:	46 81       	ldd	r20, Z+6	; 0x06
     fd4:	57 81       	ldd	r21, Z+7	; 0x07
     fd6:	24 81       	ldd	r18, Z+4	; 0x04
     fd8:	35 81       	ldd	r19, Z+5	; 0x05
     fda:	42 17       	cp	r20, r18
     fdc:	53 07       	cpc	r21, r19
     fde:	44 f4       	brge	.+16     	; 0xff0 <fputc+0x38>
     fe0:	a0 81       	ld	r26, Z
     fe2:	b1 81       	ldd	r27, Z+1	; 0x01
     fe4:	9d 01       	movw	r18, r26
     fe6:	2f 5f       	subi	r18, 0xFF	; 255
     fe8:	3f 4f       	sbci	r19, 0xFF	; 255
     fea:	31 83       	std	Z+1, r19	; 0x01
     fec:	20 83       	st	Z, r18
     fee:	8c 93       	st	X, r24
     ff0:	26 81       	ldd	r18, Z+6	; 0x06
     ff2:	37 81       	ldd	r19, Z+7	; 0x07
     ff4:	2f 5f       	subi	r18, 0xFF	; 255
     ff6:	3f 4f       	sbci	r19, 0xFF	; 255
     ff8:	37 83       	std	Z+7, r19	; 0x07
     ffa:	26 83       	std	Z+6, r18	; 0x06
     ffc:	14 c0       	rjmp	.+40     	; 0x1026 <fputc+0x6e>
     ffe:	8b 01       	movw	r16, r22
    1000:	ec 01       	movw	r28, r24
    1002:	fb 01       	movw	r30, r22
    1004:	00 84       	ldd	r0, Z+8	; 0x08
    1006:	f1 85       	ldd	r31, Z+9	; 0x09
    1008:	e0 2d       	mov	r30, r0
    100a:	09 95       	icall
    100c:	89 2b       	or	r24, r25
    100e:	e1 f6       	brne	.-72     	; 0xfc8 <fputc+0x10>
    1010:	d8 01       	movw	r26, r16
    1012:	16 96       	adiw	r26, 0x06	; 6
    1014:	8d 91       	ld	r24, X+
    1016:	9c 91       	ld	r25, X
    1018:	17 97       	sbiw	r26, 0x07	; 7
    101a:	01 96       	adiw	r24, 0x01	; 1
    101c:	17 96       	adiw	r26, 0x07	; 7
    101e:	9c 93       	st	X, r25
    1020:	8e 93       	st	-X, r24
    1022:	16 97       	sbiw	r26, 0x06	; 6
    1024:	ce 01       	movw	r24, r28
    1026:	df 91       	pop	r29
    1028:	cf 91       	pop	r28
    102a:	1f 91       	pop	r17
    102c:	0f 91       	pop	r16
    102e:	08 95       	ret

00001030 <__ultoa_invert>:
    1030:	fa 01       	movw	r30, r20
    1032:	aa 27       	eor	r26, r26
    1034:	28 30       	cpi	r18, 0x08	; 8
    1036:	51 f1       	breq	.+84     	; 0x108c <__ultoa_invert+0x5c>
    1038:	20 31       	cpi	r18, 0x10	; 16
    103a:	81 f1       	breq	.+96     	; 0x109c <__ultoa_invert+0x6c>
    103c:	e8 94       	clt
    103e:	6f 93       	push	r22
    1040:	6e 7f       	andi	r22, 0xFE	; 254
    1042:	6e 5f       	subi	r22, 0xFE	; 254
    1044:	7f 4f       	sbci	r23, 0xFF	; 255
    1046:	8f 4f       	sbci	r24, 0xFF	; 255
    1048:	9f 4f       	sbci	r25, 0xFF	; 255
    104a:	af 4f       	sbci	r26, 0xFF	; 255
    104c:	b1 e0       	ldi	r27, 0x01	; 1
    104e:	3e d0       	rcall	.+124    	; 0x10cc <__ultoa_invert+0x9c>
    1050:	b4 e0       	ldi	r27, 0x04	; 4
    1052:	3c d0       	rcall	.+120    	; 0x10cc <__ultoa_invert+0x9c>
    1054:	67 0f       	add	r22, r23
    1056:	78 1f       	adc	r23, r24
    1058:	89 1f       	adc	r24, r25
    105a:	9a 1f       	adc	r25, r26
    105c:	a1 1d       	adc	r26, r1
    105e:	68 0f       	add	r22, r24
    1060:	79 1f       	adc	r23, r25
    1062:	8a 1f       	adc	r24, r26
    1064:	91 1d       	adc	r25, r1
    1066:	a1 1d       	adc	r26, r1
    1068:	6a 0f       	add	r22, r26
    106a:	71 1d       	adc	r23, r1
    106c:	81 1d       	adc	r24, r1
    106e:	91 1d       	adc	r25, r1
    1070:	a1 1d       	adc	r26, r1
    1072:	20 d0       	rcall	.+64     	; 0x10b4 <__ultoa_invert+0x84>
    1074:	09 f4       	brne	.+2      	; 0x1078 <__ultoa_invert+0x48>
    1076:	68 94       	set
    1078:	3f 91       	pop	r19
    107a:	2a e0       	ldi	r18, 0x0A	; 10
    107c:	26 9f       	mul	r18, r22
    107e:	11 24       	eor	r1, r1
    1080:	30 19       	sub	r19, r0
    1082:	30 5d       	subi	r19, 0xD0	; 208
    1084:	31 93       	st	Z+, r19
    1086:	de f6       	brtc	.-74     	; 0x103e <__ultoa_invert+0xe>
    1088:	cf 01       	movw	r24, r30
    108a:	08 95       	ret
    108c:	46 2f       	mov	r20, r22
    108e:	47 70       	andi	r20, 0x07	; 7
    1090:	40 5d       	subi	r20, 0xD0	; 208
    1092:	41 93       	st	Z+, r20
    1094:	b3 e0       	ldi	r27, 0x03	; 3
    1096:	0f d0       	rcall	.+30     	; 0x10b6 <__ultoa_invert+0x86>
    1098:	c9 f7       	brne	.-14     	; 0x108c <__ultoa_invert+0x5c>
    109a:	f6 cf       	rjmp	.-20     	; 0x1088 <__ultoa_invert+0x58>
    109c:	46 2f       	mov	r20, r22
    109e:	4f 70       	andi	r20, 0x0F	; 15
    10a0:	40 5d       	subi	r20, 0xD0	; 208
    10a2:	4a 33       	cpi	r20, 0x3A	; 58
    10a4:	18 f0       	brcs	.+6      	; 0x10ac <__ultoa_invert+0x7c>
    10a6:	49 5d       	subi	r20, 0xD9	; 217
    10a8:	31 fd       	sbrc	r19, 1
    10aa:	40 52       	subi	r20, 0x20	; 32
    10ac:	41 93       	st	Z+, r20
    10ae:	02 d0       	rcall	.+4      	; 0x10b4 <__ultoa_invert+0x84>
    10b0:	a9 f7       	brne	.-22     	; 0x109c <__ultoa_invert+0x6c>
    10b2:	ea cf       	rjmp	.-44     	; 0x1088 <__ultoa_invert+0x58>
    10b4:	b4 e0       	ldi	r27, 0x04	; 4
    10b6:	a6 95       	lsr	r26
    10b8:	97 95       	ror	r25
    10ba:	87 95       	ror	r24
    10bc:	77 95       	ror	r23
    10be:	67 95       	ror	r22
    10c0:	ba 95       	dec	r27
    10c2:	c9 f7       	brne	.-14     	; 0x10b6 <__ultoa_invert+0x86>
    10c4:	00 97       	sbiw	r24, 0x00	; 0
    10c6:	61 05       	cpc	r22, r1
    10c8:	71 05       	cpc	r23, r1
    10ca:	08 95       	ret
    10cc:	9b 01       	movw	r18, r22
    10ce:	ac 01       	movw	r20, r24
    10d0:	0a 2e       	mov	r0, r26
    10d2:	06 94       	lsr	r0
    10d4:	57 95       	ror	r21
    10d6:	47 95       	ror	r20
    10d8:	37 95       	ror	r19
    10da:	27 95       	ror	r18
    10dc:	ba 95       	dec	r27
    10de:	c9 f7       	brne	.-14     	; 0x10d2 <__ultoa_invert+0xa2>
    10e0:	62 0f       	add	r22, r18
    10e2:	73 1f       	adc	r23, r19
    10e4:	84 1f       	adc	r24, r20
    10e6:	95 1f       	adc	r25, r21
    10e8:	a0 1d       	adc	r26, r0
    10ea:	08 95       	ret

000010ec <__prologue_saves__>:
    10ec:	2f 92       	push	r2
    10ee:	3f 92       	push	r3
    10f0:	4f 92       	push	r4
    10f2:	5f 92       	push	r5
    10f4:	6f 92       	push	r6
    10f6:	7f 92       	push	r7
    10f8:	8f 92       	push	r8
    10fa:	9f 92       	push	r9
    10fc:	af 92       	push	r10
    10fe:	bf 92       	push	r11
    1100:	cf 92       	push	r12
    1102:	df 92       	push	r13
    1104:	ef 92       	push	r14
    1106:	ff 92       	push	r15
    1108:	0f 93       	push	r16
    110a:	1f 93       	push	r17
    110c:	cf 93       	push	r28
    110e:	df 93       	push	r29
    1110:	cd b7       	in	r28, 0x3d	; 61
    1112:	de b7       	in	r29, 0x3e	; 62
    1114:	ca 1b       	sub	r28, r26
    1116:	db 0b       	sbc	r29, r27
    1118:	0f b6       	in	r0, 0x3f	; 63
    111a:	f8 94       	cli
    111c:	de bf       	out	0x3e, r29	; 62
    111e:	0f be       	out	0x3f, r0	; 63
    1120:	cd bf       	out	0x3d, r28	; 61
    1122:	09 94       	ijmp

00001124 <__epilogue_restores__>:
    1124:	2a 88       	ldd	r2, Y+18	; 0x12
    1126:	39 88       	ldd	r3, Y+17	; 0x11
    1128:	48 88       	ldd	r4, Y+16	; 0x10
    112a:	5f 84       	ldd	r5, Y+15	; 0x0f
    112c:	6e 84       	ldd	r6, Y+14	; 0x0e
    112e:	7d 84       	ldd	r7, Y+13	; 0x0d
    1130:	8c 84       	ldd	r8, Y+12	; 0x0c
    1132:	9b 84       	ldd	r9, Y+11	; 0x0b
    1134:	aa 84       	ldd	r10, Y+10	; 0x0a
    1136:	b9 84       	ldd	r11, Y+9	; 0x09
    1138:	c8 84       	ldd	r12, Y+8	; 0x08
    113a:	df 80       	ldd	r13, Y+7	; 0x07
    113c:	ee 80       	ldd	r14, Y+6	; 0x06
    113e:	fd 80       	ldd	r15, Y+5	; 0x05
    1140:	0c 81       	ldd	r16, Y+4	; 0x04
    1142:	1b 81       	ldd	r17, Y+3	; 0x03
    1144:	aa 81       	ldd	r26, Y+2	; 0x02
    1146:	b9 81       	ldd	r27, Y+1	; 0x01
    1148:	ce 0f       	add	r28, r30
    114a:	d1 1d       	adc	r29, r1
    114c:	0f b6       	in	r0, 0x3f	; 63
    114e:	f8 94       	cli
    1150:	de bf       	out	0x3e, r29	; 62
    1152:	0f be       	out	0x3f, r0	; 63
    1154:	cd bf       	out	0x3d, r28	; 61
    1156:	ed 01       	movw	r28, r26
    1158:	08 95       	ret

0000115a <_exit>:
    115a:	f8 94       	cli

0000115c <__stop_program>:
    115c:	ff cf       	rjmp	.-2      	; 0x115c <__stop_program>
