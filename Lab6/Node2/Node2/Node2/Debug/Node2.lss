
Node2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000aa0  00080000  00080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000434  20000000  00080aa0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000084  20000434  00080ed4  00020434  2**2
                  ALLOC
  3 .stack        00000400  200004b8  00080f58  00020434  2**0
                  ALLOC
  4 .heap         00000200  200008b8  00081358  00020434  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020434  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002045d  2**0
                  CONTENTS, READONLY
  7 .debug_info   000049ad  00000000  00000000  000204b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000cf4  00000000  00000000  00024e63  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000d78  00000000  00000000  00025b57  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000158  00000000  00000000  000268cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000118  00000000  00000000  00026a27  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00012a90  00000000  00000000  00026b3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00003274  00000000  00000000  000395cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00055f93  00000000  00000000  0003c843  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000048c  00000000  00000000  000927d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	b8 08 00 20 81 03 08 00 7d 03 08 00 7d 03 08 00     ... ....}...}...
   80010:	7d 03 08 00 7d 03 08 00 7d 03 08 00 00 00 00 00     }...}...}.......
	...
   8002c:	7d 03 08 00 7d 03 08 00 00 00 00 00 7d 03 08 00     }...}.......}...
   8003c:	7d 03 08 00 7d 03 08 00 7d 03 08 00 7d 03 08 00     }...}...}...}...
   8004c:	7d 03 08 00 7d 03 08 00 7d 03 08 00 7d 03 08 00     }...}...}...}...
   8005c:	7d 03 08 00 19 08 08 00 7d 03 08 00 00 00 00 00     }.......}.......
   8006c:	7d 03 08 00 7d 03 08 00 7d 03 08 00 7d 03 08 00     }...}...}...}...
	...
   80084:	7d 03 08 00 7d 03 08 00 7d 03 08 00 7d 03 08 00     }...}...}...}...
   80094:	7d 03 08 00 7d 03 08 00 7d 03 08 00 7d 03 08 00     }...}...}...}...
   800a4:	00 00 00 00 7d 03 08 00 7d 03 08 00 7d 03 08 00     ....}...}...}...
   800b4:	7d 03 08 00 7d 03 08 00 7d 03 08 00 7d 03 08 00     }...}...}...}...
   800c4:	7d 03 08 00 7d 03 08 00 7d 03 08 00 7d 03 08 00     }...}...}...}...
   800d4:	7d 03 08 00 7d 03 08 00 7d 03 08 00 7d 03 08 00     }...}...}...}...
   800e4:	7d 03 08 00 7d 03 08 00 d5 02 08 00 7d 03 08 00     }...}.......}...

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20000434 	.word	0x20000434
   80110:	00000000 	.word	0x00000000
   80114:	00080aa0 	.word	0x00080aa0

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	00080aa0 	.word	0x00080aa0
   80154:	20000438 	.word	0x20000438
   80158:	00080aa0 	.word	0x00080aa0
   8015c:	00000000 	.word	0x00000000

00080160 <can_init>:
 * \retval Success(0) or failure(1)
 */


uint8_t can_init(uint32_t can_br, uint8_t num_tx_mb, uint8_t num_rx_mb)
{
   80160:	b4f0      	push	{r4, r5, r6, r7}
	
	//Make sure num_rx_mb and num_tx_mb is valid
	if(num_rx_mb > 8 | num_tx_mb > 8 | num_rx_mb + num_tx_mb > 8)
   80162:	1856      	adds	r6, r2, r1
   80164:	2e08      	cmp	r6, #8
   80166:	bfd4      	ite	le
   80168:	2300      	movle	r3, #0
   8016a:	2301      	movgt	r3, #1
   8016c:	2908      	cmp	r1, #8
   8016e:	bf98      	it	ls
   80170:	2a08      	cmpls	r2, #8
   80172:	d858      	bhi.n	80226 <can_init+0xc6>
   80174:	460c      	mov	r4, r1
   80176:	2b00      	cmp	r3, #0
   80178:	d155      	bne.n	80226 <can_init+0xc6>


	uint32_t ul_status; 
	
	//Disable can
	CAN0->CAN_MR &= ~CAN_MR_CANEN; 
   8017a:	4a2c      	ldr	r2, [pc, #176]	; (8022c <can_init+0xcc>)
   8017c:	6813      	ldr	r3, [r2, #0]
   8017e:	f023 0301 	bic.w	r3, r3, #1
   80182:	6013      	str	r3, [r2, #0]
	//Clear status register on read
	ul_status = CAN0->CAN_SR; 
   80184:	6913      	ldr	r3, [r2, #16]
	
	
	// Disable interrupts on CANH and CANL pins
	PIOA->PIO_IDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   80186:	4b2a      	ldr	r3, [pc, #168]	; (80230 <can_init+0xd0>)
   80188:	f44f 7540 	mov.w	r5, #768	; 0x300
   8018c:	645d      	str	r5, [r3, #68]	; 0x44
	
	//Select CAN0 RX and TX in PIOA
	uint32_t ul_sr = PIOA->PIO_ABSR;
   8018e:	6f1d      	ldr	r5, [r3, #112]	; 0x70
	PIOA->PIO_ABSR = ~(PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0) & ul_sr;
   80190:	f025 0503 	bic.w	r5, r5, #3
   80194:	671d      	str	r5, [r3, #112]	; 0x70
	
	// Disable the Parallel IO (PIO) of the Rx and Tx pins so that the peripheral controller can use them
	PIOA->PIO_PDR = PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0;
   80196:	2503      	movs	r5, #3
   80198:	605d      	str	r5, [r3, #4]
	
	// Enable pull up on CANH and CANL pin
	PIOA->PIO_PUER = (PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0);
   8019a:	665d      	str	r5, [r3, #100]	; 0x64
	
	
	//Enable Clock for CAN0 in PMC
	PMC->PMC_PCR = PMC_PCR_EN | (0 << PMC_PCR_DIV_Pos) | PMC_PCR_CMD | (ID_CAN0 << PMC_PCR_PID_Pos); // DIV = 1(can clk = MCK/2), CMD = 1 (write), PID = 2B (CAN0)
   8019c:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
   801a0:	4d24      	ldr	r5, [pc, #144]	; (80234 <can_init+0xd4>)
   801a2:	f8c3 510c 	str.w	r5, [r3, #268]	; 0x10c
	PMC->PMC_PCER1 |= 1 << (ID_CAN0 - 32);
   801a6:	f8d3 5100 	ldr.w	r5, [r3, #256]	; 0x100
   801aa:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
   801ae:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
	// SJW = 3TQ, BRP = 3, TQ = 8/Fosc, PROPSEG = 2/TQ, PS1 = 8/TQ, SAMPLE 3, PS2 = 8/TQ
	// TQ_NODE_1 = 8/ 16 Mhz, TQ_NODE_2 = 41+1 / 84 MHZ
	//                ???????1 ?0101001 ??10?001  ?111?111
	// can_br = 0b1 00101001 00100001 01110111
	// can_br = 0x1292177
	CAN0->CAN_BR = can_br; 
   801b2:	6150      	str	r0, [r2, #20]
	

	/****** Start of mailbox configuration ******/

	uint32_t can_ier = 0;
   801b4:	2000      	movs	r0, #0

	/* Configure receive mailboxes */
	for (int n = num_tx_mb; n <= num_rx_mb + num_tx_mb; n++)  //Simply one mailbox setup for all messages. You might want to apply filter for them.
   801b6:	e015      	b.n	801e4 <can_init+0x84>
	{
		CAN0->CAN_MB[n].CAN_MAM = 0x1F83FFFF; //Accept all messages
   801b8:	4b1c      	ldr	r3, [pc, #112]	; (8022c <can_init+0xcc>)
   801ba:	f101 0210 	add.w	r2, r1, #16
   801be:	0152      	lsls	r2, r2, #5
   801c0:	189d      	adds	r5, r3, r2
   801c2:	4f1d      	ldr	r7, [pc, #116]	; (80238 <can_init+0xd8>)
   801c4:	606f      	str	r7, [r5, #4]
		//CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_RX);
   801c6:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
   801ca:	509d      	str	r5, [r3, r2]
		CAN0->CAN_MB[n].CAN_MCR |= CAN_MCR_MTCR;
   801cc:	eb03 1341 	add.w	r3, r3, r1, lsl #5
   801d0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
   801d4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
   801d8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

		can_ier |= 1 << n; //Enable interrupt on rx mailbox
   801dc:	2301      	movs	r3, #1
   801de:	408b      	lsls	r3, r1
   801e0:	4318      	orrs	r0, r3
	for (int n = num_tx_mb; n <= num_rx_mb + num_tx_mb; n++)  //Simply one mailbox setup for all messages. You might want to apply filter for them.
   801e2:	3101      	adds	r1, #1
   801e4:	42b1      	cmp	r1, r6
   801e6:	dde7      	ble.n	801b8 <can_init+0x58>
   801e8:	2300      	movs	r3, #0
   801ea:	e00d      	b.n	80208 <can_init+0xa8>
	}
	
	/*Configure transmit mailboxes */
	for (int n = 0; n < num_tx_mb; n++)
	{
		CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
   801ec:	490f      	ldr	r1, [pc, #60]	; (8022c <can_init+0xcc>)
   801ee:	eb01 1243 	add.w	r2, r1, r3, lsl #5
   801f2:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
   801f6:	f8c2 5208 	str.w	r5, [r2, #520]	; 0x208
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_TX);
   801fa:	f103 0210 	add.w	r2, r3, #16
   801fe:	0152      	lsls	r2, r2, #5
   80200:	f04f 7540 	mov.w	r5, #50331648	; 0x3000000
   80204:	508d      	str	r5, [r1, r2]
	for (int n = 0; n < num_tx_mb; n++)
   80206:	3301      	adds	r3, #1
   80208:	42a3      	cmp	r3, r4
   8020a:	dbef      	blt.n	801ec <can_init+0x8c>
	}
	
	/****** End of mailbox configuraion ******/

	//Enable interrupt on receive mailboxes
	CAN0->CAN_IER = can_ier;
   8020c:	4b07      	ldr	r3, [pc, #28]	; (8022c <can_init+0xcc>)
   8020e:	6058      	str	r0, [r3, #4]
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   80210:	f44f 6100 	mov.w	r1, #2048	; 0x800
   80214:	4a09      	ldr	r2, [pc, #36]	; (8023c <can_init+0xdc>)
   80216:	6051      	str	r1, [r2, #4]

	//Enable interrupt in NVIC 
	NVIC_EnableIRQ(ID_CAN0);

	//enable CAN
	CAN0->CAN_MR |= CAN_MR_CANEN;
   80218:	681a      	ldr	r2, [r3, #0]
   8021a:	f042 0201 	orr.w	r2, r2, #1
   8021e:	601a      	str	r2, [r3, #0]

	return 0;
   80220:	2000      	movs	r0, #0
}
   80222:	bcf0      	pop	{r4, r5, r6, r7}
   80224:	4770      	bx	lr
		return 1; //Too many mailboxes is configured
   80226:	2001      	movs	r0, #1
   80228:	e7fb      	b.n	80222 <can_init+0xc2>
   8022a:	bf00      	nop
   8022c:	400b4000 	.word	0x400b4000
   80230:	400e0e00 	.word	0x400e0e00
   80234:	1000102b 	.word	0x1000102b
   80238:	1f83ffff 	.word	0x1f83ffff
   8023c:	e000e100 	.word	0xe000e100

00080240 <can_init_def_tx_rx_mb>:
{
   80240:	b508      	push	{r3, lr}
	return can_init(can_br, 1, 2);
   80242:	2202      	movs	r2, #2
   80244:	2101      	movs	r1, #1
   80246:	4b01      	ldr	r3, [pc, #4]	; (8024c <can_init_def_tx_rx_mb+0xc>)
   80248:	4798      	blx	r3
}
   8024a:	bd08      	pop	{r3, pc}
   8024c:	00080161 	.word	0x00080161

00080250 <can_receive>:
 * \retval Success(0) or failure(1)
 */
uint8_t can_receive(CAN_MESSAGE* can_msg, uint8_t rx_mb_id)
{
	//Check that mailbox is ready
	if(CAN0->CAN_MB[rx_mb_id].CAN_MSR & CAN_MSR_MRDY)
   80250:	014b      	lsls	r3, r1, #5
   80252:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   80256:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   8025a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
   8025e:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   80262:	d033      	beq.n	802cc <can_receive+0x7c>
{
   80264:	b470      	push	{r4, r5, r6}
	{
		//Get data from CAN mailbox
		uint32_t data_low = CAN0->CAN_MB[rx_mb_id].CAN_MDL;
   80266:	014b      	lsls	r3, r1, #5
   80268:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   8026c:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   80270:	f8d3 4214 	ldr.w	r4, [r3, #532]	; 0x214
		uint32_t data_high = CAN0->CAN_MB[rx_mb_id].CAN_MDH;
   80274:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
		
		//Get message ID
		can_msg->id = (uint8_t)((CAN0->CAN_MB[rx_mb_id].CAN_MID & CAN_MID_MIDvA_Msk) >> CAN_MID_MIDvA_Pos);
   80278:	f8d3 5208 	ldr.w	r5, [r3, #520]	; 0x208
   8027c:	f3c5 4587 	ubfx	r5, r5, #18, #8
   80280:	7005      	strb	r5, [r0, #0]
		
		//Get data length
		can_msg->data_length = (uint8_t)((CAN0->CAN_MB[rx_mb_id].CAN_MSR & CAN_MSR_MDLC_Msk) >> CAN_MSR_MDLC_Pos);
   80282:	f8d3 5210 	ldr.w	r5, [r3, #528]	; 0x210
   80286:	f3c5 4503 	ubfx	r5, r5, #16, #4
   8028a:	7045      	strb	r5, [r0, #1]
		
		//Put data in CAN_MESSAGE object
		for(int i = 0; i < can_msg->data_length;i++)
   8028c:	2300      	movs	r3, #0
   8028e:	e003      	b.n	80298 <can_receive+0x48>
				can_msg->data[i] = (char)(data_low & 0xff);
				data_low = data_low >> 8;
			}
			else
			{
				can_msg->data[i] = (uint8_t)(data_high & 0xff);
   80290:	18c6      	adds	r6, r0, r3
   80292:	70b2      	strb	r2, [r6, #2]
				data_high = data_high >> 8;
   80294:	0a12      	lsrs	r2, r2, #8
		for(int i = 0; i < can_msg->data_length;i++)
   80296:	3301      	adds	r3, #1
   80298:	42ab      	cmp	r3, r5
   8029a:	da05      	bge.n	802a8 <can_receive+0x58>
			if(i < 4)
   8029c:	2b03      	cmp	r3, #3
   8029e:	dcf7      	bgt.n	80290 <can_receive+0x40>
				can_msg->data[i] = (char)(data_low & 0xff);
   802a0:	18c6      	adds	r6, r0, r3
   802a2:	70b4      	strb	r4, [r6, #2]
				data_low = data_low >> 8;
   802a4:	0a24      	lsrs	r4, r4, #8
   802a6:	e7f6      	b.n	80296 <can_receive+0x46>
			}
		}
		
		//Reset for new receive
		CAN0->CAN_MB[rx_mb_id].CAN_MMR = CAN_MMR_MOT_MB_RX;
   802a8:	4b09      	ldr	r3, [pc, #36]	; (802d0 <can_receive+0x80>)
   802aa:	f101 0210 	add.w	r2, r1, #16
   802ae:	0152      	lsls	r2, r2, #5
   802b0:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
   802b4:	5098      	str	r0, [r3, r2]
		CAN0->CAN_MB[rx_mb_id].CAN_MCR |= CAN_MCR_MTCR;
   802b6:	eb03 1141 	add.w	r1, r3, r1, lsl #5
   802ba:	f8d1 321c 	ldr.w	r3, [r1, #540]	; 0x21c
   802be:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   802c2:	f8c1 321c 	str.w	r3, [r1, #540]	; 0x21c
		return 0;
   802c6:	2000      	movs	r0, #0
	}
	else //Mailbox busy
	{
		return 1;
	}
}
   802c8:	bc70      	pop	{r4, r5, r6}
   802ca:	4770      	bx	lr
		return 1;
   802cc:	2001      	movs	r0, #1
   802ce:	4770      	bx	lr
   802d0:	400b4000 	.word	0x400b4000

000802d4 <CAN0_Handler>:
 * \param void
 *
 * \retval 
 */
void CAN0_Handler( void )
{
   802d4:	b530      	push	{r4, r5, lr}
   802d6:	b085      	sub	sp, #20
	//if(DEBUG_INTERRUPT)printf("CAN0 interrupt\n\r");
	char can_sr = CAN0->CAN_SR; 
   802d8:	4b1f      	ldr	r3, [pc, #124]	; (80358 <CAN0_Handler+0x84>)
   802da:	691d      	ldr	r5, [r3, #16]
	
	//RX interrupt
	if(can_sr & (CAN_SR_MB1 | CAN_SR_MB2) )//Only mailbox 1 and 2 specified for receiving
   802dc:	f015 0f06 	tst.w	r5, #6
   802e0:	d02c      	beq.n	8033c <CAN0_Handler+0x68>
	{
		CAN_MESSAGE message;
		if(can_sr & CAN_SR_MB1)  //Mailbox 1 event
   802e2:	f015 0f02 	tst.w	r5, #2
   802e6:	d111      	bne.n	8030c <CAN0_Handler+0x38>
		{
			can_receive(&message, 1);

		}
		else if(can_sr & CAN_SR_MB2) //Mailbox 2 event
   802e8:	f015 0f04 	tst.w	r5, #4
   802ec:	d013      	beq.n	80316 <CAN0_Handler+0x42>
		
		{
			can_receive(&message, 2);
   802ee:	2102      	movs	r1, #2
   802f0:	a801      	add	r0, sp, #4
   802f2:	4b1a      	ldr	r3, [pc, #104]	; (8035c <CAN0_Handler+0x88>)
   802f4:	4798      	blx	r3
		else
		{
			printf("CAN0 message arrived in non-used mailbox\n\r");
		}

		if(DEBUG_INTERRUPT)printf("message id: %d\n\r", message.id);
   802f6:	f89d 1004 	ldrb.w	r1, [sp, #4]
   802fa:	4819      	ldr	r0, [pc, #100]	; (80360 <CAN0_Handler+0x8c>)
   802fc:	4c19      	ldr	r4, [pc, #100]	; (80364 <CAN0_Handler+0x90>)
   802fe:	47a0      	blx	r4
		if(DEBUG_INTERRUPT)printf("message data length: %d\n\r", message.data_length);
   80300:	f89d 1005 	ldrb.w	r1, [sp, #5]
   80304:	4818      	ldr	r0, [pc, #96]	; (80368 <CAN0_Handler+0x94>)
   80306:	47a0      	blx	r4
		for (int i = 0; i < message.data_length; i++)
   80308:	2400      	movs	r4, #0
   8030a:	e010      	b.n	8032e <CAN0_Handler+0x5a>
			can_receive(&message, 1);
   8030c:	2101      	movs	r1, #1
   8030e:	a801      	add	r0, sp, #4
   80310:	4b12      	ldr	r3, [pc, #72]	; (8035c <CAN0_Handler+0x88>)
   80312:	4798      	blx	r3
   80314:	e7ef      	b.n	802f6 <CAN0_Handler+0x22>
			printf("CAN0 message arrived in non-used mailbox\n\r");
   80316:	4815      	ldr	r0, [pc, #84]	; (8036c <CAN0_Handler+0x98>)
   80318:	4b12      	ldr	r3, [pc, #72]	; (80364 <CAN0_Handler+0x90>)
   8031a:	4798      	blx	r3
   8031c:	e7eb      	b.n	802f6 <CAN0_Handler+0x22>
		{
			if(DEBUG_INTERRUPT)printf("%d ", message.data[i]);
   8031e:	ab04      	add	r3, sp, #16
   80320:	4423      	add	r3, r4
   80322:	f813 1c0a 	ldrb.w	r1, [r3, #-10]
   80326:	4812      	ldr	r0, [pc, #72]	; (80370 <CAN0_Handler+0x9c>)
   80328:	4b0e      	ldr	r3, [pc, #56]	; (80364 <CAN0_Handler+0x90>)
   8032a:	4798      	blx	r3
		for (int i = 0; i < message.data_length; i++)
   8032c:	3401      	adds	r4, #1
   8032e:	f89d 3005 	ldrb.w	r3, [sp, #5]
   80332:	429c      	cmp	r4, r3
   80334:	dbf3      	blt.n	8031e <CAN0_Handler+0x4a>
		}
		if(DEBUG_INTERRUPT)printf("\n\r");
   80336:	480f      	ldr	r0, [pc, #60]	; (80374 <CAN0_Handler+0xa0>)
   80338:	4b0a      	ldr	r3, [pc, #40]	; (80364 <CAN0_Handler+0x90>)
   8033a:	4798      	blx	r3
	}
	
	if(can_sr & CAN_SR_MB0)
   8033c:	f015 0f01 	tst.w	r5, #1
   80340:	d002      	beq.n	80348 <CAN0_Handler+0x74>
	{
		//if(DEBUG_INTERRUPT) printf("CAN0 MB0 ready to send \n\r");
		
	//Disable interrupt
		CAN0->CAN_IDR = CAN_IER_MB0;
   80342:	2201      	movs	r2, #1
   80344:	4b04      	ldr	r3, [pc, #16]	; (80358 <CAN0_Handler+0x84>)
   80346:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   80348:	f44f 6200 	mov.w	r2, #2048	; 0x800
   8034c:	4b0a      	ldr	r3, [pc, #40]	; (80378 <CAN0_Handler+0xa4>)
   8034e:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184

	}
	
	NVIC_ClearPendingIRQ(ID_CAN0);
	//sei();*/
}
   80352:	b005      	add	sp, #20
   80354:	bd30      	pop	{r4, r5, pc}
   80356:	bf00      	nop
   80358:	400b4000 	.word	0x400b4000
   8035c:	00080251 	.word	0x00080251
   80360:	00080a1c 	.word	0x00080a1c
   80364:	00080769 	.word	0x00080769
   80368:	00080a30 	.word	0x00080a30
   8036c:	000809f0 	.word	0x000809f0
   80370:	00080a4c 	.word	0x00080a4c
   80374:	00080a18 	.word	0x00080a18
   80378:	e000e100 	.word	0xe000e100

0008037c <Dummy_Handler>:
   8037c:	e7fe      	b.n	8037c <Dummy_Handler>
	...

00080380 <Reset_Handler>:
   80380:	b508      	push	{r3, lr}
   80382:	4b11      	ldr	r3, [pc, #68]	; (803c8 <Reset_Handler+0x48>)
   80384:	4a11      	ldr	r2, [pc, #68]	; (803cc <Reset_Handler+0x4c>)
   80386:	429a      	cmp	r2, r3
   80388:	d009      	beq.n	8039e <Reset_Handler+0x1e>
   8038a:	4b0f      	ldr	r3, [pc, #60]	; (803c8 <Reset_Handler+0x48>)
   8038c:	4a0f      	ldr	r2, [pc, #60]	; (803cc <Reset_Handler+0x4c>)
   8038e:	e003      	b.n	80398 <Reset_Handler+0x18>
   80390:	6811      	ldr	r1, [r2, #0]
   80392:	6019      	str	r1, [r3, #0]
   80394:	3304      	adds	r3, #4
   80396:	3204      	adds	r2, #4
   80398:	490d      	ldr	r1, [pc, #52]	; (803d0 <Reset_Handler+0x50>)
   8039a:	428b      	cmp	r3, r1
   8039c:	d3f8      	bcc.n	80390 <Reset_Handler+0x10>
   8039e:	4b0d      	ldr	r3, [pc, #52]	; (803d4 <Reset_Handler+0x54>)
   803a0:	e002      	b.n	803a8 <Reset_Handler+0x28>
   803a2:	2200      	movs	r2, #0
   803a4:	601a      	str	r2, [r3, #0]
   803a6:	3304      	adds	r3, #4
   803a8:	4a0b      	ldr	r2, [pc, #44]	; (803d8 <Reset_Handler+0x58>)
   803aa:	4293      	cmp	r3, r2
   803ac:	d3f9      	bcc.n	803a2 <Reset_Handler+0x22>
   803ae:	4b0b      	ldr	r3, [pc, #44]	; (803dc <Reset_Handler+0x5c>)
   803b0:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   803b4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   803b8:	4a09      	ldr	r2, [pc, #36]	; (803e0 <Reset_Handler+0x60>)
   803ba:	6093      	str	r3, [r2, #8]
   803bc:	4b09      	ldr	r3, [pc, #36]	; (803e4 <Reset_Handler+0x64>)
   803be:	4798      	blx	r3
   803c0:	4b09      	ldr	r3, [pc, #36]	; (803e8 <Reset_Handler+0x68>)
   803c2:	4798      	blx	r3
   803c4:	e7fe      	b.n	803c4 <Reset_Handler+0x44>
   803c6:	bf00      	nop
   803c8:	20000000 	.word	0x20000000
   803cc:	00080aa0 	.word	0x00080aa0
   803d0:	20000434 	.word	0x20000434
   803d4:	20000434 	.word	0x20000434
   803d8:	200004b8 	.word	0x200004b8
   803dc:	00080000 	.word	0x00080000
   803e0:	e000ed00 	.word	0xe000ed00
   803e4:	00080881 	.word	0x00080881
   803e8:	00080491 	.word	0x00080491

000803ec <SystemInit>:
   803ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
   803f0:	4a20      	ldr	r2, [pc, #128]	; (80474 <SystemInit+0x88>)
   803f2:	6013      	str	r3, [r2, #0]
   803f4:	f502 7200 	add.w	r2, r2, #512	; 0x200
   803f8:	6013      	str	r3, [r2, #0]
   803fa:	4b1f      	ldr	r3, [pc, #124]	; (80478 <SystemInit+0x8c>)
   803fc:	6a1b      	ldr	r3, [r3, #32]
   803fe:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80402:	d107      	bne.n	80414 <SystemInit+0x28>
   80404:	4a1d      	ldr	r2, [pc, #116]	; (8047c <SystemInit+0x90>)
   80406:	4b1c      	ldr	r3, [pc, #112]	; (80478 <SystemInit+0x8c>)
   80408:	621a      	str	r2, [r3, #32]
   8040a:	4b1b      	ldr	r3, [pc, #108]	; (80478 <SystemInit+0x8c>)
   8040c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8040e:	f013 0f01 	tst.w	r3, #1
   80412:	d0fa      	beq.n	8040a <SystemInit+0x1e>
   80414:	4a1a      	ldr	r2, [pc, #104]	; (80480 <SystemInit+0x94>)
   80416:	4b18      	ldr	r3, [pc, #96]	; (80478 <SystemInit+0x8c>)
   80418:	621a      	str	r2, [r3, #32]
   8041a:	4b17      	ldr	r3, [pc, #92]	; (80478 <SystemInit+0x8c>)
   8041c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8041e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   80422:	d0fa      	beq.n	8041a <SystemInit+0x2e>
   80424:	4a14      	ldr	r2, [pc, #80]	; (80478 <SystemInit+0x8c>)
   80426:	6b13      	ldr	r3, [r2, #48]	; 0x30
   80428:	f023 0303 	bic.w	r3, r3, #3
   8042c:	f043 0301 	orr.w	r3, r3, #1
   80430:	6313      	str	r3, [r2, #48]	; 0x30
   80432:	4b11      	ldr	r3, [pc, #68]	; (80478 <SystemInit+0x8c>)
   80434:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80436:	f013 0f08 	tst.w	r3, #8
   8043a:	d0fa      	beq.n	80432 <SystemInit+0x46>
   8043c:	4a11      	ldr	r2, [pc, #68]	; (80484 <SystemInit+0x98>)
   8043e:	4b0e      	ldr	r3, [pc, #56]	; (80478 <SystemInit+0x8c>)
   80440:	629a      	str	r2, [r3, #40]	; 0x28
   80442:	4b0d      	ldr	r3, [pc, #52]	; (80478 <SystemInit+0x8c>)
   80444:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80446:	f013 0f02 	tst.w	r3, #2
   8044a:	d0fa      	beq.n	80442 <SystemInit+0x56>
   8044c:	2211      	movs	r2, #17
   8044e:	4b0a      	ldr	r3, [pc, #40]	; (80478 <SystemInit+0x8c>)
   80450:	631a      	str	r2, [r3, #48]	; 0x30
   80452:	4b09      	ldr	r3, [pc, #36]	; (80478 <SystemInit+0x8c>)
   80454:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80456:	f013 0f08 	tst.w	r3, #8
   8045a:	d0fa      	beq.n	80452 <SystemInit+0x66>
   8045c:	2212      	movs	r2, #18
   8045e:	4b06      	ldr	r3, [pc, #24]	; (80478 <SystemInit+0x8c>)
   80460:	631a      	str	r2, [r3, #48]	; 0x30
   80462:	4b05      	ldr	r3, [pc, #20]	; (80478 <SystemInit+0x8c>)
   80464:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80466:	f013 0f08 	tst.w	r3, #8
   8046a:	d0fa      	beq.n	80462 <SystemInit+0x76>
   8046c:	4a06      	ldr	r2, [pc, #24]	; (80488 <SystemInit+0x9c>)
   8046e:	4b07      	ldr	r3, [pc, #28]	; (8048c <SystemInit+0xa0>)
   80470:	601a      	str	r2, [r3, #0]
   80472:	4770      	bx	lr
   80474:	400e0a00 	.word	0x400e0a00
   80478:	400e0600 	.word	0x400e0600
   8047c:	00370809 	.word	0x00370809
   80480:	01370809 	.word	0x01370809
   80484:	200d3f01 	.word	0x200d3f01
   80488:	0501bd00 	.word	0x0501bd00
   8048c:	20000000 	.word	0x20000000

00080490 <main>:
   80490:	b508      	push	{r3, lr}
   80492:	4b0b      	ldr	r3, [pc, #44]	; (804c0 <main+0x30>)
   80494:	4798      	blx	r3
   80496:	4b0b      	ldr	r3, [pc, #44]	; (804c4 <main+0x34>)
   80498:	4798      	blx	r3
   8049a:	480b      	ldr	r0, [pc, #44]	; (804c8 <main+0x38>)
   8049c:	4b0b      	ldr	r3, [pc, #44]	; (804cc <main+0x3c>)
   8049e:	4798      	blx	r3
   804a0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   804a4:	4b0a      	ldr	r3, [pc, #40]	; (804d0 <main+0x40>)
   804a6:	605a      	str	r2, [r3, #4]
   804a8:	f5a3 6345 	sub.w	r3, r3, #3152	; 0xc50
   804ac:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
   804b0:	601a      	str	r2, [r3, #0]
   804b2:	611a      	str	r2, [r3, #16]
   804b4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   804b8:	631a      	str	r2, [r3, #48]	; 0x30
   804ba:	4b06      	ldr	r3, [pc, #24]	; (804d4 <main+0x44>)
   804bc:	4798      	blx	r3
   804be:	e7fc      	b.n	804ba <main+0x2a>
   804c0:	000803ed 	.word	0x000803ed
   804c4:	0008078d 	.word	0x0008078d
   804c8:	01292177 	.word	0x01292177
   804cc:	00080241 	.word	0x00080241
   804d0:	400e1a50 	.word	0x400e1a50
   804d4:	000802d5 	.word	0x000802d5

000804d8 <printchar>:
   804d8:	b508      	push	{r3, lr}
   804da:	b2c8      	uxtb	r0, r1
   804dc:	4b01      	ldr	r3, [pc, #4]	; (804e4 <printchar+0xc>)
   804de:	4798      	blx	r3
   804e0:	bd08      	pop	{r3, pc}
   804e2:	bf00      	nop
   804e4:	000807f5 	.word	0x000807f5

000804e8 <prints>:
   804e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   804ec:	4607      	mov	r7, r0
   804ee:	460e      	mov	r6, r1
   804f0:	1e15      	subs	r5, r2, #0
   804f2:	dd02      	ble.n	804fa <prints+0x12>
   804f4:	460a      	mov	r2, r1
   804f6:	2100      	movs	r1, #0
   804f8:	e004      	b.n	80504 <prints+0x1c>
   804fa:	f04f 0820 	mov.w	r8, #32
   804fe:	e00e      	b.n	8051e <prints+0x36>
   80500:	3101      	adds	r1, #1
   80502:	3201      	adds	r2, #1
   80504:	7810      	ldrb	r0, [r2, #0]
   80506:	2800      	cmp	r0, #0
   80508:	d1fa      	bne.n	80500 <prints+0x18>
   8050a:	42a9      	cmp	r1, r5
   8050c:	da01      	bge.n	80512 <prints+0x2a>
   8050e:	1a6d      	subs	r5, r5, r1
   80510:	e000      	b.n	80514 <prints+0x2c>
   80512:	2500      	movs	r5, #0
   80514:	f013 0f02 	tst.w	r3, #2
   80518:	d106      	bne.n	80528 <prints+0x40>
   8051a:	f04f 0820 	mov.w	r8, #32
   8051e:	f013 0401 	ands.w	r4, r3, #1
   80522:	d00a      	beq.n	8053a <prints+0x52>
   80524:	2400      	movs	r4, #0
   80526:	e010      	b.n	8054a <prints+0x62>
   80528:	f04f 0830 	mov.w	r8, #48	; 0x30
   8052c:	e7f7      	b.n	8051e <prints+0x36>
   8052e:	4641      	mov	r1, r8
   80530:	4638      	mov	r0, r7
   80532:	4b0d      	ldr	r3, [pc, #52]	; (80568 <prints+0x80>)
   80534:	4798      	blx	r3
   80536:	3401      	adds	r4, #1
   80538:	3d01      	subs	r5, #1
   8053a:	2d00      	cmp	r5, #0
   8053c:	dcf7      	bgt.n	8052e <prints+0x46>
   8053e:	e004      	b.n	8054a <prints+0x62>
   80540:	4638      	mov	r0, r7
   80542:	4b09      	ldr	r3, [pc, #36]	; (80568 <prints+0x80>)
   80544:	4798      	blx	r3
   80546:	3401      	adds	r4, #1
   80548:	3601      	adds	r6, #1
   8054a:	7831      	ldrb	r1, [r6, #0]
   8054c:	2900      	cmp	r1, #0
   8054e:	d1f7      	bne.n	80540 <prints+0x58>
   80550:	e005      	b.n	8055e <prints+0x76>
   80552:	4641      	mov	r1, r8
   80554:	4638      	mov	r0, r7
   80556:	4b04      	ldr	r3, [pc, #16]	; (80568 <prints+0x80>)
   80558:	4798      	blx	r3
   8055a:	3401      	adds	r4, #1
   8055c:	3d01      	subs	r5, #1
   8055e:	2d00      	cmp	r5, #0
   80560:	dcf7      	bgt.n	80552 <prints+0x6a>
   80562:	4620      	mov	r0, r4
   80564:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80568:	000804d9 	.word	0x000804d9

0008056c <printi>:
   8056c:	b5f0      	push	{r4, r5, r6, r7, lr}
   8056e:	b085      	sub	sp, #20
   80570:	4607      	mov	r7, r0
   80572:	980c      	ldr	r0, [sp, #48]	; 0x30
   80574:	b151      	cbz	r1, 8058c <printi+0x20>
   80576:	461e      	mov	r6, r3
   80578:	460c      	mov	r4, r1
   8057a:	b113      	cbz	r3, 80582 <printi+0x16>
   8057c:	2a0a      	cmp	r2, #10
   8057e:	d012      	beq.n	805a6 <printi+0x3a>
   80580:	2600      	movs	r6, #0
   80582:	ad04      	add	r5, sp, #16
   80584:	2300      	movs	r3, #0
   80586:	f805 3d01 	strb.w	r3, [r5, #-1]!
   8058a:	e018      	b.n	805be <printi+0x52>
   8058c:	2330      	movs	r3, #48	; 0x30
   8058e:	f88d 3004 	strb.w	r3, [sp, #4]
   80592:	2300      	movs	r3, #0
   80594:	f88d 3005 	strb.w	r3, [sp, #5]
   80598:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8059a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   8059c:	a901      	add	r1, sp, #4
   8059e:	4638      	mov	r0, r7
   805a0:	4c1b      	ldr	r4, [pc, #108]	; (80610 <printi+0xa4>)
   805a2:	47a0      	blx	r4
   805a4:	e029      	b.n	805fa <printi+0x8e>
   805a6:	2900      	cmp	r1, #0
   805a8:	db01      	blt.n	805ae <printi+0x42>
   805aa:	2600      	movs	r6, #0
   805ac:	e7e9      	b.n	80582 <printi+0x16>
   805ae:	424c      	negs	r4, r1
   805b0:	2601      	movs	r6, #1
   805b2:	e7e6      	b.n	80582 <printi+0x16>
   805b4:	3330      	adds	r3, #48	; 0x30
   805b6:	f805 3d01 	strb.w	r3, [r5, #-1]!
   805ba:	fbb4 f4f2 	udiv	r4, r4, r2
   805be:	b14c      	cbz	r4, 805d4 <printi+0x68>
   805c0:	fbb4 f3f2 	udiv	r3, r4, r2
   805c4:	fb02 4313 	mls	r3, r2, r3, r4
   805c8:	2b09      	cmp	r3, #9
   805ca:	ddf3      	ble.n	805b4 <printi+0x48>
   805cc:	f1a0 013a 	sub.w	r1, r0, #58	; 0x3a
   805d0:	440b      	add	r3, r1
   805d2:	e7ef      	b.n	805b4 <printi+0x48>
   805d4:	b156      	cbz	r6, 805ec <printi+0x80>
   805d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   805d8:	b11b      	cbz	r3, 805e2 <printi+0x76>
   805da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   805dc:	f013 0f02 	tst.w	r3, #2
   805e0:	d10d      	bne.n	805fe <printi+0x92>
   805e2:	232d      	movs	r3, #45	; 0x2d
   805e4:	f805 3c01 	strb.w	r3, [r5, #-1]
   805e8:	3d01      	subs	r5, #1
   805ea:	2600      	movs	r6, #0
   805ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   805ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   805f0:	4629      	mov	r1, r5
   805f2:	4638      	mov	r0, r7
   805f4:	4c06      	ldr	r4, [pc, #24]	; (80610 <printi+0xa4>)
   805f6:	47a0      	blx	r4
   805f8:	4430      	add	r0, r6
   805fa:	b005      	add	sp, #20
   805fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   805fe:	212d      	movs	r1, #45	; 0x2d
   80600:	4638      	mov	r0, r7
   80602:	4b04      	ldr	r3, [pc, #16]	; (80614 <printi+0xa8>)
   80604:	4798      	blx	r3
   80606:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   80608:	3b01      	subs	r3, #1
   8060a:	930a      	str	r3, [sp, #40]	; 0x28
   8060c:	e7ee      	b.n	805ec <printi+0x80>
   8060e:	bf00      	nop
   80610:	000804e9 	.word	0x000804e9
   80614:	000804d9 	.word	0x000804d9

00080618 <print>:
   80618:	b5f0      	push	{r4, r5, r6, r7, lr}
   8061a:	b089      	sub	sp, #36	; 0x24
   8061c:	4606      	mov	r6, r0
   8061e:	460c      	mov	r4, r1
   80620:	9205      	str	r2, [sp, #20]
   80622:	2500      	movs	r5, #0
   80624:	e081      	b.n	8072a <print+0x112>
   80626:	1ca2      	adds	r2, r4, #2
   80628:	2301      	movs	r3, #1
   8062a:	e08b      	b.n	80744 <print+0x12c>
   8062c:	3401      	adds	r4, #1
   8062e:	f043 0302 	orr.w	r3, r3, #2
   80632:	7822      	ldrb	r2, [r4, #0]
   80634:	2a30      	cmp	r2, #48	; 0x30
   80636:	d0f9      	beq.n	8062c <print+0x14>
   80638:	2200      	movs	r2, #0
   8063a:	e006      	b.n	8064a <print+0x32>
   8063c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   80640:	0050      	lsls	r0, r2, #1
   80642:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   80646:	4402      	add	r2, r0
   80648:	3401      	adds	r4, #1
   8064a:	7821      	ldrb	r1, [r4, #0]
   8064c:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
   80650:	b2c0      	uxtb	r0, r0
   80652:	2809      	cmp	r0, #9
   80654:	d9f2      	bls.n	8063c <print+0x24>
   80656:	2973      	cmp	r1, #115	; 0x73
   80658:	d018      	beq.n	8068c <print+0x74>
   8065a:	2964      	cmp	r1, #100	; 0x64
   8065c:	d022      	beq.n	806a4 <print+0x8c>
   8065e:	2978      	cmp	r1, #120	; 0x78
   80660:	d02f      	beq.n	806c2 <print+0xaa>
   80662:	2958      	cmp	r1, #88	; 0x58
   80664:	d03c      	beq.n	806e0 <print+0xc8>
   80666:	2975      	cmp	r1, #117	; 0x75
   80668:	d049      	beq.n	806fe <print+0xe6>
   8066a:	2963      	cmp	r1, #99	; 0x63
   8066c:	d15c      	bne.n	80728 <print+0x110>
   8066e:	9905      	ldr	r1, [sp, #20]
   80670:	1d08      	adds	r0, r1, #4
   80672:	9005      	str	r0, [sp, #20]
   80674:	7809      	ldrb	r1, [r1, #0]
   80676:	f88d 101c 	strb.w	r1, [sp, #28]
   8067a:	2100      	movs	r1, #0
   8067c:	f88d 101d 	strb.w	r1, [sp, #29]
   80680:	a907      	add	r1, sp, #28
   80682:	4630      	mov	r0, r6
   80684:	4f34      	ldr	r7, [pc, #208]	; (80758 <print+0x140>)
   80686:	47b8      	blx	r7
   80688:	4405      	add	r5, r0
   8068a:	e04d      	b.n	80728 <print+0x110>
   8068c:	9905      	ldr	r1, [sp, #20]
   8068e:	1d08      	adds	r0, r1, #4
   80690:	9005      	str	r0, [sp, #20]
   80692:	6809      	ldr	r1, [r1, #0]
   80694:	b121      	cbz	r1, 806a0 <print+0x88>
   80696:	4630      	mov	r0, r6
   80698:	4f2f      	ldr	r7, [pc, #188]	; (80758 <print+0x140>)
   8069a:	47b8      	blx	r7
   8069c:	4405      	add	r5, r0
   8069e:	e043      	b.n	80728 <print+0x110>
   806a0:	492e      	ldr	r1, [pc, #184]	; (8075c <print+0x144>)
   806a2:	e7f8      	b.n	80696 <print+0x7e>
   806a4:	9905      	ldr	r1, [sp, #20]
   806a6:	1d08      	adds	r0, r1, #4
   806a8:	9005      	str	r0, [sp, #20]
   806aa:	6809      	ldr	r1, [r1, #0]
   806ac:	2061      	movs	r0, #97	; 0x61
   806ae:	9002      	str	r0, [sp, #8]
   806b0:	9301      	str	r3, [sp, #4]
   806b2:	9200      	str	r2, [sp, #0]
   806b4:	2301      	movs	r3, #1
   806b6:	220a      	movs	r2, #10
   806b8:	4630      	mov	r0, r6
   806ba:	4f29      	ldr	r7, [pc, #164]	; (80760 <print+0x148>)
   806bc:	47b8      	blx	r7
   806be:	4405      	add	r5, r0
   806c0:	e032      	b.n	80728 <print+0x110>
   806c2:	9905      	ldr	r1, [sp, #20]
   806c4:	1d08      	adds	r0, r1, #4
   806c6:	9005      	str	r0, [sp, #20]
   806c8:	6809      	ldr	r1, [r1, #0]
   806ca:	2061      	movs	r0, #97	; 0x61
   806cc:	9002      	str	r0, [sp, #8]
   806ce:	9301      	str	r3, [sp, #4]
   806d0:	9200      	str	r2, [sp, #0]
   806d2:	2300      	movs	r3, #0
   806d4:	2210      	movs	r2, #16
   806d6:	4630      	mov	r0, r6
   806d8:	4f21      	ldr	r7, [pc, #132]	; (80760 <print+0x148>)
   806da:	47b8      	blx	r7
   806dc:	4405      	add	r5, r0
   806de:	e023      	b.n	80728 <print+0x110>
   806e0:	9905      	ldr	r1, [sp, #20]
   806e2:	1d08      	adds	r0, r1, #4
   806e4:	9005      	str	r0, [sp, #20]
   806e6:	6809      	ldr	r1, [r1, #0]
   806e8:	2041      	movs	r0, #65	; 0x41
   806ea:	9002      	str	r0, [sp, #8]
   806ec:	9301      	str	r3, [sp, #4]
   806ee:	9200      	str	r2, [sp, #0]
   806f0:	2300      	movs	r3, #0
   806f2:	2210      	movs	r2, #16
   806f4:	4630      	mov	r0, r6
   806f6:	4f1a      	ldr	r7, [pc, #104]	; (80760 <print+0x148>)
   806f8:	47b8      	blx	r7
   806fa:	4405      	add	r5, r0
   806fc:	e014      	b.n	80728 <print+0x110>
   806fe:	9905      	ldr	r1, [sp, #20]
   80700:	1d08      	adds	r0, r1, #4
   80702:	9005      	str	r0, [sp, #20]
   80704:	6809      	ldr	r1, [r1, #0]
   80706:	2061      	movs	r0, #97	; 0x61
   80708:	9002      	str	r0, [sp, #8]
   8070a:	9301      	str	r3, [sp, #4]
   8070c:	9200      	str	r2, [sp, #0]
   8070e:	2300      	movs	r3, #0
   80710:	220a      	movs	r2, #10
   80712:	4630      	mov	r0, r6
   80714:	4f12      	ldr	r7, [pc, #72]	; (80760 <print+0x148>)
   80716:	47b8      	blx	r7
   80718:	4405      	add	r5, r0
   8071a:	e005      	b.n	80728 <print+0x110>
   8071c:	4614      	mov	r4, r2
   8071e:	7821      	ldrb	r1, [r4, #0]
   80720:	4630      	mov	r0, r6
   80722:	4b10      	ldr	r3, [pc, #64]	; (80764 <print+0x14c>)
   80724:	4798      	blx	r3
   80726:	3501      	adds	r5, #1
   80728:	3401      	adds	r4, #1
   8072a:	7823      	ldrb	r3, [r4, #0]
   8072c:	b163      	cbz	r3, 80748 <print+0x130>
   8072e:	2b25      	cmp	r3, #37	; 0x25
   80730:	d1f5      	bne.n	8071e <print+0x106>
   80732:	1c62      	adds	r2, r4, #1
   80734:	7863      	ldrb	r3, [r4, #1]
   80736:	b13b      	cbz	r3, 80748 <print+0x130>
   80738:	2b25      	cmp	r3, #37	; 0x25
   8073a:	d0ef      	beq.n	8071c <print+0x104>
   8073c:	2b2d      	cmp	r3, #45	; 0x2d
   8073e:	f43f af72 	beq.w	80626 <print+0xe>
   80742:	2300      	movs	r3, #0
   80744:	4614      	mov	r4, r2
   80746:	e774      	b.n	80632 <print+0x1a>
   80748:	b116      	cbz	r6, 80750 <print+0x138>
   8074a:	6833      	ldr	r3, [r6, #0]
   8074c:	2200      	movs	r2, #0
   8074e:	701a      	strb	r2, [r3, #0]
   80750:	4628      	mov	r0, r5
   80752:	b009      	add	sp, #36	; 0x24
   80754:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80756:	bf00      	nop
   80758:	000804e9 	.word	0x000804e9
   8075c:	00080a50 	.word	0x00080a50
   80760:	0008056d 	.word	0x0008056d
   80764:	000804d9 	.word	0x000804d9

00080768 <printf>:
   80768:	b40f      	push	{r0, r1, r2, r3}
   8076a:	b500      	push	{lr}
   8076c:	b083      	sub	sp, #12
   8076e:	aa04      	add	r2, sp, #16
   80770:	f852 1b04 	ldr.w	r1, [r2], #4
   80774:	9201      	str	r2, [sp, #4]
   80776:	2000      	movs	r0, #0
   80778:	4b03      	ldr	r3, [pc, #12]	; (80788 <printf+0x20>)
   8077a:	4798      	blx	r3
   8077c:	b003      	add	sp, #12
   8077e:	f85d eb04 	ldr.w	lr, [sp], #4
   80782:	b004      	add	sp, #16
   80784:	4770      	bx	lr
   80786:	bf00      	nop
   80788:	00080619 	.word	0x00080619

0008078c <configure_uart>:
   8078c:	4b16      	ldr	r3, [pc, #88]	; (807e8 <configure_uart+0x5c>)
   8078e:	2200      	movs	r2, #0
   80790:	701a      	strb	r2, [r3, #0]
   80792:	705a      	strb	r2, [r3, #1]
   80794:	4b15      	ldr	r3, [pc, #84]	; (807ec <configure_uart+0x60>)
   80796:	f44f 7140 	mov.w	r1, #768	; 0x300
   8079a:	6459      	str	r1, [r3, #68]	; 0x44
   8079c:	6059      	str	r1, [r3, #4]
   8079e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   807a0:	6f18      	ldr	r0, [r3, #112]	; 0x70
   807a2:	4002      	ands	r2, r0
   807a4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   807a8:	671a      	str	r2, [r3, #112]	; 0x70
   807aa:	6659      	str	r1, [r3, #100]	; 0x64
   807ac:	f44f 7280 	mov.w	r2, #256	; 0x100
   807b0:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
   807b4:	611a      	str	r2, [r3, #16]
   807b6:	f503 7300 	add.w	r3, r3, #512	; 0x200
   807ba:	21ac      	movs	r1, #172	; 0xac
   807bc:	6019      	str	r1, [r3, #0]
   807be:	f240 2123 	movw	r1, #547	; 0x223
   807c2:	6219      	str	r1, [r3, #32]
   807c4:	f44f 6100 	mov.w	r1, #2048	; 0x800
   807c8:	6059      	str	r1, [r3, #4]
   807ca:	f240 2102 	movw	r1, #514	; 0x202
   807ce:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   807d2:	f04f 31ff 	mov.w	r1, #4294967295
   807d6:	60d9      	str	r1, [r3, #12]
   807d8:	21e1      	movs	r1, #225	; 0xe1
   807da:	6099      	str	r1, [r3, #8]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   807dc:	4904      	ldr	r1, [pc, #16]	; (807f0 <configure_uart+0x64>)
   807de:	600a      	str	r2, [r1, #0]
   807e0:	2250      	movs	r2, #80	; 0x50
   807e2:	601a      	str	r2, [r3, #0]
   807e4:	4770      	bx	lr
   807e6:	bf00      	nop
   807e8:	20000450 	.word	0x20000450
   807ec:	400e0e00 	.word	0x400e0e00
   807f0:	e000e100 	.word	0xe000e100

000807f4 <uart_putchar>:
   807f4:	4b07      	ldr	r3, [pc, #28]	; (80814 <uart_putchar+0x20>)
   807f6:	695b      	ldr	r3, [r3, #20]
   807f8:	f013 0f02 	tst.w	r3, #2
   807fc:	d008      	beq.n	80810 <uart_putchar+0x1c>
   807fe:	4b05      	ldr	r3, [pc, #20]	; (80814 <uart_putchar+0x20>)
   80800:	61d8      	str	r0, [r3, #28]
   80802:	4b04      	ldr	r3, [pc, #16]	; (80814 <uart_putchar+0x20>)
   80804:	695b      	ldr	r3, [r3, #20]
   80806:	f413 7f00 	tst.w	r3, #512	; 0x200
   8080a:	d0fa      	beq.n	80802 <uart_putchar+0xe>
   8080c:	2000      	movs	r0, #0
   8080e:	4770      	bx	lr
   80810:	2001      	movs	r0, #1
   80812:	4770      	bx	lr
   80814:	400e0800 	.word	0x400e0800

00080818 <UART_Handler>:
   80818:	b508      	push	{r3, lr}
   8081a:	4b15      	ldr	r3, [pc, #84]	; (80870 <UART_Handler+0x58>)
   8081c:	695b      	ldr	r3, [r3, #20]
   8081e:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   80822:	d003      	beq.n	8082c <UART_Handler+0x14>
   80824:	f44f 71a8 	mov.w	r1, #336	; 0x150
   80828:	4a11      	ldr	r2, [pc, #68]	; (80870 <UART_Handler+0x58>)
   8082a:	6011      	str	r1, [r2, #0]
   8082c:	f013 0f01 	tst.w	r3, #1
   80830:	d012      	beq.n	80858 <UART_Handler+0x40>
   80832:	4810      	ldr	r0, [pc, #64]	; (80874 <UART_Handler+0x5c>)
   80834:	7842      	ldrb	r2, [r0, #1]
   80836:	1c53      	adds	r3, r2, #1
   80838:	4259      	negs	r1, r3
   8083a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   8083e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   80842:	bf58      	it	pl
   80844:	424b      	negpl	r3, r1
   80846:	7801      	ldrb	r1, [r0, #0]
   80848:	428b      	cmp	r3, r1
   8084a:	d006      	beq.n	8085a <UART_Handler+0x42>
   8084c:	4908      	ldr	r1, [pc, #32]	; (80870 <UART_Handler+0x58>)
   8084e:	6988      	ldr	r0, [r1, #24]
   80850:	4908      	ldr	r1, [pc, #32]	; (80874 <UART_Handler+0x5c>)
   80852:	440a      	add	r2, r1
   80854:	7090      	strb	r0, [r2, #2]
   80856:	704b      	strb	r3, [r1, #1]
   80858:	bd08      	pop	{r3, pc}
   8085a:	4807      	ldr	r0, [pc, #28]	; (80878 <UART_Handler+0x60>)
   8085c:	4b07      	ldr	r3, [pc, #28]	; (8087c <UART_Handler+0x64>)
   8085e:	4798      	blx	r3
   80860:	4b04      	ldr	r3, [pc, #16]	; (80874 <UART_Handler+0x5c>)
   80862:	7859      	ldrb	r1, [r3, #1]
   80864:	4a02      	ldr	r2, [pc, #8]	; (80870 <UART_Handler+0x58>)
   80866:	6992      	ldr	r2, [r2, #24]
   80868:	440b      	add	r3, r1
   8086a:	709a      	strb	r2, [r3, #2]
   8086c:	bd08      	pop	{r3, pc}
   8086e:	bf00      	nop
   80870:	400e0800 	.word	0x400e0800
   80874:	20000450 	.word	0x20000450
   80878:	00080a58 	.word	0x00080a58
   8087c:	00080769 	.word	0x00080769

00080880 <__libc_init_array>:
   80880:	b570      	push	{r4, r5, r6, lr}
   80882:	4e0f      	ldr	r6, [pc, #60]	; (808c0 <__libc_init_array+0x40>)
   80884:	4d0f      	ldr	r5, [pc, #60]	; (808c4 <__libc_init_array+0x44>)
   80886:	1b76      	subs	r6, r6, r5
   80888:	10b6      	asrs	r6, r6, #2
   8088a:	bf18      	it	ne
   8088c:	2400      	movne	r4, #0
   8088e:	d005      	beq.n	8089c <__libc_init_array+0x1c>
   80890:	3401      	adds	r4, #1
   80892:	f855 3b04 	ldr.w	r3, [r5], #4
   80896:	4798      	blx	r3
   80898:	42a6      	cmp	r6, r4
   8089a:	d1f9      	bne.n	80890 <__libc_init_array+0x10>
   8089c:	4e0a      	ldr	r6, [pc, #40]	; (808c8 <__libc_init_array+0x48>)
   8089e:	4d0b      	ldr	r5, [pc, #44]	; (808cc <__libc_init_array+0x4c>)
   808a0:	f000 f8ec 	bl	80a7c <_init>
   808a4:	1b76      	subs	r6, r6, r5
   808a6:	10b6      	asrs	r6, r6, #2
   808a8:	bf18      	it	ne
   808aa:	2400      	movne	r4, #0
   808ac:	d006      	beq.n	808bc <__libc_init_array+0x3c>
   808ae:	3401      	adds	r4, #1
   808b0:	f855 3b04 	ldr.w	r3, [r5], #4
   808b4:	4798      	blx	r3
   808b6:	42a6      	cmp	r6, r4
   808b8:	d1f9      	bne.n	808ae <__libc_init_array+0x2e>
   808ba:	bd70      	pop	{r4, r5, r6, pc}
   808bc:	bd70      	pop	{r4, r5, r6, pc}
   808be:	bf00      	nop
   808c0:	00080a88 	.word	0x00080a88
   808c4:	00080a88 	.word	0x00080a88
   808c8:	00080a90 	.word	0x00080a90
   808cc:	00080a88 	.word	0x00080a88

000808d0 <register_fini>:
   808d0:	4b02      	ldr	r3, [pc, #8]	; (808dc <register_fini+0xc>)
   808d2:	b113      	cbz	r3, 808da <register_fini+0xa>
   808d4:	4802      	ldr	r0, [pc, #8]	; (808e0 <register_fini+0x10>)
   808d6:	f000 b805 	b.w	808e4 <atexit>
   808da:	4770      	bx	lr
   808dc:	00000000 	.word	0x00000000
   808e0:	000808f1 	.word	0x000808f1

000808e4 <atexit>:
   808e4:	2300      	movs	r3, #0
   808e6:	4601      	mov	r1, r0
   808e8:	461a      	mov	r2, r3
   808ea:	4618      	mov	r0, r3
   808ec:	f000 b81e 	b.w	8092c <__register_exitproc>

000808f0 <__libc_fini_array>:
   808f0:	b538      	push	{r3, r4, r5, lr}
   808f2:	4c0a      	ldr	r4, [pc, #40]	; (8091c <__libc_fini_array+0x2c>)
   808f4:	4d0a      	ldr	r5, [pc, #40]	; (80920 <__libc_fini_array+0x30>)
   808f6:	1b64      	subs	r4, r4, r5
   808f8:	10a4      	asrs	r4, r4, #2
   808fa:	d00a      	beq.n	80912 <__libc_fini_array+0x22>
   808fc:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   80900:	3b01      	subs	r3, #1
   80902:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   80906:	3c01      	subs	r4, #1
   80908:	f855 3904 	ldr.w	r3, [r5], #-4
   8090c:	4798      	blx	r3
   8090e:	2c00      	cmp	r4, #0
   80910:	d1f9      	bne.n	80906 <__libc_fini_array+0x16>
   80912:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   80916:	f000 b8bb 	b.w	80a90 <_fini>
   8091a:	bf00      	nop
   8091c:	00080aa0 	.word	0x00080aa0
   80920:	00080a9c 	.word	0x00080a9c

00080924 <__retarget_lock_acquire_recursive>:
   80924:	4770      	bx	lr
   80926:	bf00      	nop

00080928 <__retarget_lock_release_recursive>:
   80928:	4770      	bx	lr
   8092a:	bf00      	nop

0008092c <__register_exitproc>:
   8092c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   80930:	4d2c      	ldr	r5, [pc, #176]	; (809e4 <__register_exitproc+0xb8>)
   80932:	4606      	mov	r6, r0
   80934:	6828      	ldr	r0, [r5, #0]
   80936:	4698      	mov	r8, r3
   80938:	460f      	mov	r7, r1
   8093a:	4691      	mov	r9, r2
   8093c:	f7ff fff2 	bl	80924 <__retarget_lock_acquire_recursive>
   80940:	4b29      	ldr	r3, [pc, #164]	; (809e8 <__register_exitproc+0xbc>)
   80942:	681c      	ldr	r4, [r3, #0]
   80944:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   80948:	2b00      	cmp	r3, #0
   8094a:	d03e      	beq.n	809ca <__register_exitproc+0x9e>
   8094c:	685a      	ldr	r2, [r3, #4]
   8094e:	2a1f      	cmp	r2, #31
   80950:	dc1c      	bgt.n	8098c <__register_exitproc+0x60>
   80952:	f102 0e01 	add.w	lr, r2, #1
   80956:	b176      	cbz	r6, 80976 <__register_exitproc+0x4a>
   80958:	2101      	movs	r1, #1
   8095a:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   8095e:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   80962:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   80966:	4091      	lsls	r1, r2
   80968:	4308      	orrs	r0, r1
   8096a:	2e02      	cmp	r6, #2
   8096c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   80970:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   80974:	d023      	beq.n	809be <__register_exitproc+0x92>
   80976:	3202      	adds	r2, #2
   80978:	f8c3 e004 	str.w	lr, [r3, #4]
   8097c:	6828      	ldr	r0, [r5, #0]
   8097e:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   80982:	f7ff ffd1 	bl	80928 <__retarget_lock_release_recursive>
   80986:	2000      	movs	r0, #0
   80988:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8098c:	4b17      	ldr	r3, [pc, #92]	; (809ec <__register_exitproc+0xc0>)
   8098e:	b30b      	cbz	r3, 809d4 <__register_exitproc+0xa8>
   80990:	f44f 70c8 	mov.w	r0, #400	; 0x190
   80994:	f3af 8000 	nop.w
   80998:	4603      	mov	r3, r0
   8099a:	b1d8      	cbz	r0, 809d4 <__register_exitproc+0xa8>
   8099c:	2000      	movs	r0, #0
   8099e:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   809a2:	f04f 0e01 	mov.w	lr, #1
   809a6:	6058      	str	r0, [r3, #4]
   809a8:	6019      	str	r1, [r3, #0]
   809aa:	4602      	mov	r2, r0
   809ac:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   809b0:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   809b4:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   809b8:	2e00      	cmp	r6, #0
   809ba:	d0dc      	beq.n	80976 <__register_exitproc+0x4a>
   809bc:	e7cc      	b.n	80958 <__register_exitproc+0x2c>
   809be:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   809c2:	4301      	orrs	r1, r0
   809c4:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   809c8:	e7d5      	b.n	80976 <__register_exitproc+0x4a>
   809ca:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   809ce:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   809d2:	e7bb      	b.n	8094c <__register_exitproc+0x20>
   809d4:	6828      	ldr	r0, [r5, #0]
   809d6:	f7ff ffa7 	bl	80928 <__retarget_lock_release_recursive>
   809da:	f04f 30ff 	mov.w	r0, #4294967295
   809de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   809e2:	bf00      	nop
   809e4:	20000430 	.word	0x20000430
   809e8:	00080a78 	.word	0x00080a78
   809ec:	00000000 	.word	0x00000000
   809f0:	304e4143 	.word	0x304e4143
   809f4:	73656d20 	.word	0x73656d20
   809f8:	65676173 	.word	0x65676173
   809fc:	72726120 	.word	0x72726120
   80a00:	64657669 	.word	0x64657669
   80a04:	206e6920 	.word	0x206e6920
   80a08:	2d6e6f6e 	.word	0x2d6e6f6e
   80a0c:	64657375 	.word	0x64657375
   80a10:	69616d20 	.word	0x69616d20
   80a14:	786f626c 	.word	0x786f626c
   80a18:	00000d0a 	.word	0x00000d0a
   80a1c:	7373656d 	.word	0x7373656d
   80a20:	20656761 	.word	0x20656761
   80a24:	203a6469 	.word	0x203a6469
   80a28:	0d0a6425 	.word	0x0d0a6425
   80a2c:	00000000 	.word	0x00000000
   80a30:	7373656d 	.word	0x7373656d
   80a34:	20656761 	.word	0x20656761
   80a38:	61746164 	.word	0x61746164
   80a3c:	6e656c20 	.word	0x6e656c20
   80a40:	3a687467 	.word	0x3a687467
   80a44:	0a642520 	.word	0x0a642520
   80a48:	0000000d 	.word	0x0000000d
   80a4c:	00206425 	.word	0x00206425
   80a50:	6c756e28 	.word	0x6c756e28
   80a54:	0000296c 	.word	0x0000296c
   80a58:	3a525245 	.word	0x3a525245
   80a5c:	52415520 	.word	0x52415520
   80a60:	58522054 	.word	0x58522054
   80a64:	66756220 	.word	0x66756220
   80a68:	20726566 	.word	0x20726566
   80a6c:	66207369 	.word	0x66207369
   80a70:	0a6c6c75 	.word	0x0a6c6c75
   80a74:	0000000d 	.word	0x0000000d

00080a78 <_global_impure_ptr>:
   80a78:	20000008                                ... 

00080a7c <_init>:
   80a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80a7e:	bf00      	nop
   80a80:	bcf8      	pop	{r3, r4, r5, r6, r7}
   80a82:	bc08      	pop	{r3}
   80a84:	469e      	mov	lr, r3
   80a86:	4770      	bx	lr

00080a88 <__init_array_start>:
   80a88:	000808d1 	.word	0x000808d1

00080a8c <__frame_dummy_init_array_entry>:
   80a8c:	00080119                                ....

00080a90 <_fini>:
   80a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80a92:	bf00      	nop
   80a94:	bcf8      	pop	{r3, r4, r5, r6, r7}
   80a96:	bc08      	pop	{r3}
   80a98:	469e      	mov	lr, r3
   80a9a:	4770      	bx	lr

00080a9c <__fini_array_start>:
   80a9c:	000800f5 	.word	0x000800f5
