
Node2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001998  00080000  00080000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000043c  20000000  00081998  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000c4  2000043c  00081dd4  0002043c  2**2
                  ALLOC
  3 .stack        00000400  20000500  00081e98  0002043c  2**0
                  ALLOC
  4 .heap         00000200  20000900  00082298  0002043c  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  0002043c  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020465  2**0
                  CONTENTS, READONLY
  7 .debug_info   0000a3a2  00000000  00000000  000204be  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001958  00000000  00000000  0002a860  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000002b0  00000000  00000000  0002c1b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000230  00000000  00000000  0002c468  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000143a5  00000000  00000000  0002c698  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000060dd  00000000  00000000  00040a3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000568be  00000000  00000000  00046b1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000007e8  00000000  00000000  0009d3d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    000011e7  00000000  00000000  0009dbc0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	00 09 00 20 c5 04 08 00 c1 04 08 00 c1 04 08 00     ... ............
   80010:	c1 04 08 00 c1 04 08 00 c1 04 08 00 00 00 00 00     ................
	...
   8002c:	c1 04 08 00 c1 04 08 00 00 00 00 00 c1 04 08 00     ................
   8003c:	c1 04 08 00 c1 04 08 00 c1 04 08 00 c1 04 08 00     ................
   8004c:	c1 04 08 00 c1 04 08 00 c1 04 08 00 c1 04 08 00     ................
   8005c:	c1 04 08 00 05 0f 08 00 c1 04 08 00 00 00 00 00     ................
   8006c:	c1 04 08 00 c1 04 08 00 c1 04 08 00 c1 04 08 00     ................
	...
   80084:	c1 04 08 00 c1 04 08 00 c1 04 08 00 c1 04 08 00     ................
   80094:	c1 04 08 00 c1 04 08 00 c1 04 08 00 c1 04 08 00     ................
   800a4:	00 00 00 00 c1 04 08 00 c1 04 08 00 c1 04 08 00     ................
   800b4:	c1 04 08 00 c1 04 08 00 c1 04 08 00 c1 04 08 00     ................
   800c4:	c1 04 08 00 c1 04 08 00 c1 04 08 00 c1 04 08 00     ................
   800d4:	c1 04 08 00 c1 04 08 00 c1 04 08 00 c1 04 08 00     ................
   800e4:	c1 04 08 00 c1 04 08 00 81 03 08 00 c1 04 08 00     ................

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	2000043c 	.word	0x2000043c
   80110:	00000000 	.word	0x00000000
   80114:	00081998 	.word	0x00081998

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	00081998 	.word	0x00081998
   80154:	20000440 	.word	0x20000440
   80158:	00081998 	.word	0x00081998
   8015c:	00000000 	.word	0x00000000

00080160 <adc_init>:
   80160:	4a07      	ldr	r2, [pc, #28]	; (80180 <adc_init+0x20>)
   80162:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
   80166:	f043 0320 	orr.w	r3, r3, #32
   8016a:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
   8016e:	4b05      	ldr	r3, [pc, #20]	; (80184 <adc_init+0x24>)
   80170:	4a05      	ldr	r2, [pc, #20]	; (80188 <adc_init+0x28>)
   80172:	605a      	str	r2, [r3, #4]
   80174:	2204      	movs	r2, #4
   80176:	611a      	str	r2, [r3, #16]
   80178:	2202      	movs	r2, #2
   8017a:	601a      	str	r2, [r3, #0]
   8017c:	4770      	bx	lr
   8017e:	bf00      	nop
   80180:	400e0600 	.word	0x400e0600
   80184:	400c0000 	.word	0x400c0000
   80188:	33200080 	.word	0x33200080

0008018c <adc_read>:
   8018c:	4b01      	ldr	r3, [pc, #4]	; (80194 <adc_read+0x8>)
   8018e:	6d98      	ldr	r0, [r3, #88]	; 0x58
   80190:	b280      	uxth	r0, r0
   80192:	4770      	bx	lr
   80194:	400c0000 	.word	0x400c0000

00080198 <can_init>:
 * \retval Success(0) or failure(1)
 */


uint8_t can_init(uint32_t can_br, uint8_t num_tx_mb, uint8_t num_rx_mb)
{
   80198:	b4f0      	push	{r4, r5, r6, r7}
	
	//Make sure num_rx_mb and num_tx_mb is valid
	if(num_rx_mb > 8 | num_tx_mb > 8 | num_rx_mb + num_tx_mb > 8)
   8019a:	1856      	adds	r6, r2, r1
   8019c:	2e08      	cmp	r6, #8
   8019e:	bfd4      	ite	le
   801a0:	2300      	movle	r3, #0
   801a2:	2301      	movgt	r3, #1
   801a4:	2908      	cmp	r1, #8
   801a6:	bf98      	it	ls
   801a8:	2a08      	cmpls	r2, #8
   801aa:	d858      	bhi.n	8025e <can_init+0xc6>
   801ac:	460c      	mov	r4, r1
   801ae:	2b00      	cmp	r3, #0
   801b0:	d155      	bne.n	8025e <can_init+0xc6>


	uint32_t ul_status; 
	
	//Disable can
	CAN0->CAN_MR &= ~CAN_MR_CANEN; 
   801b2:	4a2c      	ldr	r2, [pc, #176]	; (80264 <can_init+0xcc>)
   801b4:	6813      	ldr	r3, [r2, #0]
   801b6:	f023 0301 	bic.w	r3, r3, #1
   801ba:	6013      	str	r3, [r2, #0]
	//Clear status register on read
	ul_status = CAN0->CAN_SR; 
   801bc:	6913      	ldr	r3, [r2, #16]
	
	
	// Disable interrupts on CANH and CANL pins
	PIOA->PIO_IDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   801be:	4b2a      	ldr	r3, [pc, #168]	; (80268 <can_init+0xd0>)
   801c0:	f44f 7540 	mov.w	r5, #768	; 0x300
   801c4:	645d      	str	r5, [r3, #68]	; 0x44
	
	//Select CAN0 RX and TX in PIOA
	uint32_t ul_sr = PIOA->PIO_ABSR;
   801c6:	6f1d      	ldr	r5, [r3, #112]	; 0x70
	PIOA->PIO_ABSR = ~(PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0) & ul_sr;
   801c8:	f025 0503 	bic.w	r5, r5, #3
   801cc:	671d      	str	r5, [r3, #112]	; 0x70
	
	// Disable the Parallel IO (PIO) of the Rx and Tx pins so that the peripheral controller can use them
	PIOA->PIO_PDR = PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0;
   801ce:	2503      	movs	r5, #3
   801d0:	605d      	str	r5, [r3, #4]
	
	// Enable pull up on CANH and CANL pin
	PIOA->PIO_PUER = (PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0);
   801d2:	665d      	str	r5, [r3, #100]	; 0x64
	
	
	//Enable Clock for CAN0 in PMC
	PMC->PMC_PCR = PMC_PCR_EN | (0 << PMC_PCR_DIV_Pos) | PMC_PCR_CMD | (ID_CAN0 << PMC_PCR_PID_Pos); // DIV = 1(can clk = MCK/2), CMD = 1 (write), PID = 2B (CAN0)
   801d4:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
   801d8:	4d24      	ldr	r5, [pc, #144]	; (8026c <can_init+0xd4>)
   801da:	f8c3 510c 	str.w	r5, [r3, #268]	; 0x10c
	PMC->PMC_PCER1 |= 1 << (ID_CAN0 - 32);
   801de:	f8d3 5100 	ldr.w	r5, [r3, #256]	; 0x100
   801e2:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
   801e6:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
	// SJW = 3TQ, BRP = 3, TQ = 8/Fosc, PROPSEG = 2/TQ, PS1 = 8/TQ, SAMPLE 3, PS2 = 8/TQ
	// TQ_NODE_1 = 8/ 16 Mhz, TQ_NODE_2 = 41+1 / 84 MHZ
	//                ???????1 ?0101001 ??10?001  ?111?111
	// can_br = 0b1 00101001 00100001 01110111
	// can_br = 0x1292177
	CAN0->CAN_BR = can_br; 
   801ea:	6150      	str	r0, [r2, #20]
	

	/****** Start of mailbox configuration ******/

	uint32_t can_ier = 0;
   801ec:	2000      	movs	r0, #0

	/* Configure receive mailboxes */
	for (int n = num_tx_mb; n <= num_rx_mb + num_tx_mb; n++)  //Simply one mailbox setup for all messages. You might want to apply filter for them.
   801ee:	e015      	b.n	8021c <can_init+0x84>
	{
		CAN0->CAN_MB[n].CAN_MAM = 0x1F83FFFF; //Accept messages with id < 31
   801f0:	4b1c      	ldr	r3, [pc, #112]	; (80264 <can_init+0xcc>)
   801f2:	f101 0210 	add.w	r2, r1, #16
   801f6:	0152      	lsls	r2, r2, #5
   801f8:	189d      	adds	r5, r3, r2
   801fa:	4f1d      	ldr	r7, [pc, #116]	; (80270 <can_init+0xd8>)
   801fc:	606f      	str	r7, [r5, #4]
		//CAN0->CAN_MB[n].CAN_MAM = 0x00;
		//CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_RX);
   801fe:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
   80202:	509d      	str	r5, [r3, r2]
		CAN0->CAN_MB[n].CAN_MCR |= CAN_MCR_MTCR;
   80204:	eb03 1341 	add.w	r3, r3, r1, lsl #5
   80208:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
   8020c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
   80210:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

		can_ier |= 1 << n; //Enable interrupt on rx mailbox
   80214:	2301      	movs	r3, #1
   80216:	408b      	lsls	r3, r1
   80218:	4318      	orrs	r0, r3
	for (int n = num_tx_mb; n <= num_rx_mb + num_tx_mb; n++)  //Simply one mailbox setup for all messages. You might want to apply filter for them.
   8021a:	3101      	adds	r1, #1
   8021c:	42b1      	cmp	r1, r6
   8021e:	dde7      	ble.n	801f0 <can_init+0x58>
   80220:	2300      	movs	r3, #0
   80222:	e00d      	b.n	80240 <can_init+0xa8>
	}
	
	/*Configure transmit mailboxes */
	for (int n = 0; n < num_tx_mb; n++)
	{
		CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
   80224:	490f      	ldr	r1, [pc, #60]	; (80264 <can_init+0xcc>)
   80226:	eb01 1243 	add.w	r2, r1, r3, lsl #5
   8022a:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
   8022e:	f8c2 5208 	str.w	r5, [r2, #520]	; 0x208
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_TX);
   80232:	f103 0210 	add.w	r2, r3, #16
   80236:	0152      	lsls	r2, r2, #5
   80238:	f04f 7540 	mov.w	r5, #50331648	; 0x3000000
   8023c:	508d      	str	r5, [r1, r2]
	for (int n = 0; n < num_tx_mb; n++)
   8023e:	3301      	adds	r3, #1
   80240:	42a3      	cmp	r3, r4
   80242:	dbef      	blt.n	80224 <can_init+0x8c>
	}
	
	/****** End of mailbox configuraion ******/

	//Enable interrupt on receive mailboxes
	CAN0->CAN_IER = can_ier;
   80244:	4b07      	ldr	r3, [pc, #28]	; (80264 <can_init+0xcc>)
   80246:	6058      	str	r0, [r3, #4]
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   80248:	f44f 6100 	mov.w	r1, #2048	; 0x800
   8024c:	4a09      	ldr	r2, [pc, #36]	; (80274 <can_init+0xdc>)
   8024e:	6051      	str	r1, [r2, #4]

	//Enable interrupt in NVIC 
	NVIC_EnableIRQ(ID_CAN0);

	//enable CAN
	CAN0->CAN_MR |= CAN_MR_CANEN;
   80250:	681a      	ldr	r2, [r3, #0]
   80252:	f042 0201 	orr.w	r2, r2, #1
   80256:	601a      	str	r2, [r3, #0]

	return 0;
   80258:	2000      	movs	r0, #0
}
   8025a:	bcf0      	pop	{r4, r5, r6, r7}
   8025c:	4770      	bx	lr
		return 1; //Too many mailboxes is configured
   8025e:	2001      	movs	r0, #1
   80260:	e7fb      	b.n	8025a <can_init+0xc2>
   80262:	bf00      	nop
   80264:	400b4000 	.word	0x400b4000
   80268:	400e0e00 	.word	0x400e0e00
   8026c:	1000102b 	.word	0x1000102b
   80270:	1f83ffff 	.word	0x1f83ffff
   80274:	e000e100 	.word	0xe000e100

00080278 <can_send>:
 * \retval Success(0) or failure(1)
 */
uint8_t can_send(CAN_MESSAGE* can_msg, uint8_t tx_mb_id)
{
	//Check that mailbox is ready
	if(CAN0->CAN_MB[tx_mb_id].CAN_MSR & CAN_MSR_MRDY)
   80278:	014b      	lsls	r3, r1, #5
   8027a:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   8027e:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   80282:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
   80286:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   8028a:	d034      	beq.n	802f6 <can_send+0x7e>
	{
		//Set message ID and use CAN 2.0B protocol
		CAN0->CAN_MB[tx_mb_id].CAN_MID = CAN_MID_MIDvA(can_msg->id) | CAN_MID_MIDE ;
   8028c:	7802      	ldrb	r2, [r0, #0]
   8028e:	0492      	lsls	r2, r2, #18
   80290:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   80294:	014b      	lsls	r3, r1, #5
   80296:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   8029a:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   8029e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
		
		//Make sure message is not to long
		if(can_msg->data_length > 8){
   802a2:	7843      	ldrb	r3, [r0, #1]
   802a4:	2b08      	cmp	r3, #8
   802a6:	d901      	bls.n	802ac <can_send+0x34>
			can_msg->data_length = 8;
   802a8:	2308      	movs	r3, #8
   802aa:	7043      	strb	r3, [r0, #1]
			//Message is to long, sending only the first 8 bytes
		}
		//Put message in can data registers
		CAN0->CAN_MB[tx_mb_id].CAN_MDL = can_msg->data[3] << 24 | can_msg->data[2] << 16 | can_msg->data[1] << 8 | can_msg->data[0];
   802ac:	7942      	ldrb	r2, [r0, #5]
   802ae:	7903      	ldrb	r3, [r0, #4]
   802b0:	041b      	lsls	r3, r3, #16
   802b2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   802b6:	78c2      	ldrb	r2, [r0, #3]
   802b8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   802bc:	7882      	ldrb	r2, [r0, #2]
   802be:	4313      	orrs	r3, r2
   802c0:	0149      	lsls	r1, r1, #5
   802c2:	f101 2140 	add.w	r1, r1, #1073758208	; 0x40004000
   802c6:	f501 2130 	add.w	r1, r1, #720896	; 0xb0000
   802ca:	f8c1 3214 	str.w	r3, [r1, #532]	; 0x214
		CAN0->CAN_MB[tx_mb_id].CAN_MDH = can_msg->data[7] << 24 | can_msg->data[6] << 16 | can_msg->data[5] << 8 | can_msg->data[4];
   802ce:	7a42      	ldrb	r2, [r0, #9]
   802d0:	7a03      	ldrb	r3, [r0, #8]
   802d2:	041b      	lsls	r3, r3, #16
   802d4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   802d8:	79c2      	ldrb	r2, [r0, #7]
   802da:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   802de:	7982      	ldrb	r2, [r0, #6]
   802e0:	4313      	orrs	r3, r2
   802e2:	f8c1 3218 	str.w	r3, [r1, #536]	; 0x218
		
		//Set message length and mailbox ready to send
		CAN0->CAN_MB[tx_mb_id].CAN_MCR = (can_msg->data_length << CAN_MCR_MDLC_Pos) | CAN_MCR_MTCR;
   802e6:	7843      	ldrb	r3, [r0, #1]
   802e8:	041b      	lsls	r3, r3, #16
   802ea:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   802ee:	f8c1 321c 	str.w	r3, [r1, #540]	; 0x21c
		return 0;
   802f2:	2000      	movs	r0, #0
   802f4:	4770      	bx	lr
	}
	
	else //Mailbox busy
	{
		return 1;
   802f6:	2001      	movs	r0, #1
	}
	
}
   802f8:	4770      	bx	lr
	...

000802fc <can_receive>:
 * \retval Success(0) or failure(1)
 */
uint8_t can_receive(CAN_MESSAGE* can_msg, uint8_t rx_mb_id)
{
	//Check that mailbox is ready
	if(CAN0->CAN_MB[rx_mb_id].CAN_MSR & CAN_MSR_MRDY)
   802fc:	014b      	lsls	r3, r1, #5
   802fe:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   80302:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   80306:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
   8030a:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   8030e:	d033      	beq.n	80378 <can_receive+0x7c>
{
   80310:	b470      	push	{r4, r5, r6}
	{
		//Get data from CAN mailbox
		uint32_t data_low = CAN0->CAN_MB[rx_mb_id].CAN_MDL;
   80312:	014b      	lsls	r3, r1, #5
   80314:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   80318:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   8031c:	f8d3 4214 	ldr.w	r4, [r3, #532]	; 0x214
		uint32_t data_high = CAN0->CAN_MB[rx_mb_id].CAN_MDH;
   80320:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
		
		//Get message ID
		can_msg->id = (uint8_t)((CAN0->CAN_MB[rx_mb_id].CAN_MID & CAN_MID_MIDvA_Msk) >> CAN_MID_MIDvA_Pos);
   80324:	f8d3 5208 	ldr.w	r5, [r3, #520]	; 0x208
   80328:	f3c5 4587 	ubfx	r5, r5, #18, #8
   8032c:	7005      	strb	r5, [r0, #0]
		
		//Get data length
		can_msg->data_length = (uint8_t)((CAN0->CAN_MB[rx_mb_id].CAN_MSR & CAN_MSR_MDLC_Msk) >> CAN_MSR_MDLC_Pos);
   8032e:	f8d3 5210 	ldr.w	r5, [r3, #528]	; 0x210
   80332:	f3c5 4503 	ubfx	r5, r5, #16, #4
   80336:	7045      	strb	r5, [r0, #1]
		
		//Put data in CAN_MESSAGE object
		for(int i = 0; i < can_msg->data_length;i++)
   80338:	2300      	movs	r3, #0
   8033a:	e003      	b.n	80344 <can_receive+0x48>
				can_msg->data[i] = (char)(data_low & 0xff);
				data_low = data_low >> 8;
			}
			else
			{
				can_msg->data[i] = (uint8_t)(data_high & 0xff);
   8033c:	18c6      	adds	r6, r0, r3
   8033e:	70b2      	strb	r2, [r6, #2]
				data_high = data_high >> 8;
   80340:	0a12      	lsrs	r2, r2, #8
		for(int i = 0; i < can_msg->data_length;i++)
   80342:	3301      	adds	r3, #1
   80344:	42ab      	cmp	r3, r5
   80346:	da05      	bge.n	80354 <can_receive+0x58>
			if(i < 4)
   80348:	2b03      	cmp	r3, #3
   8034a:	dcf7      	bgt.n	8033c <can_receive+0x40>
				can_msg->data[i] = (char)(data_low & 0xff);
   8034c:	18c6      	adds	r6, r0, r3
   8034e:	70b4      	strb	r4, [r6, #2]
				data_low = data_low >> 8;
   80350:	0a24      	lsrs	r4, r4, #8
   80352:	e7f6      	b.n	80342 <can_receive+0x46>
			}
		}
		
		//Reset for new receive
		CAN0->CAN_MB[rx_mb_id].CAN_MMR = CAN_MMR_MOT_MB_RX;
   80354:	4b09      	ldr	r3, [pc, #36]	; (8037c <can_receive+0x80>)
   80356:	f101 0210 	add.w	r2, r1, #16
   8035a:	0152      	lsls	r2, r2, #5
   8035c:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
   80360:	5098      	str	r0, [r3, r2]
		CAN0->CAN_MB[rx_mb_id].CAN_MCR |= CAN_MCR_MTCR;
   80362:	eb03 1141 	add.w	r1, r3, r1, lsl #5
   80366:	f8d1 321c 	ldr.w	r3, [r1, #540]	; 0x21c
   8036a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   8036e:	f8c1 321c 	str.w	r3, [r1, #540]	; 0x21c
		return 0;
   80372:	2000      	movs	r0, #0
	}
	else //Mailbox busy
	{
		return 1;
	}
}
   80374:	bc70      	pop	{r4, r5, r6}
   80376:	4770      	bx	lr
		return 1;
   80378:	2001      	movs	r0, #1
   8037a:	4770      	bx	lr
   8037c:	400b4000 	.word	0x400b4000

00080380 <CAN0_Handler>:
 * \param void
 *
 * \retval 
 */
void CAN0_Handler( void )
{
   80380:	b510      	push	{r4, lr}
   80382:	b084      	sub	sp, #16
	//if(DEBUG_INTERRUPT)printf("CAN0 interrupt\n\r");
	char can_sr = CAN0->CAN_SR; 
   80384:	4b2f      	ldr	r3, [pc, #188]	; (80444 <CAN0_Handler+0xc4>)
   80386:	691c      	ldr	r4, [r3, #16]
	
	//RX interrupt
	if(can_sr & (CAN_SR_MB1 | CAN_SR_MB2) )//Only mailbox 1 and 2 specified for receiving
   80388:	f014 0f06 	tst.w	r4, #6
   8038c:	d023      	beq.n	803d6 <CAN0_Handler+0x56>
	{
		CAN_MESSAGE message;
		
		if(can_sr & CAN_SR_MB1)  //Mailbox 1 event
   8038e:	f014 0f02 	tst.w	r4, #2
   80392:	d108      	bne.n	803a6 <CAN0_Handler+0x26>
		{
			can_receive(&message, 1);

		}
		else if(can_sr & CAN_SR_MB2) //Mailbox 2 event
   80394:	f014 0f04 	tst.w	r4, #4
   80398:	d00a      	beq.n	803b0 <CAN0_Handler+0x30>
		
		{
			can_receive(&message, 2);
   8039a:	2102      	movs	r1, #2
   8039c:	a801      	add	r0, sp, #4
   8039e:	4b2a      	ldr	r3, [pc, #168]	; (80448 <CAN0_Handler+0xc8>)
   803a0:	4798      	blx	r3
			printf("CAN0 message arrived in non-used mailbox\n\r");
		}

		if(DEBUG_INTERRUPT)printf("message id: %d\n\r", message.id);
		if(DEBUG_INTERRUPT)printf("message data length: %d\n\r", message.data_length);
		for (int i = 0; i < message.data_length; i++)
   803a2:	2300      	movs	r3, #0
   803a4:	e009      	b.n	803ba <CAN0_Handler+0x3a>
			can_receive(&message, 1);
   803a6:	2101      	movs	r1, #1
   803a8:	a801      	add	r0, sp, #4
   803aa:	4b27      	ldr	r3, [pc, #156]	; (80448 <CAN0_Handler+0xc8>)
   803ac:	4798      	blx	r3
   803ae:	e7f8      	b.n	803a2 <CAN0_Handler+0x22>
			printf("CAN0 message arrived in non-used mailbox\n\r");
   803b0:	4826      	ldr	r0, [pc, #152]	; (8044c <CAN0_Handler+0xcc>)
   803b2:	4b27      	ldr	r3, [pc, #156]	; (80450 <CAN0_Handler+0xd0>)
   803b4:	4798      	blx	r3
   803b6:	e7f4      	b.n	803a2 <CAN0_Handler+0x22>
		for (int i = 0; i < message.data_length; i++)
   803b8:	3301      	adds	r3, #1
   803ba:	f89d 2005 	ldrb.w	r2, [sp, #5]
   803be:	4293      	cmp	r3, r2
   803c0:	dbfa      	blt.n	803b8 <CAN0_Handler+0x38>
		{
			if(DEBUG_INTERRUPT)printf("%d ", message.data[i]);
		}
		
		/* Joystick and slider values: */
		if(message.id == 1){
   803c2:	f89d 3004 	ldrb.w	r3, [sp, #4]
   803c6:	2b01      	cmp	r3, #1
   803c8:	d012      	beq.n	803f0 <CAN0_Handler+0x70>
			received_data_node1.slider_right = message.data[3];
			
		}
		
		/* Left button: */
		if(message.id == 2){
   803ca:	2b02      	cmp	r3, #2
   803cc:	d01e      	beq.n	8040c <CAN0_Handler+0x8c>
			solenoid_flag = true;
		}
		
		/* Game settings: */
		if(message.id == 3){ 
   803ce:	2b03      	cmp	r3, #3
   803d0:	d020      	beq.n	80414 <CAN0_Handler+0x94>
			received_game_settings_node1.game_mode = message.data[1];
			received_game_settings_node1.difficulty = message.data[2];
		}
		
		/* Game start: */
		if(message.id == 4){
   803d2:	2b04      	cmp	r3, #4
   803d4:	d029      	beq.n	8042a <CAN0_Handler+0xaa>
		
		//can_send(&message, 0); //REPLIES WITH THE SAME MESSAGE BACK
		if(DEBUG_INTERRUPT)printf("\n\r");
	}
	
	if(can_sr & CAN_SR_MB0)
   803d6:	f014 0f01 	tst.w	r4, #1
   803da:	d002      	beq.n	803e2 <CAN0_Handler+0x62>
	{
		//if(DEBUG_INTERRUPT) printf("CAN0 MB0 ready to send \n\r");
		
	//Disable interrupt
		CAN0->CAN_IDR = CAN_IER_MB0;
   803dc:	2201      	movs	r2, #1
   803de:	4b19      	ldr	r3, [pc, #100]	; (80444 <CAN0_Handler+0xc4>)
   803e0:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   803e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
   803e6:	4b1b      	ldr	r3, [pc, #108]	; (80454 <CAN0_Handler+0xd4>)
   803e8:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184

	}
	
	NVIC_ClearPendingIRQ(ID_CAN0);
	//sei();
}
   803ec:	b004      	add	sp, #16
   803ee:	bd10      	pop	{r4, pc}
			received_data_node1.joystick_x = message.data[0];
   803f0:	f89d 1006 	ldrb.w	r1, [sp, #6]
   803f4:	4a18      	ldr	r2, [pc, #96]	; (80458 <CAN0_Handler+0xd8>)
   803f6:	7011      	strb	r1, [r2, #0]
			received_data_node1.joystick_y = message.data[1];
   803f8:	f89d 1007 	ldrb.w	r1, [sp, #7]
   803fc:	7051      	strb	r1, [r2, #1]
			received_data_node1.slider_left = message.data[2];
   803fe:	f89d 1008 	ldrb.w	r1, [sp, #8]
   80402:	7091      	strb	r1, [r2, #2]
			received_data_node1.slider_right = message.data[3];
   80404:	f89d 1009 	ldrb.w	r1, [sp, #9]
   80408:	70d1      	strb	r1, [r2, #3]
   8040a:	e7de      	b.n	803ca <CAN0_Handler+0x4a>
			solenoid_flag = true;
   8040c:	2101      	movs	r1, #1
   8040e:	4a13      	ldr	r2, [pc, #76]	; (8045c <CAN0_Handler+0xdc>)
   80410:	7011      	strb	r1, [r2, #0]
   80412:	e7dc      	b.n	803ce <CAN0_Handler+0x4e>
			received_game_settings_node1.use_slider = message.data[0];
   80414:	f89d 1006 	ldrb.w	r1, [sp, #6]
   80418:	4a11      	ldr	r2, [pc, #68]	; (80460 <CAN0_Handler+0xe0>)
   8041a:	7011      	strb	r1, [r2, #0]
			received_game_settings_node1.game_mode = message.data[1];
   8041c:	f89d 1007 	ldrb.w	r1, [sp, #7]
   80420:	7051      	strb	r1, [r2, #1]
			received_game_settings_node1.difficulty = message.data[2];
   80422:	f89d 1008 	ldrb.w	r1, [sp, #8]
   80426:	7091      	strb	r1, [r2, #2]
   80428:	e7d3      	b.n	803d2 <CAN0_Handler+0x52>
			if(message.data[0] == 1){
   8042a:	f89d 3006 	ldrb.w	r3, [sp, #6]
   8042e:	2b01      	cmp	r3, #1
   80430:	d003      	beq.n	8043a <CAN0_Handler+0xba>
				in_game = false;
   80432:	2200      	movs	r2, #0
   80434:	4b0b      	ldr	r3, [pc, #44]	; (80464 <CAN0_Handler+0xe4>)
   80436:	701a      	strb	r2, [r3, #0]
   80438:	e7cd      	b.n	803d6 <CAN0_Handler+0x56>
				in_game = true;
   8043a:	4a0a      	ldr	r2, [pc, #40]	; (80464 <CAN0_Handler+0xe4>)
   8043c:	7013      	strb	r3, [r2, #0]
				game_init_flag = true;
   8043e:	4a0a      	ldr	r2, [pc, #40]	; (80468 <CAN0_Handler+0xe8>)
   80440:	7013      	strb	r3, [r2, #0]
   80442:	e7c8      	b.n	803d6 <CAN0_Handler+0x56>
   80444:	400b4000 	.word	0x400b4000
   80448:	000802fd 	.word	0x000802fd
   8044c:	000818c0 	.word	0x000818c0
   80450:	00080d65 	.word	0x00080d65
   80454:	e000e100 	.word	0xe000e100
   80458:	2000045c 	.word	0x2000045c
   8045c:	20000459 	.word	0x20000459
   80460:	20000460 	.word	0x20000460
   80464:	2000045a 	.word	0x2000045a
   80468:	20000458 	.word	0x20000458

0008046c <dac_init>:
   8046c:	4a0b      	ldr	r2, [pc, #44]	; (8049c <dac_init+0x30>)
   8046e:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
   80472:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   80476:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
   8047a:	f502 6220 	add.w	r2, r2, #2560	; 0xa00
   8047e:	6853      	ldr	r3, [r2, #4]
   80480:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   80484:	6053      	str	r3, [r2, #4]
   80486:	4b06      	ldr	r3, [pc, #24]	; (804a0 <dac_init+0x34>)
   80488:	685a      	ldr	r2, [r3, #4]
   8048a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
   8048e:	605a      	str	r2, [r3, #4]
   80490:	691a      	ldr	r2, [r3, #16]
   80492:	f042 0202 	orr.w	r2, r2, #2
   80496:	611a      	str	r2, [r3, #16]
   80498:	4770      	bx	lr
   8049a:	bf00      	nop
   8049c:	400e0600 	.word	0x400e0600
   804a0:	400c8000 	.word	0x400c8000

000804a4 <dac_write>:
   804a4:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   804a8:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   804ac:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
   804b0:	db01      	blt.n	804b6 <dac_write+0x12>
   804b2:	f640 70ff 	movw	r0, #4095	; 0xfff
   804b6:	4b01      	ldr	r3, [pc, #4]	; (804bc <dac_write+0x18>)
   804b8:	6218      	str	r0, [r3, #32]
   804ba:	4770      	bx	lr
   804bc:	400c8000 	.word	0x400c8000

000804c0 <Dummy_Handler>:
   804c0:	e7fe      	b.n	804c0 <Dummy_Handler>
	...

000804c4 <Reset_Handler>:
   804c4:	b508      	push	{r3, lr}
   804c6:	4b11      	ldr	r3, [pc, #68]	; (8050c <Reset_Handler+0x48>)
   804c8:	4a11      	ldr	r2, [pc, #68]	; (80510 <Reset_Handler+0x4c>)
   804ca:	429a      	cmp	r2, r3
   804cc:	d009      	beq.n	804e2 <Reset_Handler+0x1e>
   804ce:	4b0f      	ldr	r3, [pc, #60]	; (8050c <Reset_Handler+0x48>)
   804d0:	4a0f      	ldr	r2, [pc, #60]	; (80510 <Reset_Handler+0x4c>)
   804d2:	e003      	b.n	804dc <Reset_Handler+0x18>
   804d4:	6811      	ldr	r1, [r2, #0]
   804d6:	6019      	str	r1, [r3, #0]
   804d8:	3304      	adds	r3, #4
   804da:	3204      	adds	r2, #4
   804dc:	490d      	ldr	r1, [pc, #52]	; (80514 <Reset_Handler+0x50>)
   804de:	428b      	cmp	r3, r1
   804e0:	d3f8      	bcc.n	804d4 <Reset_Handler+0x10>
   804e2:	4b0d      	ldr	r3, [pc, #52]	; (80518 <Reset_Handler+0x54>)
   804e4:	e002      	b.n	804ec <Reset_Handler+0x28>
   804e6:	2200      	movs	r2, #0
   804e8:	601a      	str	r2, [r3, #0]
   804ea:	3304      	adds	r3, #4
   804ec:	4a0b      	ldr	r2, [pc, #44]	; (8051c <Reset_Handler+0x58>)
   804ee:	4293      	cmp	r3, r2
   804f0:	d3f9      	bcc.n	804e6 <Reset_Handler+0x22>
   804f2:	4b0b      	ldr	r3, [pc, #44]	; (80520 <Reset_Handler+0x5c>)
   804f4:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   804f8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   804fc:	4a09      	ldr	r2, [pc, #36]	; (80524 <Reset_Handler+0x60>)
   804fe:	6093      	str	r3, [r2, #8]
   80500:	4b09      	ldr	r3, [pc, #36]	; (80528 <Reset_Handler+0x64>)
   80502:	4798      	blx	r3
   80504:	4b09      	ldr	r3, [pc, #36]	; (8052c <Reset_Handler+0x68>)
   80506:	4798      	blx	r3
   80508:	e7fe      	b.n	80508 <Reset_Handler+0x44>
   8050a:	bf00      	nop
   8050c:	20000000 	.word	0x20000000
   80510:	00081998 	.word	0x00081998
   80514:	2000043c 	.word	0x2000043c
   80518:	2000043c 	.word	0x2000043c
   8051c:	20000500 	.word	0x20000500
   80520:	00080000 	.word	0x00080000
   80524:	e000ed00 	.word	0xe000ed00
   80528:	00081751 	.word	0x00081751
   8052c:	000806a1 	.word	0x000806a1

00080530 <SystemInit>:
   80530:	f44f 6380 	mov.w	r3, #1024	; 0x400
   80534:	4a20      	ldr	r2, [pc, #128]	; (805b8 <SystemInit+0x88>)
   80536:	6013      	str	r3, [r2, #0]
   80538:	f502 7200 	add.w	r2, r2, #512	; 0x200
   8053c:	6013      	str	r3, [r2, #0]
   8053e:	4b1f      	ldr	r3, [pc, #124]	; (805bc <SystemInit+0x8c>)
   80540:	6a1b      	ldr	r3, [r3, #32]
   80542:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80546:	d107      	bne.n	80558 <SystemInit+0x28>
   80548:	4a1d      	ldr	r2, [pc, #116]	; (805c0 <SystemInit+0x90>)
   8054a:	4b1c      	ldr	r3, [pc, #112]	; (805bc <SystemInit+0x8c>)
   8054c:	621a      	str	r2, [r3, #32]
   8054e:	4b1b      	ldr	r3, [pc, #108]	; (805bc <SystemInit+0x8c>)
   80550:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80552:	f013 0f01 	tst.w	r3, #1
   80556:	d0fa      	beq.n	8054e <SystemInit+0x1e>
   80558:	4a1a      	ldr	r2, [pc, #104]	; (805c4 <SystemInit+0x94>)
   8055a:	4b18      	ldr	r3, [pc, #96]	; (805bc <SystemInit+0x8c>)
   8055c:	621a      	str	r2, [r3, #32]
   8055e:	4b17      	ldr	r3, [pc, #92]	; (805bc <SystemInit+0x8c>)
   80560:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80562:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   80566:	d0fa      	beq.n	8055e <SystemInit+0x2e>
   80568:	4a14      	ldr	r2, [pc, #80]	; (805bc <SystemInit+0x8c>)
   8056a:	6b13      	ldr	r3, [r2, #48]	; 0x30
   8056c:	f023 0303 	bic.w	r3, r3, #3
   80570:	f043 0301 	orr.w	r3, r3, #1
   80574:	6313      	str	r3, [r2, #48]	; 0x30
   80576:	4b11      	ldr	r3, [pc, #68]	; (805bc <SystemInit+0x8c>)
   80578:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8057a:	f013 0f08 	tst.w	r3, #8
   8057e:	d0fa      	beq.n	80576 <SystemInit+0x46>
   80580:	4a11      	ldr	r2, [pc, #68]	; (805c8 <SystemInit+0x98>)
   80582:	4b0e      	ldr	r3, [pc, #56]	; (805bc <SystemInit+0x8c>)
   80584:	629a      	str	r2, [r3, #40]	; 0x28
   80586:	4b0d      	ldr	r3, [pc, #52]	; (805bc <SystemInit+0x8c>)
   80588:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8058a:	f013 0f02 	tst.w	r3, #2
   8058e:	d0fa      	beq.n	80586 <SystemInit+0x56>
   80590:	2211      	movs	r2, #17
   80592:	4b0a      	ldr	r3, [pc, #40]	; (805bc <SystemInit+0x8c>)
   80594:	631a      	str	r2, [r3, #48]	; 0x30
   80596:	4b09      	ldr	r3, [pc, #36]	; (805bc <SystemInit+0x8c>)
   80598:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8059a:	f013 0f08 	tst.w	r3, #8
   8059e:	d0fa      	beq.n	80596 <SystemInit+0x66>
   805a0:	2212      	movs	r2, #18
   805a2:	4b06      	ldr	r3, [pc, #24]	; (805bc <SystemInit+0x8c>)
   805a4:	631a      	str	r2, [r3, #48]	; 0x30
   805a6:	4b05      	ldr	r3, [pc, #20]	; (805bc <SystemInit+0x8c>)
   805a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   805aa:	f013 0f08 	tst.w	r3, #8
   805ae:	d0fa      	beq.n	805a6 <SystemInit+0x76>
   805b0:	4a06      	ldr	r2, [pc, #24]	; (805cc <SystemInit+0x9c>)
   805b2:	4b07      	ldr	r3, [pc, #28]	; (805d0 <SystemInit+0xa0>)
   805b4:	601a      	str	r2, [r3, #0]
   805b6:	4770      	bx	lr
   805b8:	400e0a00 	.word	0x400e0a00
   805bc:	400e0600 	.word	0x400e0600
   805c0:	00370809 	.word	0x00370809
   805c4:	01370809 	.word	0x01370809
   805c8:	200d3f01 	.word	0x200d3f01
   805cc:	0501bd00 	.word	0x0501bd00
   805d0:	20000000 	.word	0x20000000

000805d4 <game_init>:

#include "PID.h"
#include "can_controller.h"
#include "Game.h"

void game_init(){
   805d4:	b510      	push	{r4, lr}
	
	IR_flag = 0;
   805d6:	2400      	movs	r4, #0
   805d8:	4b07      	ldr	r3, [pc, #28]	; (805f8 <game_init+0x24>)
   805da:	701c      	strb	r4, [r3, #0]
	previous_time = 0;
   805dc:	4b07      	ldr	r3, [pc, #28]	; (805fc <game_init+0x28>)
   805de:	601c      	str	r4, [r3, #0]
	score = 0;
   805e0:	4b07      	ldr	r3, [pc, #28]	; (80600 <game_init+0x2c>)
   805e2:	601c      	str	r4, [r3, #0]
	time_over_threshold = 0;
   805e4:	4b07      	ldr	r3, [pc, #28]	; (80604 <game_init+0x30>)
   805e6:	601c      	str	r4, [r3, #0]
	
	pwm_init();
   805e8:	4b07      	ldr	r3, [pc, #28]	; (80608 <game_init+0x34>)
   805ea:	4798      	blx	r3
	motor_init();
   805ec:	4b07      	ldr	r3, [pc, #28]	; (8060c <game_init+0x38>)
   805ee:	4798      	blx	r3
	
	game_init_flag = false;
   805f0:	4b07      	ldr	r3, [pc, #28]	; (80610 <game_init+0x3c>)
   805f2:	701c      	strb	r4, [r3, #0]
   805f4:	bd10      	pop	{r4, pc}
   805f6:	bf00      	nop
   805f8:	20000464 	.word	0x20000464
   805fc:	20000478 	.word	0x20000478
   80600:	20000474 	.word	0x20000474
   80604:	2000047c 	.word	0x2000047c
   80608:	00080d89 	.word	0x00080d89
   8060c:	000807b5 	.word	0x000807b5
   80610:	20000458 	.word	0x20000458

00080614 <game_check_loss>:
	
	//TC0->TC_CHANNEL->TC_CCR |= TC_CCR_SWTRG; //RESETS TIMER
}


void game_check_loss(){
   80614:	b508      	push	{r3, lr}
	
	int value = adc_read();
   80616:	4b1a      	ldr	r3, [pc, #104]	; (80680 <game_check_loss+0x6c>)
   80618:	4798      	blx	r3
	
	if (value < IR_threshold){
   8061a:	4b1a      	ldr	r3, [pc, #104]	; (80684 <game_check_loss+0x70>)
   8061c:	681b      	ldr	r3, [r3, #0]
   8061e:	4298      	cmp	r0, r3
   80620:	da28      	bge.n	80674 <game_check_loss+0x60>
		
		if ((timer_read() - time_over_threshold) >  noise_delay){
   80622:	4b19      	ldr	r3, [pc, #100]	; (80688 <game_check_loss+0x74>)
   80624:	4798      	blx	r3
   80626:	4b19      	ldr	r3, [pc, #100]	; (8068c <game_check_loss+0x78>)
   80628:	681b      	ldr	r3, [r3, #0]
   8062a:	1ac0      	subs	r0, r0, r3
   8062c:	4b15      	ldr	r3, [pc, #84]	; (80684 <game_check_loss+0x70>)
   8062e:	685b      	ldr	r3, [r3, #4]
   80630:	4298      	cmp	r0, r3
   80632:	dd23      	ble.n	8067c <game_check_loss+0x68>
			
			if ((timer_read() - previous_time) > bounce_delay){
   80634:	4b14      	ldr	r3, [pc, #80]	; (80688 <game_check_loss+0x74>)
   80636:	4798      	blx	r3
   80638:	4b15      	ldr	r3, [pc, #84]	; (80690 <game_check_loss+0x7c>)
   8063a:	681b      	ldr	r3, [r3, #0]
   8063c:	1ac0      	subs	r0, r0, r3
   8063e:	4b11      	ldr	r3, [pc, #68]	; (80684 <game_check_loss+0x70>)
   80640:	689b      	ldr	r3, [r3, #8]
   80642:	4298      	cmp	r0, r3
   80644:	dd02      	ble.n	8064c <game_check_loss+0x38>
				IR_flag = 0;
   80646:	2200      	movs	r2, #0
   80648:	4b12      	ldr	r3, [pc, #72]	; (80694 <game_check_loss+0x80>)
   8064a:	701a      	strb	r2, [r3, #0]
			}
			if (IR_flag == 0){
   8064c:	4b11      	ldr	r3, [pc, #68]	; (80694 <game_check_loss+0x80>)
   8064e:	781b      	ldrb	r3, [r3, #0]
   80650:	b123      	cbz	r3, 8065c <game_check_loss+0x48>
				score_message.id = 5;
				score_message.data_length = 1;
				score_message.data[0] = 1;
				can_send(&score_message, 0); // Send can message for each 
			}
			previous_time = timer_read();
   80652:	4b0d      	ldr	r3, [pc, #52]	; (80688 <game_check_loss+0x74>)
   80654:	4798      	blx	r3
   80656:	4b0e      	ldr	r3, [pc, #56]	; (80690 <game_check_loss+0x7c>)
   80658:	6018      	str	r0, [r3, #0]
   8065a:	bd08      	pop	{r3, pc}
				IR_flag = 1;
   8065c:	2301      	movs	r3, #1
   8065e:	4a0d      	ldr	r2, [pc, #52]	; (80694 <game_check_loss+0x80>)
   80660:	7013      	strb	r3, [r2, #0]
				score_message.id = 5;
   80662:	480d      	ldr	r0, [pc, #52]	; (80698 <game_check_loss+0x84>)
   80664:	2205      	movs	r2, #5
   80666:	7002      	strb	r2, [r0, #0]
				score_message.data_length = 1;
   80668:	7043      	strb	r3, [r0, #1]
				score_message.data[0] = 1;
   8066a:	7083      	strb	r3, [r0, #2]
				can_send(&score_message, 0); // Send can message for each 
   8066c:	2100      	movs	r1, #0
   8066e:	4b0b      	ldr	r3, [pc, #44]	; (8069c <game_check_loss+0x88>)
   80670:	4798      	blx	r3
   80672:	e7ee      	b.n	80652 <game_check_loss+0x3e>
			
		}
		
	}
	else{
		time_over_threshold = timer_read();
   80674:	4b04      	ldr	r3, [pc, #16]	; (80688 <game_check_loss+0x74>)
   80676:	4798      	blx	r3
   80678:	4b04      	ldr	r3, [pc, #16]	; (8068c <game_check_loss+0x78>)
   8067a:	6018      	str	r0, [r3, #0]
   8067c:	bd08      	pop	{r3, pc}
   8067e:	bf00      	nop
   80680:	0008018d 	.word	0x0008018d
   80684:	20000004 	.word	0x20000004
   80688:	00080e31 	.word	0x00080e31
   8068c:	2000047c 	.word	0x2000047c
   80690:	20000478 	.word	0x20000478
   80694:	20000464 	.word	0x20000464
   80698:	20000468 	.word	0x20000468
   8069c:	00080279 	.word	0x00080279

000806a0 <main>:
RECEIVED_DATA received_data_node1;
PID_DATA pid_data1;


int main(void)
{
   806a0:	b510      	push	{r4, lr}
    /* Initialize the SAM system */
    SystemInit();
   806a2:	4b2b      	ldr	r3, [pc, #172]	; (80750 <main+0xb0>)
   806a4:	4798      	blx	r3
	
	
	configure_uart(); //STARTS THE UART
   806a6:	4b2b      	ldr	r3, [pc, #172]	; (80754 <main+0xb4>)
   806a8:	4798      	blx	r3
	
	can_init(0x1292177,1,2);
   806aa:	2202      	movs	r2, #2
   806ac:	2101      	movs	r1, #1
   806ae:	482a      	ldr	r0, [pc, #168]	; (80758 <main+0xb8>)
   806b0:	4b2a      	ldr	r3, [pc, #168]	; (8075c <main+0xbc>)
   806b2:	4798      	blx	r3
	
	pwm_init();
   806b4:	4b2a      	ldr	r3, [pc, #168]	; (80760 <main+0xc0>)
   806b6:	4798      	blx	r3
	
	adc_init();
   806b8:	4b2a      	ldr	r3, [pc, #168]	; (80764 <main+0xc4>)
   806ba:	4798      	blx	r3
	
	timer_init();
   806bc:	4b2a      	ldr	r3, [pc, #168]	; (80768 <main+0xc8>)
   806be:	4798      	blx	r3
		
	game_init();
   806c0:	4b2a      	ldr	r3, [pc, #168]	; (8076c <main+0xcc>)
   806c2:	4798      	blx	r3
	
	dac_init();
   806c4:	4b2a      	ldr	r3, [pc, #168]	; (80770 <main+0xd0>)
   806c6:	4798      	blx	r3
	
	motor_init();
   806c8:	4b2a      	ldr	r3, [pc, #168]	; (80774 <main+0xd4>)
   806ca:	4798      	blx	r3
	
	solenoid_init();
   806cc:	4b2a      	ldr	r3, [pc, #168]	; (80778 <main+0xd8>)
   806ce:	4798      	blx	r3
	
	pid_init(K_P, K_I, K_D, &pid_data1);
   806d0:	4b2a      	ldr	r3, [pc, #168]	; (8077c <main+0xdc>)
   806d2:	2200      	movs	r2, #0
   806d4:	210a      	movs	r1, #10
   806d6:	2005      	movs	r0, #5
   806d8:	4c29      	ldr	r4, [pc, #164]	; (80780 <main+0xe0>)
   806da:	47a0      	blx	r4
	
	
	
	WDT->WDT_MR = WDT_MR_WDDIS; //DISABLES THE WATCHDOG
   806dc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   806e0:	4b28      	ldr	r3, [pc, #160]	; (80784 <main+0xe4>)
   806e2:	605a      	str	r2, [r3, #4]
	
	PIOA->PIO_PER = PIO_PA19 | PIO_PA20; // PIN I/O SELECT
   806e4:	f5a3 6345 	sub.w	r3, r3, #3152	; 0xc50
   806e8:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
   806ec:	601a      	str	r2, [r3, #0]
	PIOA->PIO_OER = PIO_PA19 | PIO_PA20; // PIN OUTPUT SELECT
   806ee:	611a      	str	r2, [r3, #16]
	
	PIOA->PIO_SODR = PIO_PA19; //PIN SET OUTPUT DATA REGISTER
   806f0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   806f4:	631a      	str	r2, [r3, #48]	; 0x30
	//PIOA->PIO_SODR = PIO_PA20
	
	int T = 20; // Running time in ms (0.02 sec)
	uint32_t prev_time_reading = 0;
   806f6:	2400      	movs	r4, #0
   806f8:	e006      	b.n	80708 <main+0x68>
		
		CAN0_Handler();
		
		/* In game: */
		if(in_game){
			if(game_init_flag)game_init();
   806fa:	4b1c      	ldr	r3, [pc, #112]	; (8076c <main+0xcc>)
   806fc:	4798      	blx	r3
   806fe:	e00d      	b.n	8071c <main+0x7c>
				
		}
		
		/* Idle: */
		else{
			motor_disable(); // Disable 
   80700:	4b21      	ldr	r3, [pc, #132]	; (80788 <main+0xe8>)
   80702:	4798      	blx	r3
			pwm_disable();
   80704:	4b21      	ldr	r3, [pc, #132]	; (8078c <main+0xec>)
   80706:	4798      	blx	r3
		CAN0_Handler();
   80708:	4b21      	ldr	r3, [pc, #132]	; (80790 <main+0xf0>)
   8070a:	4798      	blx	r3
		if(in_game){
   8070c:	4b21      	ldr	r3, [pc, #132]	; (80794 <main+0xf4>)
   8070e:	781b      	ldrb	r3, [r3, #0]
   80710:	2b00      	cmp	r3, #0
   80712:	d0f5      	beq.n	80700 <main+0x60>
			if(game_init_flag)game_init();
   80714:	4b20      	ldr	r3, [pc, #128]	; (80798 <main+0xf8>)
   80716:	781b      	ldrb	r3, [r3, #0]
   80718:	2b00      	cmp	r3, #0
   8071a:	d1ee      	bne.n	806fa <main+0x5a>
			game_check_loss();
   8071c:	4b1f      	ldr	r3, [pc, #124]	; (8079c <main+0xfc>)
   8071e:	4798      	blx	r3
			if (timer_ms_read() - prev_time_reading >= sampling_interval){ // run IF-loop each 0.02 seconds
   80720:	4b1f      	ldr	r3, [pc, #124]	; (807a0 <main+0x100>)
   80722:	4798      	blx	r3
   80724:	1b00      	subs	r0, r0, r4
   80726:	2813      	cmp	r0, #19
   80728:	d9ee      	bls.n	80708 <main+0x68>
				pid_controller1(received_data_node1.joystick_y, &pid_data1);
   8072a:	4914      	ldr	r1, [pc, #80]	; (8077c <main+0xdc>)
   8072c:	4b1d      	ldr	r3, [pc, #116]	; (807a4 <main+0x104>)
   8072e:	7858      	ldrb	r0, [r3, #1]
   80730:	4b1d      	ldr	r3, [pc, #116]	; (807a8 <main+0x108>)
   80732:	4798      	blx	r3
				prev_time_reading = timer_ms_read();
   80734:	4b1a      	ldr	r3, [pc, #104]	; (807a0 <main+0x100>)
   80736:	4798      	blx	r3
   80738:	4604      	mov	r4, r0
				if (solenoid_flag){
   8073a:	4b1c      	ldr	r3, [pc, #112]	; (807ac <main+0x10c>)
   8073c:	781b      	ldrb	r3, [r3, #0]
   8073e:	2b00      	cmp	r3, #0
   80740:	d0e2      	beq.n	80708 <main+0x68>
					solenoid_fire();
   80742:	4b1b      	ldr	r3, [pc, #108]	; (807b0 <main+0x110>)
   80744:	4798      	blx	r3
					solenoid_flag = false;
   80746:	2200      	movs	r2, #0
   80748:	4b18      	ldr	r3, [pc, #96]	; (807ac <main+0x10c>)
   8074a:	701a      	strb	r2, [r3, #0]
   8074c:	e7dc      	b.n	80708 <main+0x68>
   8074e:	bf00      	nop
   80750:	00080531 	.word	0x00080531
   80754:	00080e79 	.word	0x00080e79
   80758:	01292177 	.word	0x01292177
   8075c:	00080199 	.word	0x00080199
   80760:	00080d89 	.word	0x00080d89
   80764:	00080161 	.word	0x00080161
   80768:	00080e01 	.word	0x00080e01
   8076c:	000805d5 	.word	0x000805d5
   80770:	0008046d 	.word	0x0008046d
   80774:	000807b5 	.word	0x000807b5
   80778:	00080805 	.word	0x00080805
   8077c:	20000480 	.word	0x20000480
   80780:	000808fd 	.word	0x000808fd
   80784:	400e1a50 	.word	0x400e1a50
   80788:	000808ed 	.word	0x000808ed
   8078c:	00080df5 	.word	0x00080df5
   80790:	00080381 	.word	0x00080381
   80794:	2000045a 	.word	0x2000045a
   80798:	20000458 	.word	0x20000458
   8079c:	00080615 	.word	0x00080615
   807a0:	00080e61 	.word	0x00080e61
   807a4:	2000045c 	.word	0x2000045c
   807a8:	00080919 	.word	0x00080919
   807ac:	20000459 	.word	0x20000459
   807b0:	0008083d 	.word	0x0008083d

000807b4 <motor_init>:
 */ 
#include "sam.h"
#include "uart.h"
#include "PID.h"

void motor_init(){
   807b4:	b410      	push	{r4}
	
	
	PIN 40-33 INPUT
	*/
	
	PMC->PMC_PCER0 |= 1 << ID_PIOC; //Allows power
   807b6:	4b10      	ldr	r3, [pc, #64]	; (807f8 <motor_init+0x44>)
   807b8:	691a      	ldr	r2, [r3, #16]
   807ba:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   807be:	611a      	str	r2, [r3, #16]
	PMC->PMC_PCER0 |= 1 << ID_PIOD; //Allows power
   807c0:	691a      	ldr	r2, [r3, #16]
   807c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   807c6:	611a      	str	r2, [r3, #16]
	
	
	
	
	PIOC->PIO_PER |= PIO_PC1 | PIO_PC2 | PIO_PC3 | PIO_PC4 | PIO_PC5 | PIO_PC5 | PIO_PC6 | PIO_PC7 | PIO_PC8;
   807c8:	4a0c      	ldr	r2, [pc, #48]	; (807fc <motor_init+0x48>)
   807ca:	6813      	ldr	r3, [r2, #0]
   807cc:	f443 73ff 	orr.w	r3, r3, #510	; 0x1fe
   807d0:	6013      	str	r3, [r2, #0]
	PIOD->PIO_PER |= PIO_PD10 | PIO_PD9 | PIO_PD2 | PIO_PD1 | PIO_PD0;
   807d2:	4b0b      	ldr	r3, [pc, #44]	; (80800 <motor_init+0x4c>)
   807d4:	6818      	ldr	r0, [r3, #0]
   807d6:	f240 6407 	movw	r4, #1543	; 0x607
   807da:	4320      	orrs	r0, r4
   807dc:	6018      	str	r0, [r3, #0]
	
	PIOD->PIO_OER |= PIO_PD10 | PIO_PD9 | PIO_PD2 | PIO_PD1 | PIO_PD0; //Set as output
   807de:	6919      	ldr	r1, [r3, #16]
   807e0:	4321      	orrs	r1, r4
   807e2:	6119      	str	r1, [r3, #16]
	PIOC->PIO_PUER |= PIO_PC1 | PIO_PC2 | PIO_PC3 | PIO_PC4 | PIO_PC5 | PIO_PC5 | PIO_PC6 | PIO_PC7 | PIO_PC8; //Enable pull up resistors
   807e4:	6e51      	ldr	r1, [r2, #100]	; 0x64
   807e6:	f441 71ff 	orr.w	r1, r1, #510	; 0x1fe
   807ea:	6651      	str	r1, [r2, #100]	; 0x64
	
	PIOD->PIO_SODR |= PIO_PD1; // SETS THE NOT RESET
   807ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   807ee:	f042 0202 	orr.w	r2, r2, #2
   807f2:	631a      	str	r2, [r3, #48]	; 0x30
	
}
   807f4:	bc10      	pop	{r4}
   807f6:	4770      	bx	lr
   807f8:	400e0600 	.word	0x400e0600
   807fc:	400e1200 	.word	0x400e1200
   80800:	400e1400 	.word	0x400e1400

00080804 <solenoid_init>:

void solenoid_init(){
	
	
	PMC->PMC_PCER0 |= 1 << ID_PIOC;
   80804:	4a0a      	ldr	r2, [pc, #40]	; (80830 <solenoid_init+0x2c>)
   80806:	6913      	ldr	r3, [r2, #16]
   80808:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   8080c:	6113      	str	r3, [r2, #16]
	
	PIOC->PIO_PER |= PIO_PC12;
   8080e:	4b09      	ldr	r3, [pc, #36]	; (80834 <solenoid_init+0x30>)
   80810:	681a      	ldr	r2, [r3, #0]
   80812:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
   80816:	601a      	str	r2, [r3, #0]
	PIOC->PIO_OER |= PIO_PC12;
   80818:	691a      	ldr	r2, [r3, #16]
   8081a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
   8081e:	611a      	str	r2, [r3, #16]
	
	PIOC->PIO_SODR |= PIO_PC12;
   80820:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   80822:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
   80826:	631a      	str	r2, [r3, #48]	; 0x30
	
	solenoid_flag = false;
   80828:	2200      	movs	r2, #0
   8082a:	4b03      	ldr	r3, [pc, #12]	; (80838 <solenoid_init+0x34>)
   8082c:	701a      	strb	r2, [r3, #0]
   8082e:	4770      	bx	lr
   80830:	400e0600 	.word	0x400e0600
   80834:	400e1200 	.word	0x400e1200
   80838:	20000459 	.word	0x20000459

0008083c <solenoid_fire>:
}

void solenoid_fire(){
   8083c:	b510      	push	{r4, lr}
	
	
	PIOC->PIO_CODR |= PIO_PC12;
   8083e:	4c07      	ldr	r4, [pc, #28]	; (8085c <solenoid_fire+0x20>)
   80840:	6b63      	ldr	r3, [r4, #52]	; 0x34
   80842:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   80846:	6363      	str	r3, [r4, #52]	; 0x34
	
	//Inputs a inverse pulse
	delay_micros_10(6000);
   80848:	f241 7070 	movw	r0, #6000	; 0x1770
   8084c:	4b04      	ldr	r3, [pc, #16]	; (80860 <solenoid_fire+0x24>)
   8084e:	4798      	blx	r3
	PIOC->PIO_SODR |= PIO_PC12;
   80850:	6b23      	ldr	r3, [r4, #48]	; 0x30
   80852:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   80856:	6323      	str	r3, [r4, #48]	; 0x30
   80858:	bd10      	pop	{r4, pc}
   8085a:	bf00      	nop
   8085c:	400e1200 	.word	0x400e1200
   80860:	00080e3d 	.word	0x00080e3d

00080864 <encoder_read>:
}


uint16_t encoder_read(void){ // Target area is about 8561 -> 0, asuming the encoder is at the right most position
   80864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t value_low;
	uint8_t value_high;
	PIOD->PIO_CODR |= PIO_PD0;
   80866:	4c10      	ldr	r4, [pc, #64]	; (808a8 <encoder_read+0x44>)
   80868:	6b63      	ldr	r3, [r4, #52]	; 0x34
   8086a:	f043 0301 	orr.w	r3, r3, #1
   8086e:	6363      	str	r3, [r4, #52]	; 0x34
	PIOD->PIO_CODR |= PIO_PD2;
   80870:	6b63      	ldr	r3, [r4, #52]	; 0x34
   80872:	f043 0304 	orr.w	r3, r3, #4
   80876:	6363      	str	r3, [r4, #52]	; 0x34
	//DELAY 20 micros
	delay_micros_10(2);
   80878:	2002      	movs	r0, #2
   8087a:	4f0c      	ldr	r7, [pc, #48]	; (808ac <encoder_read+0x48>)
   8087c:	47b8      	blx	r7
	
	value_high = PIOC->PIO_PDSR >> 1;
   8087e:	4e0c      	ldr	r6, [pc, #48]	; (808b0 <encoder_read+0x4c>)
   80880:	6bf5      	ldr	r5, [r6, #60]	; 0x3c
   80882:	086d      	lsrs	r5, r5, #1
	PIOD->PIO_SODR |= PIO_PD2;
   80884:	6b23      	ldr	r3, [r4, #48]	; 0x30
   80886:	f043 0304 	orr.w	r3, r3, #4
   8088a:	6323      	str	r3, [r4, #48]	; 0x30
	//delay 20 micros
	delay_micros_10(2);
   8088c:	2002      	movs	r0, #2
   8088e:	47b8      	blx	r7
	
	value_low = PIOC->PIO_PDSR >> 1;
   80890:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
   80892:	f3c0 0047 	ubfx	r0, r0, #1, #8
	PIOD->PIO_SODR |= PIO_PD0;
   80896:	6b23      	ldr	r3, [r4, #48]	; 0x30
   80898:	f043 0301 	orr.w	r3, r3, #1
   8089c:	6323      	str	r3, [r4, #48]	; 0x30
	
	uint16_t encoder = ((value_high << 8) | (value_low));
   8089e:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
	
	//printf("%d \r \n", encoder);
	//printf("%d \r \n", value_high);
	return encoder;
}
   808a2:	b280      	uxth	r0, r0
   808a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   808a6:	bf00      	nop
   808a8:	400e1400 	.word	0x400e1400
   808ac:	00080e3d 	.word	0x00080e3d
   808b0:	400e1200 	.word	0x400e1200

000808b4 <motor_write>:


void motor_write(value){ // input 0-200 -> output 0-100 / 0-5V & direction
   808b4:	b508      	push	{r3, lr}
	
	PIOD->PIO_SODR |= PIO_PD9; //enables motor
   808b6:	4a0b      	ldr	r2, [pc, #44]	; (808e4 <motor_write+0x30>)
   808b8:	6b13      	ldr	r3, [r2, #48]	; 0x30
   808ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   808be:	6313      	str	r3, [r2, #48]	; 0x30
	
	if (value > 101) { //Chooses direction right if over 100
   808c0:	2865      	cmp	r0, #101	; 0x65
   808c2:	dc09      	bgt.n	808d8 <motor_write+0x24>
		PIOD->PIO_SODR |= PIO_PD10;
		value -= 100; //Sets it to 0-100 right speed
	}
	else{
		PIOD->PIO_CODR |= PIO_PD10;
   808c4:	4a07      	ldr	r2, [pc, #28]	; (808e4 <motor_write+0x30>)
   808c6:	6b53      	ldr	r3, [r2, #52]	; 0x34
   808c8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   808cc:	6353      	str	r3, [r2, #52]	; 0x34
		value = 100 - value; // Sets it to 100 - 0 -> 0 - 100
   808ce:	f1c0 0064 	rsb	r0, r0, #100	; 0x64
	}
	
	
	dac_write(value);
   808d2:	4b05      	ldr	r3, [pc, #20]	; (808e8 <motor_write+0x34>)
   808d4:	4798      	blx	r3
   808d6:	bd08      	pop	{r3, pc}
		PIOD->PIO_SODR |= PIO_PD10;
   808d8:	6b13      	ldr	r3, [r2, #48]	; 0x30
   808da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   808de:	6313      	str	r3, [r2, #48]	; 0x30
		value -= 100; //Sets it to 0-100 right speed
   808e0:	3864      	subs	r0, #100	; 0x64
   808e2:	e7f6      	b.n	808d2 <motor_write+0x1e>
   808e4:	400e1400 	.word	0x400e1400
   808e8:	000804a5 	.word	0x000804a5

000808ec <motor_disable>:
	// Writes from 0-4095 -> 0-5 V
	
}

void motor_disable(){
	PIOD->PIO_CODR |= PIO_PD9; //Disables motor
   808ec:	4a02      	ldr	r2, [pc, #8]	; (808f8 <motor_disable+0xc>)
   808ee:	6b53      	ldr	r3, [r2, #52]	; 0x34
   808f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   808f4:	6353      	str	r3, [r2, #52]	; 0x34
   808f6:	4770      	bx	lr
   808f8:	400e1400 	.word	0x400e1400

000808fc <pid_init>:

#include "PID.h"

void pid_init(int32_t P_factor, int32_t I_factor, int32_t D_factor, struct pid_data *pid){ // From example in lab lectures
	
	pid->KP = 0.8*SCALING_FACTOR; // 0.8 works
   808fc:	f44f 7248 	mov.w	r2, #800	; 0x320
   80900:	601a      	str	r2, [r3, #0]
	pid->KI = 0.4*SCALING_FACTOR; // 0.4
   80902:	f44f 72c8 	mov.w	r2, #400	; 0x190
   80906:	605a      	str	r2, [r3, #4]
	pid->KD = 0.1*SCALING_FACTOR; // 0.1
   80908:	2264      	movs	r2, #100	; 0x64
   8090a:	609a      	str	r2, [r3, #8]
	
	pid->sampling_time = sampling_interval;
   8090c:	2214      	movs	r2, #20
   8090e:	60da      	str	r2, [r3, #12]
	pid->prev_error = 0;
   80910:	2200      	movs	r2, #0
   80912:	611a      	str	r2, [r3, #16]
	pid->prev_ui = 0;
   80914:	615a      	str	r2, [r3, #20]
   80916:	4770      	bx	lr

00080918 <pid_controller1>:

}


void pid_controller1(uint8_t reference, struct pid_data *pid){ //based on lab notes
   80918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8091c:	b083      	sub	sp, #12
   8091e:	4606      	mov	r6, r0
   80920:	460d      	mov	r5, r1
	// Sensor reading y:
	int32_t sensor_value = encoder_read(); // y: 0-200 (43.5)
   80922:	4b55      	ldr	r3, [pc, #340]	; (80a78 <pid_controller1+0x160>)
   80924:	4798      	blx	r3
	if (sensor_value > 10000)sensor_value = 0;
   80926:	f242 7310 	movw	r3, #10000	; 0x2710
   8092a:	4298      	cmp	r0, r3
   8092c:	dd00      	ble.n	80930 <pid_controller1+0x18>
   8092e:	2000      	movs	r0, #0
	sensor_value = (sensor_value*200)/encoder_range; // Box 15 - 0-1900
   80930:	24c8      	movs	r4, #200	; 0xc8
   80932:	fb04 f000 	mul.w	r0, r4, r0
   80936:	4b51      	ldr	r3, [pc, #324]	; (80a7c <pid_controller1+0x164>)
   80938:	fb83 2300 	smull	r2, r3, r3, r0
   8093c:	17c4      	asrs	r4, r0, #31
   8093e:	ebc4 3423 	rsb	r4, r4, r3, asr #12
	
	reference = 200 - reference;
   80942:	f1c6 06c8 	rsb	r6, r6, #200	; 0xc8
   80946:	fa5f fa86 	uxtb.w	sl, r6
	
	// e = r - y
	int32_t error = reference - sensor_value;
   8094a:	ebaa 0404 	sub.w	r4, sl, r4
	if(error < 5 & error > -5){
   8094e:	1d23      	adds	r3, r4, #4
   80950:	2b08      	cmp	r3, #8
   80952:	d800      	bhi.n	80956 <pid_controller1+0x3e>
		error = 0;
   80954:	2400      	movs	r4, #0
	}
	
	// Calculate outputs P-term, I-term, D-term
	int32_t output_p = pid->KP*error;
   80956:	682e      	ldr	r6, [r5, #0]
   80958:	fb06 f604 	mul.w	r6, r6, r4
	int32_t output_i = 0.02 * pid->KI * error + pid->prev_ui;
   8095c:	f8df b160 	ldr.w	fp, [pc, #352]	; 80ac0 <pid_controller1+0x1a8>
   80960:	6868      	ldr	r0, [r5, #4]
   80962:	47d8      	blx	fp
   80964:	f8df 815c 	ldr.w	r8, [pc, #348]	; 80ac4 <pid_controller1+0x1ac>
   80968:	a341      	add	r3, pc, #260	; (adr r3, 80a70 <pid_controller1+0x158>)
   8096a:	e9d3 2300 	ldrd	r2, r3, [r3]
   8096e:	47c0      	blx	r8
   80970:	e9cd 0100 	strd	r0, r1, [sp]
   80974:	f8df 9150 	ldr.w	r9, [pc, #336]	; 80ac8 <pid_controller1+0x1b0>
   80978:	4620      	mov	r0, r4
   8097a:	47c8      	blx	r9
   8097c:	e9dd 2300 	ldrd	r2, r3, [sp]
   80980:	47c0      	blx	r8
   80982:	e9cd 0100 	strd	r0, r1, [sp]
   80986:	6968      	ldr	r0, [r5, #20]
   80988:	47c8      	blx	r9
   8098a:	e9dd 2300 	ldrd	r2, r3, [sp]
   8098e:	4f3c      	ldr	r7, [pc, #240]	; (80a80 <pid_controller1+0x168>)
   80990:	47b8      	blx	r7
   80992:	4b3c      	ldr	r3, [pc, #240]	; (80a84 <pid_controller1+0x16c>)
   80994:	4798      	blx	r3
   80996:	4607      	mov	r7, r0
	int32_t output_d = (pid->KD / 0.02) * (error - pid->prev_error);
   80998:	68a8      	ldr	r0, [r5, #8]
   8099a:	47d8      	blx	fp
   8099c:	a334      	add	r3, pc, #208	; (adr r3, 80a70 <pid_controller1+0x158>)
   8099e:	e9d3 2300 	ldrd	r2, r3, [r3]
   809a2:	f8df b128 	ldr.w	fp, [pc, #296]	; 80acc <pid_controller1+0x1b4>
   809a6:	47d8      	blx	fp
   809a8:	e9cd 0100 	strd	r0, r1, [sp]
   809ac:	6928      	ldr	r0, [r5, #16]
   809ae:	1a20      	subs	r0, r4, r0
   809b0:	47c8      	blx	r9
   809b2:	e9dd 2300 	ldrd	r2, r3, [sp]
   809b6:	47c0      	blx	r8
   809b8:	4b32      	ldr	r3, [pc, #200]	; (80a84 <pid_controller1+0x16c>)
   809ba:	4798      	blx	r3
   809bc:	4680      	mov	r8, r0
	
	// Anti windup and saturation
	if (output_p > max_up) {
   809be:	f64e 2360 	movw	r3, #60000	; 0xea60
   809c2:	429e      	cmp	r6, r3
   809c4:	dc04      	bgt.n	809d0 <pid_controller1+0xb8>
		output_p = max_up;
	}
	else if (output_p < -max_up){
   809c6:	4b30      	ldr	r3, [pc, #192]	; (80a88 <pid_controller1+0x170>)
   809c8:	429e      	cmp	r6, r3
   809ca:	da03      	bge.n	809d4 <pid_controller1+0xbc>
		output_p = -max_up;
   809cc:	4e2e      	ldr	r6, [pc, #184]	; (80a88 <pid_controller1+0x170>)
   809ce:	e001      	b.n	809d4 <pid_controller1+0xbc>
		output_p = max_up;
   809d0:	f64e 2660 	movw	r6, #60000	; 0xea60
	}
	
	if (output_d > max_ud) {
   809d4:	f644 6320 	movw	r3, #20000	; 0x4e20
   809d8:	4598      	cmp	r8, r3
   809da:	dc05      	bgt.n	809e8 <pid_controller1+0xd0>
		output_d = max_ud;
	}
	else if (output_d < -max_ud){
   809dc:	4b2b      	ldr	r3, [pc, #172]	; (80a8c <pid_controller1+0x174>)
   809de:	4598      	cmp	r8, r3
   809e0:	da04      	bge.n	809ec <pid_controller1+0xd4>
		output_d = -max_ud;
   809e2:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 80a8c <pid_controller1+0x174>
   809e6:	e001      	b.n	809ec <pid_controller1+0xd4>
		output_d = max_ud;
   809e8:	f644 6820 	movw	r8, #20000	; 0x4e20
	}
	
	if (output_i > max_ui) {
   809ec:	f644 6320 	movw	r3, #20000	; 0x4e20
   809f0:	429f      	cmp	r7, r3
   809f2:	dc04      	bgt.n	809fe <pid_controller1+0xe6>
		output_i = max_ui;
	}
	else if (output_i < -max_ui){
   809f4:	4b25      	ldr	r3, [pc, #148]	; (80a8c <pid_controller1+0x174>)
   809f6:	429f      	cmp	r7, r3
   809f8:	da03      	bge.n	80a02 <pid_controller1+0xea>
		output_i = -max_ui;
   809fa:	4f24      	ldr	r7, [pc, #144]	; (80a8c <pid_controller1+0x174>)
   809fc:	e001      	b.n	80a02 <pid_controller1+0xea>
		output_i = max_ui;
   809fe:	f644 6720 	movw	r7, #20000	; 0x4e20
	}
	
	// Update values
	pid->prev_error = error;
   80a02:	612c      	str	r4, [r5, #16]
	pid->prev_ui = output_i;
   80a04:	616f      	str	r7, [r5, #20]
	
	// u = up + ui + ud
	int32_t output = output_p + output_i + output_d;
   80a06:	19f3      	adds	r3, r6, r7
   80a08:	4443      	add	r3, r8
	
	if (output > max_u) {
   80a0a:	4a21      	ldr	r2, [pc, #132]	; (80a90 <pid_controller1+0x178>)
   80a0c:	4293      	cmp	r3, r2
   80a0e:	dc04      	bgt.n	80a1a <pid_controller1+0x102>
		output = max_u;
	}
	else if (output < -max_u){
   80a10:	4a20      	ldr	r2, [pc, #128]	; (80a94 <pid_controller1+0x17c>)
   80a12:	4293      	cmp	r3, r2
   80a14:	da02      	bge.n	80a1c <pid_controller1+0x104>
		output = -max_u;
   80a16:	4b1f      	ldr	r3, [pc, #124]	; (80a94 <pid_controller1+0x17c>)
   80a18:	e000      	b.n	80a1c <pid_controller1+0x104>
		output = max_u;
   80a1a:	4b1d      	ldr	r3, [pc, #116]	; (80a90 <pid_controller1+0x178>)
	}
	
	output = output/SCALING_FACTOR;
   80a1c:	4d1e      	ldr	r5, [pc, #120]	; (80a98 <pid_controller1+0x180>)
   80a1e:	fb85 2503 	smull	r2, r5, r5, r3
   80a22:	17db      	asrs	r3, r3, #31
   80a24:	ebc3 15a5 	rsb	r5, r3, r5, asr #6
	
	printf("reference: %d ",reference);
   80a28:	4651      	mov	r1, sl
   80a2a:	481c      	ldr	r0, [pc, #112]	; (80a9c <pid_controller1+0x184>)
   80a2c:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 80ad0 <pid_controller1+0x1b8>
   80a30:	47c8      	blx	r9
	//printf("sensor value: %d ",sensor_value);
	printf("error: %d ", error);
   80a32:	4621      	mov	r1, r4
   80a34:	481a      	ldr	r0, [pc, #104]	; (80aa0 <pid_controller1+0x188>)
   80a36:	47c8      	blx	r9
	
	//printf("KP: %d ",pid->KP); 
	//printf("KI: %d ",pid->KI);
	//printf("KD: %d \r\n",pid->KD);
	
	printf("up: %d ",output_p);
   80a38:	4631      	mov	r1, r6
   80a3a:	481a      	ldr	r0, [pc, #104]	; (80aa4 <pid_controller1+0x18c>)
   80a3c:	47c8      	blx	r9
	printf("ui: %d ",output_i);
   80a3e:	4639      	mov	r1, r7
   80a40:	4819      	ldr	r0, [pc, #100]	; (80aa8 <pid_controller1+0x190>)
   80a42:	47c8      	blx	r9
	printf("ud: %d ",output_d);
   80a44:	4641      	mov	r1, r8
   80a46:	4819      	ldr	r0, [pc, #100]	; (80aac <pid_controller1+0x194>)
   80a48:	47c8      	blx	r9
	
	printf("output: %d ", output);
   80a4a:	4629      	mov	r1, r5
   80a4c:	4818      	ldr	r0, [pc, #96]	; (80ab0 <pid_controller1+0x198>)
   80a4e:	47c8      	blx	r9
	printf("encoder: %d ",encoder_read());
   80a50:	4b09      	ldr	r3, [pc, #36]	; (80a78 <pid_controller1+0x160>)
   80a52:	4798      	blx	r3
   80a54:	4601      	mov	r1, r0
   80a56:	4817      	ldr	r0, [pc, #92]	; (80ab4 <pid_controller1+0x19c>)
   80a58:	47c8      	blx	r9
	int u = (int)output + 100;
   80a5a:	3564      	adds	r5, #100	; 0x64
	printf("u: %d \r\n",u);
   80a5c:	4629      	mov	r1, r5
   80a5e:	4816      	ldr	r0, [pc, #88]	; (80ab8 <pid_controller1+0x1a0>)
   80a60:	47c8      	blx	r9
	motor_write(u);
   80a62:	4628      	mov	r0, r5
   80a64:	4b15      	ldr	r3, [pc, #84]	; (80abc <pid_controller1+0x1a4>)
   80a66:	4798      	blx	r3
	
}
   80a68:	b003      	add	sp, #12
   80a6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80a6e:	bf00      	nop
   80a70:	47ae147b 	.word	0x47ae147b
   80a74:	3f947ae1 	.word	0x3f947ae1
   80a78:	00080865 	.word	0x00080865
   80a7c:	7b5ca453 	.word	0x7b5ca453
   80a80:	00080f79 	.word	0x00080f79
   80a84:	00081701 	.word	0x00081701
   80a88:	ffff15a0 	.word	0xffff15a0
   80a8c:	ffffb1e0 	.word	0xffffb1e0
   80a90:	000186a0 	.word	0x000186a0
   80a94:	fffe7960 	.word	0xfffe7960
   80a98:	10624dd3 	.word	0x10624dd3
   80a9c:	000818ec 	.word	0x000818ec
   80aa0:	000818fc 	.word	0x000818fc
   80aa4:	00081908 	.word	0x00081908
   80aa8:	00081910 	.word	0x00081910
   80aac:	00081918 	.word	0x00081918
   80ab0:	00081920 	.word	0x00081920
   80ab4:	0008192c 	.word	0x0008192c
   80ab8:	0008193c 	.word	0x0008193c
   80abc:	000808b5 	.word	0x000808b5
   80ac0:	000811f1 	.word	0x000811f1
   80ac4:	000812dd 	.word	0x000812dd
   80ac8:	00081211 	.word	0x00081211
   80acc:	00081531 	.word	0x00081531
   80ad0:	00080d65 	.word	0x00080d65

00080ad4 <printchar>:
   80ad4:	b508      	push	{r3, lr}
   80ad6:	b2c8      	uxtb	r0, r1
   80ad8:	4b01      	ldr	r3, [pc, #4]	; (80ae0 <printchar+0xc>)
   80ada:	4798      	blx	r3
   80adc:	bd08      	pop	{r3, pc}
   80ade:	bf00      	nop
   80ae0:	00080ee1 	.word	0x00080ee1

00080ae4 <prints>:
   80ae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80ae8:	4607      	mov	r7, r0
   80aea:	460e      	mov	r6, r1
   80aec:	1e15      	subs	r5, r2, #0
   80aee:	dd02      	ble.n	80af6 <prints+0x12>
   80af0:	460a      	mov	r2, r1
   80af2:	2100      	movs	r1, #0
   80af4:	e004      	b.n	80b00 <prints+0x1c>
   80af6:	f04f 0820 	mov.w	r8, #32
   80afa:	e00e      	b.n	80b1a <prints+0x36>
   80afc:	3101      	adds	r1, #1
   80afe:	3201      	adds	r2, #1
   80b00:	7810      	ldrb	r0, [r2, #0]
   80b02:	2800      	cmp	r0, #0
   80b04:	d1fa      	bne.n	80afc <prints+0x18>
   80b06:	42a9      	cmp	r1, r5
   80b08:	da01      	bge.n	80b0e <prints+0x2a>
   80b0a:	1a6d      	subs	r5, r5, r1
   80b0c:	e000      	b.n	80b10 <prints+0x2c>
   80b0e:	2500      	movs	r5, #0
   80b10:	f013 0f02 	tst.w	r3, #2
   80b14:	d106      	bne.n	80b24 <prints+0x40>
   80b16:	f04f 0820 	mov.w	r8, #32
   80b1a:	f013 0401 	ands.w	r4, r3, #1
   80b1e:	d00a      	beq.n	80b36 <prints+0x52>
   80b20:	2400      	movs	r4, #0
   80b22:	e010      	b.n	80b46 <prints+0x62>
   80b24:	f04f 0830 	mov.w	r8, #48	; 0x30
   80b28:	e7f7      	b.n	80b1a <prints+0x36>
   80b2a:	4641      	mov	r1, r8
   80b2c:	4638      	mov	r0, r7
   80b2e:	4b0d      	ldr	r3, [pc, #52]	; (80b64 <prints+0x80>)
   80b30:	4798      	blx	r3
   80b32:	3401      	adds	r4, #1
   80b34:	3d01      	subs	r5, #1
   80b36:	2d00      	cmp	r5, #0
   80b38:	dcf7      	bgt.n	80b2a <prints+0x46>
   80b3a:	e004      	b.n	80b46 <prints+0x62>
   80b3c:	4638      	mov	r0, r7
   80b3e:	4b09      	ldr	r3, [pc, #36]	; (80b64 <prints+0x80>)
   80b40:	4798      	blx	r3
   80b42:	3401      	adds	r4, #1
   80b44:	3601      	adds	r6, #1
   80b46:	7831      	ldrb	r1, [r6, #0]
   80b48:	2900      	cmp	r1, #0
   80b4a:	d1f7      	bne.n	80b3c <prints+0x58>
   80b4c:	e005      	b.n	80b5a <prints+0x76>
   80b4e:	4641      	mov	r1, r8
   80b50:	4638      	mov	r0, r7
   80b52:	4b04      	ldr	r3, [pc, #16]	; (80b64 <prints+0x80>)
   80b54:	4798      	blx	r3
   80b56:	3401      	adds	r4, #1
   80b58:	3d01      	subs	r5, #1
   80b5a:	2d00      	cmp	r5, #0
   80b5c:	dcf7      	bgt.n	80b4e <prints+0x6a>
   80b5e:	4620      	mov	r0, r4
   80b60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80b64:	00080ad5 	.word	0x00080ad5

00080b68 <printi>:
   80b68:	b5f0      	push	{r4, r5, r6, r7, lr}
   80b6a:	b085      	sub	sp, #20
   80b6c:	4607      	mov	r7, r0
   80b6e:	980c      	ldr	r0, [sp, #48]	; 0x30
   80b70:	b151      	cbz	r1, 80b88 <printi+0x20>
   80b72:	461e      	mov	r6, r3
   80b74:	460c      	mov	r4, r1
   80b76:	b113      	cbz	r3, 80b7e <printi+0x16>
   80b78:	2a0a      	cmp	r2, #10
   80b7a:	d012      	beq.n	80ba2 <printi+0x3a>
   80b7c:	2600      	movs	r6, #0
   80b7e:	ad04      	add	r5, sp, #16
   80b80:	2300      	movs	r3, #0
   80b82:	f805 3d01 	strb.w	r3, [r5, #-1]!
   80b86:	e018      	b.n	80bba <printi+0x52>
   80b88:	2330      	movs	r3, #48	; 0x30
   80b8a:	f88d 3004 	strb.w	r3, [sp, #4]
   80b8e:	2300      	movs	r3, #0
   80b90:	f88d 3005 	strb.w	r3, [sp, #5]
   80b94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   80b96:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   80b98:	a901      	add	r1, sp, #4
   80b9a:	4638      	mov	r0, r7
   80b9c:	4c1b      	ldr	r4, [pc, #108]	; (80c0c <printi+0xa4>)
   80b9e:	47a0      	blx	r4
   80ba0:	e029      	b.n	80bf6 <printi+0x8e>
   80ba2:	2900      	cmp	r1, #0
   80ba4:	db01      	blt.n	80baa <printi+0x42>
   80ba6:	2600      	movs	r6, #0
   80ba8:	e7e9      	b.n	80b7e <printi+0x16>
   80baa:	424c      	negs	r4, r1
   80bac:	2601      	movs	r6, #1
   80bae:	e7e6      	b.n	80b7e <printi+0x16>
   80bb0:	3330      	adds	r3, #48	; 0x30
   80bb2:	f805 3d01 	strb.w	r3, [r5, #-1]!
   80bb6:	fbb4 f4f2 	udiv	r4, r4, r2
   80bba:	b14c      	cbz	r4, 80bd0 <printi+0x68>
   80bbc:	fbb4 f3f2 	udiv	r3, r4, r2
   80bc0:	fb02 4313 	mls	r3, r2, r3, r4
   80bc4:	2b09      	cmp	r3, #9
   80bc6:	ddf3      	ble.n	80bb0 <printi+0x48>
   80bc8:	f1a0 013a 	sub.w	r1, r0, #58	; 0x3a
   80bcc:	440b      	add	r3, r1
   80bce:	e7ef      	b.n	80bb0 <printi+0x48>
   80bd0:	b156      	cbz	r6, 80be8 <printi+0x80>
   80bd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   80bd4:	b11b      	cbz	r3, 80bde <printi+0x76>
   80bd6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   80bd8:	f013 0f02 	tst.w	r3, #2
   80bdc:	d10d      	bne.n	80bfa <printi+0x92>
   80bde:	232d      	movs	r3, #45	; 0x2d
   80be0:	f805 3c01 	strb.w	r3, [r5, #-1]
   80be4:	3d01      	subs	r5, #1
   80be6:	2600      	movs	r6, #0
   80be8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   80bea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   80bec:	4629      	mov	r1, r5
   80bee:	4638      	mov	r0, r7
   80bf0:	4c06      	ldr	r4, [pc, #24]	; (80c0c <printi+0xa4>)
   80bf2:	47a0      	blx	r4
   80bf4:	4430      	add	r0, r6
   80bf6:	b005      	add	sp, #20
   80bf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80bfa:	212d      	movs	r1, #45	; 0x2d
   80bfc:	4638      	mov	r0, r7
   80bfe:	4b04      	ldr	r3, [pc, #16]	; (80c10 <printi+0xa8>)
   80c00:	4798      	blx	r3
   80c02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   80c04:	3b01      	subs	r3, #1
   80c06:	930a      	str	r3, [sp, #40]	; 0x28
   80c08:	e7ee      	b.n	80be8 <printi+0x80>
   80c0a:	bf00      	nop
   80c0c:	00080ae5 	.word	0x00080ae5
   80c10:	00080ad5 	.word	0x00080ad5

00080c14 <print>:
   80c14:	b5f0      	push	{r4, r5, r6, r7, lr}
   80c16:	b089      	sub	sp, #36	; 0x24
   80c18:	4606      	mov	r6, r0
   80c1a:	460c      	mov	r4, r1
   80c1c:	9205      	str	r2, [sp, #20]
   80c1e:	2500      	movs	r5, #0
   80c20:	e081      	b.n	80d26 <print+0x112>
   80c22:	1ca2      	adds	r2, r4, #2
   80c24:	2301      	movs	r3, #1
   80c26:	e08b      	b.n	80d40 <print+0x12c>
   80c28:	3401      	adds	r4, #1
   80c2a:	f043 0302 	orr.w	r3, r3, #2
   80c2e:	7822      	ldrb	r2, [r4, #0]
   80c30:	2a30      	cmp	r2, #48	; 0x30
   80c32:	d0f9      	beq.n	80c28 <print+0x14>
   80c34:	2200      	movs	r2, #0
   80c36:	e006      	b.n	80c46 <print+0x32>
   80c38:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   80c3c:	0050      	lsls	r0, r2, #1
   80c3e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   80c42:	4402      	add	r2, r0
   80c44:	3401      	adds	r4, #1
   80c46:	7821      	ldrb	r1, [r4, #0]
   80c48:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
   80c4c:	b2c0      	uxtb	r0, r0
   80c4e:	2809      	cmp	r0, #9
   80c50:	d9f2      	bls.n	80c38 <print+0x24>
   80c52:	2973      	cmp	r1, #115	; 0x73
   80c54:	d018      	beq.n	80c88 <print+0x74>
   80c56:	2964      	cmp	r1, #100	; 0x64
   80c58:	d022      	beq.n	80ca0 <print+0x8c>
   80c5a:	2978      	cmp	r1, #120	; 0x78
   80c5c:	d02f      	beq.n	80cbe <print+0xaa>
   80c5e:	2958      	cmp	r1, #88	; 0x58
   80c60:	d03c      	beq.n	80cdc <print+0xc8>
   80c62:	2975      	cmp	r1, #117	; 0x75
   80c64:	d049      	beq.n	80cfa <print+0xe6>
   80c66:	2963      	cmp	r1, #99	; 0x63
   80c68:	d15c      	bne.n	80d24 <print+0x110>
   80c6a:	9905      	ldr	r1, [sp, #20]
   80c6c:	1d08      	adds	r0, r1, #4
   80c6e:	9005      	str	r0, [sp, #20]
   80c70:	7809      	ldrb	r1, [r1, #0]
   80c72:	f88d 101c 	strb.w	r1, [sp, #28]
   80c76:	2100      	movs	r1, #0
   80c78:	f88d 101d 	strb.w	r1, [sp, #29]
   80c7c:	a907      	add	r1, sp, #28
   80c7e:	4630      	mov	r0, r6
   80c80:	4f34      	ldr	r7, [pc, #208]	; (80d54 <print+0x140>)
   80c82:	47b8      	blx	r7
   80c84:	4405      	add	r5, r0
   80c86:	e04d      	b.n	80d24 <print+0x110>
   80c88:	9905      	ldr	r1, [sp, #20]
   80c8a:	1d08      	adds	r0, r1, #4
   80c8c:	9005      	str	r0, [sp, #20]
   80c8e:	6809      	ldr	r1, [r1, #0]
   80c90:	b121      	cbz	r1, 80c9c <print+0x88>
   80c92:	4630      	mov	r0, r6
   80c94:	4f2f      	ldr	r7, [pc, #188]	; (80d54 <print+0x140>)
   80c96:	47b8      	blx	r7
   80c98:	4405      	add	r5, r0
   80c9a:	e043      	b.n	80d24 <print+0x110>
   80c9c:	492e      	ldr	r1, [pc, #184]	; (80d58 <print+0x144>)
   80c9e:	e7f8      	b.n	80c92 <print+0x7e>
   80ca0:	9905      	ldr	r1, [sp, #20]
   80ca2:	1d08      	adds	r0, r1, #4
   80ca4:	9005      	str	r0, [sp, #20]
   80ca6:	6809      	ldr	r1, [r1, #0]
   80ca8:	2061      	movs	r0, #97	; 0x61
   80caa:	9002      	str	r0, [sp, #8]
   80cac:	9301      	str	r3, [sp, #4]
   80cae:	9200      	str	r2, [sp, #0]
   80cb0:	2301      	movs	r3, #1
   80cb2:	220a      	movs	r2, #10
   80cb4:	4630      	mov	r0, r6
   80cb6:	4f29      	ldr	r7, [pc, #164]	; (80d5c <print+0x148>)
   80cb8:	47b8      	blx	r7
   80cba:	4405      	add	r5, r0
   80cbc:	e032      	b.n	80d24 <print+0x110>
   80cbe:	9905      	ldr	r1, [sp, #20]
   80cc0:	1d08      	adds	r0, r1, #4
   80cc2:	9005      	str	r0, [sp, #20]
   80cc4:	6809      	ldr	r1, [r1, #0]
   80cc6:	2061      	movs	r0, #97	; 0x61
   80cc8:	9002      	str	r0, [sp, #8]
   80cca:	9301      	str	r3, [sp, #4]
   80ccc:	9200      	str	r2, [sp, #0]
   80cce:	2300      	movs	r3, #0
   80cd0:	2210      	movs	r2, #16
   80cd2:	4630      	mov	r0, r6
   80cd4:	4f21      	ldr	r7, [pc, #132]	; (80d5c <print+0x148>)
   80cd6:	47b8      	blx	r7
   80cd8:	4405      	add	r5, r0
   80cda:	e023      	b.n	80d24 <print+0x110>
   80cdc:	9905      	ldr	r1, [sp, #20]
   80cde:	1d08      	adds	r0, r1, #4
   80ce0:	9005      	str	r0, [sp, #20]
   80ce2:	6809      	ldr	r1, [r1, #0]
   80ce4:	2041      	movs	r0, #65	; 0x41
   80ce6:	9002      	str	r0, [sp, #8]
   80ce8:	9301      	str	r3, [sp, #4]
   80cea:	9200      	str	r2, [sp, #0]
   80cec:	2300      	movs	r3, #0
   80cee:	2210      	movs	r2, #16
   80cf0:	4630      	mov	r0, r6
   80cf2:	4f1a      	ldr	r7, [pc, #104]	; (80d5c <print+0x148>)
   80cf4:	47b8      	blx	r7
   80cf6:	4405      	add	r5, r0
   80cf8:	e014      	b.n	80d24 <print+0x110>
   80cfa:	9905      	ldr	r1, [sp, #20]
   80cfc:	1d08      	adds	r0, r1, #4
   80cfe:	9005      	str	r0, [sp, #20]
   80d00:	6809      	ldr	r1, [r1, #0]
   80d02:	2061      	movs	r0, #97	; 0x61
   80d04:	9002      	str	r0, [sp, #8]
   80d06:	9301      	str	r3, [sp, #4]
   80d08:	9200      	str	r2, [sp, #0]
   80d0a:	2300      	movs	r3, #0
   80d0c:	220a      	movs	r2, #10
   80d0e:	4630      	mov	r0, r6
   80d10:	4f12      	ldr	r7, [pc, #72]	; (80d5c <print+0x148>)
   80d12:	47b8      	blx	r7
   80d14:	4405      	add	r5, r0
   80d16:	e005      	b.n	80d24 <print+0x110>
   80d18:	4614      	mov	r4, r2
   80d1a:	7821      	ldrb	r1, [r4, #0]
   80d1c:	4630      	mov	r0, r6
   80d1e:	4b10      	ldr	r3, [pc, #64]	; (80d60 <print+0x14c>)
   80d20:	4798      	blx	r3
   80d22:	3501      	adds	r5, #1
   80d24:	3401      	adds	r4, #1
   80d26:	7823      	ldrb	r3, [r4, #0]
   80d28:	b163      	cbz	r3, 80d44 <print+0x130>
   80d2a:	2b25      	cmp	r3, #37	; 0x25
   80d2c:	d1f5      	bne.n	80d1a <print+0x106>
   80d2e:	1c62      	adds	r2, r4, #1
   80d30:	7863      	ldrb	r3, [r4, #1]
   80d32:	b13b      	cbz	r3, 80d44 <print+0x130>
   80d34:	2b25      	cmp	r3, #37	; 0x25
   80d36:	d0ef      	beq.n	80d18 <print+0x104>
   80d38:	2b2d      	cmp	r3, #45	; 0x2d
   80d3a:	f43f af72 	beq.w	80c22 <print+0xe>
   80d3e:	2300      	movs	r3, #0
   80d40:	4614      	mov	r4, r2
   80d42:	e774      	b.n	80c2e <print+0x1a>
   80d44:	b116      	cbz	r6, 80d4c <print+0x138>
   80d46:	6833      	ldr	r3, [r6, #0]
   80d48:	2200      	movs	r2, #0
   80d4a:	701a      	strb	r2, [r3, #0]
   80d4c:	4628      	mov	r0, r5
   80d4e:	b009      	add	sp, #36	; 0x24
   80d50:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80d52:	bf00      	nop
   80d54:	00080ae5 	.word	0x00080ae5
   80d58:	00081948 	.word	0x00081948
   80d5c:	00080b69 	.word	0x00080b69
   80d60:	00080ad5 	.word	0x00080ad5

00080d64 <printf>:
   80d64:	b40f      	push	{r0, r1, r2, r3}
   80d66:	b500      	push	{lr}
   80d68:	b083      	sub	sp, #12
   80d6a:	aa04      	add	r2, sp, #16
   80d6c:	f852 1b04 	ldr.w	r1, [r2], #4
   80d70:	9201      	str	r2, [sp, #4]
   80d72:	2000      	movs	r0, #0
   80d74:	4b03      	ldr	r3, [pc, #12]	; (80d84 <printf+0x20>)
   80d76:	4798      	blx	r3
   80d78:	b003      	add	sp, #12
   80d7a:	f85d eb04 	ldr.w	lr, [sp], #4
   80d7e:	b004      	add	sp, #16
   80d80:	4770      	bx	lr
   80d82:	bf00      	nop
   80d84:	00080c15 	.word	0x00080c15

00080d88 <pwm_init>:


void pwm_init(void) {
	
	
	PMC->PMC_PCER1 |= 1 << (ID_PWM - 32); //Allows power to PID36, PWM;
   80d88:	4a15      	ldr	r2, [pc, #84]	; (80de0 <pwm_init+0x58>)
   80d8a:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
   80d8e:	f043 0310 	orr.w	r3, r3, #16
   80d92:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

	PIOC->PIO_PDR |= PIO_PC18B_PWMH6 | PIO_PC19B_PWMH5; //Disables the PIO, so that peripheral can use it. Not sure if this is the correct implementation
   80d96:	4b13      	ldr	r3, [pc, #76]	; (80de4 <pwm_init+0x5c>)
   80d98:	685a      	ldr	r2, [r3, #4]
   80d9a:	f442 2240 	orr.w	r2, r2, #786432	; 0xc0000
   80d9e:	605a      	str	r2, [r3, #4]
	PIOC->PIO_ABSR |= PIO_PC18B_PWMH6 | PIO_PC19B_PWMH5; //Selects peripheral 2.
   80da0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   80da2:	f442 2240 	orr.w	r2, r2, #786432	; 0xc0000
   80da6:	671a      	str	r2, [r3, #112]	; 0x70
	
	PWM->PWM_WPCR |= 0xFC; // SELECTS GROUP 0-6; WPRGx
   80da8:	4b0f      	ldr	r3, [pc, #60]	; (80de8 <pwm_init+0x60>)
   80daa:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
   80dae:	f042 02fc 	orr.w	r2, r2, #252	; 0xfc
   80db2:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PWM->PWM_WPCR |= PWM_WPCR_WPCMD(0); //Unlock user interface
   80db6:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
   80dba:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	
	PWM->PWM_CLK = PWM_CLK_DIVA(1) | PWM_CLK_PREA(7); //TODO: check if this is correct, MCK/128
   80dbe:	f240 7201 	movw	r2, #1793	; 0x701
   80dc2:	601a      	str	r2, [r3, #0]
	
	PWM->PWM_DIS = PWM_DIS_CHID5;
   80dc4:	2220      	movs	r2, #32
   80dc6:	609a      	str	r2, [r3, #8]
	
	REG_PWM_CMR5 = PWM_CMR_CPRE_CLKA; //CLOCK A, LEFT ALIGNED
   80dc8:	200b      	movs	r0, #11
   80dca:	4908      	ldr	r1, [pc, #32]	; (80dec <pwm_init+0x64>)
   80dcc:	6008      	str	r0, [r1, #0]
	
	REG_PWM_CPRD5 = 0x3345; //SETS THE PERIOD TO 20MS, 58MHZ*20ms = X * CPRD
   80dce:	f243 3145 	movw	r1, #13125	; 0x3345
   80dd2:	4807      	ldr	r0, [pc, #28]	; (80df0 <pwm_init+0x68>)
   80dd4:	6001      	str	r1, [r0, #0]
	
	REG_PWM_CDTY5 = 0x3345; // used to actually change pwm, 0x3345 = 0 V, 0x00 = 5V
   80dd6:	3808      	subs	r0, #8
   80dd8:	6001      	str	r1, [r0, #0]
	

	PWM->PWM_ENA = PWM_ENA_CHID5; //ENABLE
   80dda:	605a      	str	r2, [r3, #4]
   80ddc:	4770      	bx	lr
   80dde:	bf00      	nop
   80de0:	400e0600 	.word	0x400e0600
   80de4:	400e1200 	.word	0x400e1200
   80de8:	40094000 	.word	0x40094000
   80dec:	400942a0 	.word	0x400942a0
   80df0:	400942ac 	.word	0x400942ac

00080df4 <pwm_disable>:
	
}

void pwm_disable(){
	PWM->PWM_DIS = PWM_ENA_CHID5; // DISABLE PWM on channel 5 and 6
   80df4:	2220      	movs	r2, #32
   80df6:	4b01      	ldr	r3, [pc, #4]	; (80dfc <pwm_disable+0x8>)
   80df8:	609a      	str	r2, [r3, #8]
   80dfa:	4770      	bx	lr
   80dfc:	40094000 	.word	0x40094000

00080e00 <timer_init>:
   80e00:	4a09      	ldr	r2, [pc, #36]	; (80e28 <timer_init+0x28>)
   80e02:	6913      	ldr	r3, [r2, #16]
   80e04:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
   80e08:	6113      	str	r3, [r2, #16]
   80e0a:	4b08      	ldr	r3, [pc, #32]	; (80e2c <timer_init+0x2c>)
   80e0c:	685a      	ldr	r2, [r3, #4]
   80e0e:	f042 0203 	orr.w	r2, r2, #3
   80e12:	605a      	str	r2, [r3, #4]
   80e14:	681a      	ldr	r2, [r3, #0]
   80e16:	f042 0201 	orr.w	r2, r2, #1
   80e1a:	601a      	str	r2, [r3, #0]
   80e1c:	681a      	ldr	r2, [r3, #0]
   80e1e:	f042 0204 	orr.w	r2, r2, #4
   80e22:	601a      	str	r2, [r3, #0]
   80e24:	4770      	bx	lr
   80e26:	bf00      	nop
   80e28:	400e0600 	.word	0x400e0600
   80e2c:	40080000 	.word	0x40080000

00080e30 <timer_read>:
   80e30:	4b01      	ldr	r3, [pc, #4]	; (80e38 <timer_read+0x8>)
   80e32:	6918      	ldr	r0, [r3, #16]
   80e34:	4770      	bx	lr
   80e36:	bf00      	nop
   80e38:	40080000 	.word	0x40080000

00080e3c <delay_micros_10>:
   80e3c:	b538      	push	{r3, r4, r5, lr}
   80e3e:	4604      	mov	r4, r0
   80e40:	4b06      	ldr	r3, [pc, #24]	; (80e5c <delay_micros_10+0x20>)
   80e42:	4798      	blx	r3
   80e44:	4605      	mov	r5, r0
   80e46:	e001      	b.n	80e4c <delay_micros_10+0x10>
   80e48:	4b04      	ldr	r3, [pc, #16]	; (80e5c <delay_micros_10+0x20>)
   80e4a:	4798      	blx	r3
   80e4c:	4b03      	ldr	r3, [pc, #12]	; (80e5c <delay_micros_10+0x20>)
   80e4e:	4798      	blx	r3
   80e50:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   80e54:	442b      	add	r3, r5
   80e56:	4298      	cmp	r0, r3
   80e58:	dbf6      	blt.n	80e48 <delay_micros_10+0xc>
   80e5a:	bd38      	pop	{r3, r4, r5, pc}
   80e5c:	00080e31 	.word	0x00080e31

00080e60 <timer_ms_read>:
   80e60:	4b03      	ldr	r3, [pc, #12]	; (80e70 <timer_ms_read+0x10>)
   80e62:	6918      	ldr	r0, [r3, #16]
   80e64:	4b03      	ldr	r3, [pc, #12]	; (80e74 <timer_ms_read+0x14>)
   80e66:	fba3 3000 	umull	r3, r0, r3, r0
   80e6a:	0a40      	lsrs	r0, r0, #9
   80e6c:	4770      	bx	lr
   80e6e:	bf00      	nop
   80e70:	40080000 	.word	0x40080000
   80e74:	c7ce0c7d 	.word	0xc7ce0c7d

00080e78 <configure_uart>:
   80e78:	4b16      	ldr	r3, [pc, #88]	; (80ed4 <configure_uart+0x5c>)
   80e7a:	2200      	movs	r2, #0
   80e7c:	701a      	strb	r2, [r3, #0]
   80e7e:	705a      	strb	r2, [r3, #1]
   80e80:	4b15      	ldr	r3, [pc, #84]	; (80ed8 <configure_uart+0x60>)
   80e82:	f44f 7140 	mov.w	r1, #768	; 0x300
   80e86:	6459      	str	r1, [r3, #68]	; 0x44
   80e88:	6059      	str	r1, [r3, #4]
   80e8a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   80e8c:	6f18      	ldr	r0, [r3, #112]	; 0x70
   80e8e:	4002      	ands	r2, r0
   80e90:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   80e94:	671a      	str	r2, [r3, #112]	; 0x70
   80e96:	6659      	str	r1, [r3, #100]	; 0x64
   80e98:	f44f 7280 	mov.w	r2, #256	; 0x100
   80e9c:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
   80ea0:	611a      	str	r2, [r3, #16]
   80ea2:	f503 7300 	add.w	r3, r3, #512	; 0x200
   80ea6:	21ac      	movs	r1, #172	; 0xac
   80ea8:	6019      	str	r1, [r3, #0]
   80eaa:	f240 2123 	movw	r1, #547	; 0x223
   80eae:	6219      	str	r1, [r3, #32]
   80eb0:	f44f 6100 	mov.w	r1, #2048	; 0x800
   80eb4:	6059      	str	r1, [r3, #4]
   80eb6:	f240 2102 	movw	r1, #514	; 0x202
   80eba:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   80ebe:	f04f 31ff 	mov.w	r1, #4294967295
   80ec2:	60d9      	str	r1, [r3, #12]
   80ec4:	21e1      	movs	r1, #225	; 0xe1
   80ec6:	6099      	str	r1, [r3, #8]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   80ec8:	4904      	ldr	r1, [pc, #16]	; (80edc <configure_uart+0x64>)
   80eca:	600a      	str	r2, [r1, #0]
   80ecc:	2250      	movs	r2, #80	; 0x50
   80ece:	601a      	str	r2, [r3, #0]
   80ed0:	4770      	bx	lr
   80ed2:	bf00      	nop
   80ed4:	20000498 	.word	0x20000498
   80ed8:	400e0e00 	.word	0x400e0e00
   80edc:	e000e100 	.word	0xe000e100

00080ee0 <uart_putchar>:
   80ee0:	4b07      	ldr	r3, [pc, #28]	; (80f00 <uart_putchar+0x20>)
   80ee2:	695b      	ldr	r3, [r3, #20]
   80ee4:	f013 0f02 	tst.w	r3, #2
   80ee8:	d008      	beq.n	80efc <uart_putchar+0x1c>
   80eea:	4b05      	ldr	r3, [pc, #20]	; (80f00 <uart_putchar+0x20>)
   80eec:	61d8      	str	r0, [r3, #28]
   80eee:	4b04      	ldr	r3, [pc, #16]	; (80f00 <uart_putchar+0x20>)
   80ef0:	695b      	ldr	r3, [r3, #20]
   80ef2:	f413 7f00 	tst.w	r3, #512	; 0x200
   80ef6:	d0fa      	beq.n	80eee <uart_putchar+0xe>
   80ef8:	2000      	movs	r0, #0
   80efa:	4770      	bx	lr
   80efc:	2001      	movs	r0, #1
   80efe:	4770      	bx	lr
   80f00:	400e0800 	.word	0x400e0800

00080f04 <UART_Handler>:
   80f04:	b508      	push	{r3, lr}
   80f06:	4b15      	ldr	r3, [pc, #84]	; (80f5c <UART_Handler+0x58>)
   80f08:	695b      	ldr	r3, [r3, #20]
   80f0a:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   80f0e:	d003      	beq.n	80f18 <UART_Handler+0x14>
   80f10:	f44f 71a8 	mov.w	r1, #336	; 0x150
   80f14:	4a11      	ldr	r2, [pc, #68]	; (80f5c <UART_Handler+0x58>)
   80f16:	6011      	str	r1, [r2, #0]
   80f18:	f013 0f01 	tst.w	r3, #1
   80f1c:	d012      	beq.n	80f44 <UART_Handler+0x40>
   80f1e:	4810      	ldr	r0, [pc, #64]	; (80f60 <UART_Handler+0x5c>)
   80f20:	7842      	ldrb	r2, [r0, #1]
   80f22:	1c53      	adds	r3, r2, #1
   80f24:	4259      	negs	r1, r3
   80f26:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   80f2a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   80f2e:	bf58      	it	pl
   80f30:	424b      	negpl	r3, r1
   80f32:	7801      	ldrb	r1, [r0, #0]
   80f34:	428b      	cmp	r3, r1
   80f36:	d006      	beq.n	80f46 <UART_Handler+0x42>
   80f38:	4908      	ldr	r1, [pc, #32]	; (80f5c <UART_Handler+0x58>)
   80f3a:	6988      	ldr	r0, [r1, #24]
   80f3c:	4908      	ldr	r1, [pc, #32]	; (80f60 <UART_Handler+0x5c>)
   80f3e:	440a      	add	r2, r1
   80f40:	7090      	strb	r0, [r2, #2]
   80f42:	704b      	strb	r3, [r1, #1]
   80f44:	bd08      	pop	{r3, pc}
   80f46:	4807      	ldr	r0, [pc, #28]	; (80f64 <UART_Handler+0x60>)
   80f48:	4b07      	ldr	r3, [pc, #28]	; (80f68 <UART_Handler+0x64>)
   80f4a:	4798      	blx	r3
   80f4c:	4b04      	ldr	r3, [pc, #16]	; (80f60 <UART_Handler+0x5c>)
   80f4e:	7859      	ldrb	r1, [r3, #1]
   80f50:	4a02      	ldr	r2, [pc, #8]	; (80f5c <UART_Handler+0x58>)
   80f52:	6992      	ldr	r2, [r2, #24]
   80f54:	440b      	add	r3, r1
   80f56:	709a      	strb	r2, [r3, #2]
   80f58:	bd08      	pop	{r3, pc}
   80f5a:	bf00      	nop
   80f5c:	400e0800 	.word	0x400e0800
   80f60:	20000498 	.word	0x20000498
   80f64:	00081950 	.word	0x00081950
   80f68:	00080d65 	.word	0x00080d65

00080f6c <__aeabi_drsub>:
   80f6c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   80f70:	e002      	b.n	80f78 <__adddf3>
   80f72:	bf00      	nop

00080f74 <__aeabi_dsub>:
   80f74:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00080f78 <__adddf3>:
   80f78:	b530      	push	{r4, r5, lr}
   80f7a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   80f7e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   80f82:	ea94 0f05 	teq	r4, r5
   80f86:	bf08      	it	eq
   80f88:	ea90 0f02 	teqeq	r0, r2
   80f8c:	bf1f      	itttt	ne
   80f8e:	ea54 0c00 	orrsne.w	ip, r4, r0
   80f92:	ea55 0c02 	orrsne.w	ip, r5, r2
   80f96:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   80f9a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   80f9e:	f000 80e2 	beq.w	81166 <__adddf3+0x1ee>
   80fa2:	ea4f 5454 	mov.w	r4, r4, lsr #21
   80fa6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   80faa:	bfb8      	it	lt
   80fac:	426d      	neglt	r5, r5
   80fae:	dd0c      	ble.n	80fca <__adddf3+0x52>
   80fb0:	442c      	add	r4, r5
   80fb2:	ea80 0202 	eor.w	r2, r0, r2
   80fb6:	ea81 0303 	eor.w	r3, r1, r3
   80fba:	ea82 0000 	eor.w	r0, r2, r0
   80fbe:	ea83 0101 	eor.w	r1, r3, r1
   80fc2:	ea80 0202 	eor.w	r2, r0, r2
   80fc6:	ea81 0303 	eor.w	r3, r1, r3
   80fca:	2d36      	cmp	r5, #54	; 0x36
   80fcc:	bf88      	it	hi
   80fce:	bd30      	pophi	{r4, r5, pc}
   80fd0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   80fd4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   80fd8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   80fdc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   80fe0:	d002      	beq.n	80fe8 <__adddf3+0x70>
   80fe2:	4240      	negs	r0, r0
   80fe4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   80fe8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   80fec:	ea4f 3303 	mov.w	r3, r3, lsl #12
   80ff0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   80ff4:	d002      	beq.n	80ffc <__adddf3+0x84>
   80ff6:	4252      	negs	r2, r2
   80ff8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   80ffc:	ea94 0f05 	teq	r4, r5
   81000:	f000 80a7 	beq.w	81152 <__adddf3+0x1da>
   81004:	f1a4 0401 	sub.w	r4, r4, #1
   81008:	f1d5 0e20 	rsbs	lr, r5, #32
   8100c:	db0d      	blt.n	8102a <__adddf3+0xb2>
   8100e:	fa02 fc0e 	lsl.w	ip, r2, lr
   81012:	fa22 f205 	lsr.w	r2, r2, r5
   81016:	1880      	adds	r0, r0, r2
   81018:	f141 0100 	adc.w	r1, r1, #0
   8101c:	fa03 f20e 	lsl.w	r2, r3, lr
   81020:	1880      	adds	r0, r0, r2
   81022:	fa43 f305 	asr.w	r3, r3, r5
   81026:	4159      	adcs	r1, r3
   81028:	e00e      	b.n	81048 <__adddf3+0xd0>
   8102a:	f1a5 0520 	sub.w	r5, r5, #32
   8102e:	f10e 0e20 	add.w	lr, lr, #32
   81032:	2a01      	cmp	r2, #1
   81034:	fa03 fc0e 	lsl.w	ip, r3, lr
   81038:	bf28      	it	cs
   8103a:	f04c 0c02 	orrcs.w	ip, ip, #2
   8103e:	fa43 f305 	asr.w	r3, r3, r5
   81042:	18c0      	adds	r0, r0, r3
   81044:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   81048:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8104c:	d507      	bpl.n	8105e <__adddf3+0xe6>
   8104e:	f04f 0e00 	mov.w	lr, #0
   81052:	f1dc 0c00 	rsbs	ip, ip, #0
   81056:	eb7e 0000 	sbcs.w	r0, lr, r0
   8105a:	eb6e 0101 	sbc.w	r1, lr, r1
   8105e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   81062:	d31b      	bcc.n	8109c <__adddf3+0x124>
   81064:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   81068:	d30c      	bcc.n	81084 <__adddf3+0x10c>
   8106a:	0849      	lsrs	r1, r1, #1
   8106c:	ea5f 0030 	movs.w	r0, r0, rrx
   81070:	ea4f 0c3c 	mov.w	ip, ip, rrx
   81074:	f104 0401 	add.w	r4, r4, #1
   81078:	ea4f 5244 	mov.w	r2, r4, lsl #21
   8107c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   81080:	f080 809a 	bcs.w	811b8 <__adddf3+0x240>
   81084:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   81088:	bf08      	it	eq
   8108a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8108e:	f150 0000 	adcs.w	r0, r0, #0
   81092:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   81096:	ea41 0105 	orr.w	r1, r1, r5
   8109a:	bd30      	pop	{r4, r5, pc}
   8109c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   810a0:	4140      	adcs	r0, r0
   810a2:	eb41 0101 	adc.w	r1, r1, r1
   810a6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   810aa:	f1a4 0401 	sub.w	r4, r4, #1
   810ae:	d1e9      	bne.n	81084 <__adddf3+0x10c>
   810b0:	f091 0f00 	teq	r1, #0
   810b4:	bf04      	itt	eq
   810b6:	4601      	moveq	r1, r0
   810b8:	2000      	moveq	r0, #0
   810ba:	fab1 f381 	clz	r3, r1
   810be:	bf08      	it	eq
   810c0:	3320      	addeq	r3, #32
   810c2:	f1a3 030b 	sub.w	r3, r3, #11
   810c6:	f1b3 0220 	subs.w	r2, r3, #32
   810ca:	da0c      	bge.n	810e6 <__adddf3+0x16e>
   810cc:	320c      	adds	r2, #12
   810ce:	dd08      	ble.n	810e2 <__adddf3+0x16a>
   810d0:	f102 0c14 	add.w	ip, r2, #20
   810d4:	f1c2 020c 	rsb	r2, r2, #12
   810d8:	fa01 f00c 	lsl.w	r0, r1, ip
   810dc:	fa21 f102 	lsr.w	r1, r1, r2
   810e0:	e00c      	b.n	810fc <__adddf3+0x184>
   810e2:	f102 0214 	add.w	r2, r2, #20
   810e6:	bfd8      	it	le
   810e8:	f1c2 0c20 	rsble	ip, r2, #32
   810ec:	fa01 f102 	lsl.w	r1, r1, r2
   810f0:	fa20 fc0c 	lsr.w	ip, r0, ip
   810f4:	bfdc      	itt	le
   810f6:	ea41 010c 	orrle.w	r1, r1, ip
   810fa:	4090      	lslle	r0, r2
   810fc:	1ae4      	subs	r4, r4, r3
   810fe:	bfa2      	ittt	ge
   81100:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   81104:	4329      	orrge	r1, r5
   81106:	bd30      	popge	{r4, r5, pc}
   81108:	ea6f 0404 	mvn.w	r4, r4
   8110c:	3c1f      	subs	r4, #31
   8110e:	da1c      	bge.n	8114a <__adddf3+0x1d2>
   81110:	340c      	adds	r4, #12
   81112:	dc0e      	bgt.n	81132 <__adddf3+0x1ba>
   81114:	f104 0414 	add.w	r4, r4, #20
   81118:	f1c4 0220 	rsb	r2, r4, #32
   8111c:	fa20 f004 	lsr.w	r0, r0, r4
   81120:	fa01 f302 	lsl.w	r3, r1, r2
   81124:	ea40 0003 	orr.w	r0, r0, r3
   81128:	fa21 f304 	lsr.w	r3, r1, r4
   8112c:	ea45 0103 	orr.w	r1, r5, r3
   81130:	bd30      	pop	{r4, r5, pc}
   81132:	f1c4 040c 	rsb	r4, r4, #12
   81136:	f1c4 0220 	rsb	r2, r4, #32
   8113a:	fa20 f002 	lsr.w	r0, r0, r2
   8113e:	fa01 f304 	lsl.w	r3, r1, r4
   81142:	ea40 0003 	orr.w	r0, r0, r3
   81146:	4629      	mov	r1, r5
   81148:	bd30      	pop	{r4, r5, pc}
   8114a:	fa21 f004 	lsr.w	r0, r1, r4
   8114e:	4629      	mov	r1, r5
   81150:	bd30      	pop	{r4, r5, pc}
   81152:	f094 0f00 	teq	r4, #0
   81156:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   8115a:	bf06      	itte	eq
   8115c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   81160:	3401      	addeq	r4, #1
   81162:	3d01      	subne	r5, #1
   81164:	e74e      	b.n	81004 <__adddf3+0x8c>
   81166:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   8116a:	bf18      	it	ne
   8116c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   81170:	d029      	beq.n	811c6 <__adddf3+0x24e>
   81172:	ea94 0f05 	teq	r4, r5
   81176:	bf08      	it	eq
   81178:	ea90 0f02 	teqeq	r0, r2
   8117c:	d005      	beq.n	8118a <__adddf3+0x212>
   8117e:	ea54 0c00 	orrs.w	ip, r4, r0
   81182:	bf04      	itt	eq
   81184:	4619      	moveq	r1, r3
   81186:	4610      	moveq	r0, r2
   81188:	bd30      	pop	{r4, r5, pc}
   8118a:	ea91 0f03 	teq	r1, r3
   8118e:	bf1e      	ittt	ne
   81190:	2100      	movne	r1, #0
   81192:	2000      	movne	r0, #0
   81194:	bd30      	popne	{r4, r5, pc}
   81196:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   8119a:	d105      	bne.n	811a8 <__adddf3+0x230>
   8119c:	0040      	lsls	r0, r0, #1
   8119e:	4149      	adcs	r1, r1
   811a0:	bf28      	it	cs
   811a2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   811a6:	bd30      	pop	{r4, r5, pc}
   811a8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   811ac:	bf3c      	itt	cc
   811ae:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   811b2:	bd30      	popcc	{r4, r5, pc}
   811b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   811b8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   811bc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   811c0:	f04f 0000 	mov.w	r0, #0
   811c4:	bd30      	pop	{r4, r5, pc}
   811c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   811ca:	bf1a      	itte	ne
   811cc:	4619      	movne	r1, r3
   811ce:	4610      	movne	r0, r2
   811d0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   811d4:	bf1c      	itt	ne
   811d6:	460b      	movne	r3, r1
   811d8:	4602      	movne	r2, r0
   811da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   811de:	bf06      	itte	eq
   811e0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   811e4:	ea91 0f03 	teqeq	r1, r3
   811e8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   811ec:	bd30      	pop	{r4, r5, pc}
   811ee:	bf00      	nop

000811f0 <__aeabi_ui2d>:
   811f0:	f090 0f00 	teq	r0, #0
   811f4:	bf04      	itt	eq
   811f6:	2100      	moveq	r1, #0
   811f8:	4770      	bxeq	lr
   811fa:	b530      	push	{r4, r5, lr}
   811fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   81200:	f104 0432 	add.w	r4, r4, #50	; 0x32
   81204:	f04f 0500 	mov.w	r5, #0
   81208:	f04f 0100 	mov.w	r1, #0
   8120c:	e750      	b.n	810b0 <__adddf3+0x138>
   8120e:	bf00      	nop

00081210 <__aeabi_i2d>:
   81210:	f090 0f00 	teq	r0, #0
   81214:	bf04      	itt	eq
   81216:	2100      	moveq	r1, #0
   81218:	4770      	bxeq	lr
   8121a:	b530      	push	{r4, r5, lr}
   8121c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   81220:	f104 0432 	add.w	r4, r4, #50	; 0x32
   81224:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   81228:	bf48      	it	mi
   8122a:	4240      	negmi	r0, r0
   8122c:	f04f 0100 	mov.w	r1, #0
   81230:	e73e      	b.n	810b0 <__adddf3+0x138>
   81232:	bf00      	nop

00081234 <__aeabi_f2d>:
   81234:	0042      	lsls	r2, r0, #1
   81236:	ea4f 01e2 	mov.w	r1, r2, asr #3
   8123a:	ea4f 0131 	mov.w	r1, r1, rrx
   8123e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   81242:	bf1f      	itttt	ne
   81244:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   81248:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   8124c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   81250:	4770      	bxne	lr
   81252:	f092 0f00 	teq	r2, #0
   81256:	bf14      	ite	ne
   81258:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   8125c:	4770      	bxeq	lr
   8125e:	b530      	push	{r4, r5, lr}
   81260:	f44f 7460 	mov.w	r4, #896	; 0x380
   81264:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   81268:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   8126c:	e720      	b.n	810b0 <__adddf3+0x138>
   8126e:	bf00      	nop

00081270 <__aeabi_ul2d>:
   81270:	ea50 0201 	orrs.w	r2, r0, r1
   81274:	bf08      	it	eq
   81276:	4770      	bxeq	lr
   81278:	b530      	push	{r4, r5, lr}
   8127a:	f04f 0500 	mov.w	r5, #0
   8127e:	e00a      	b.n	81296 <__aeabi_l2d+0x16>

00081280 <__aeabi_l2d>:
   81280:	ea50 0201 	orrs.w	r2, r0, r1
   81284:	bf08      	it	eq
   81286:	4770      	bxeq	lr
   81288:	b530      	push	{r4, r5, lr}
   8128a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   8128e:	d502      	bpl.n	81296 <__aeabi_l2d+0x16>
   81290:	4240      	negs	r0, r0
   81292:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   81296:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8129a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8129e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   812a2:	f43f aedc 	beq.w	8105e <__adddf3+0xe6>
   812a6:	f04f 0203 	mov.w	r2, #3
   812aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   812ae:	bf18      	it	ne
   812b0:	3203      	addne	r2, #3
   812b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   812b6:	bf18      	it	ne
   812b8:	3203      	addne	r2, #3
   812ba:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   812be:	f1c2 0320 	rsb	r3, r2, #32
   812c2:	fa00 fc03 	lsl.w	ip, r0, r3
   812c6:	fa20 f002 	lsr.w	r0, r0, r2
   812ca:	fa01 fe03 	lsl.w	lr, r1, r3
   812ce:	ea40 000e 	orr.w	r0, r0, lr
   812d2:	fa21 f102 	lsr.w	r1, r1, r2
   812d6:	4414      	add	r4, r2
   812d8:	e6c1      	b.n	8105e <__adddf3+0xe6>
   812da:	bf00      	nop

000812dc <__aeabi_dmul>:
   812dc:	b570      	push	{r4, r5, r6, lr}
   812de:	f04f 0cff 	mov.w	ip, #255	; 0xff
   812e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   812e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   812ea:	bf1d      	ittte	ne
   812ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   812f0:	ea94 0f0c 	teqne	r4, ip
   812f4:	ea95 0f0c 	teqne	r5, ip
   812f8:	f000 f8de 	bleq	814b8 <__aeabi_dmul+0x1dc>
   812fc:	442c      	add	r4, r5
   812fe:	ea81 0603 	eor.w	r6, r1, r3
   81302:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   81306:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   8130a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   8130e:	bf18      	it	ne
   81310:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   81314:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   81318:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   8131c:	d038      	beq.n	81390 <__aeabi_dmul+0xb4>
   8131e:	fba0 ce02 	umull	ip, lr, r0, r2
   81322:	f04f 0500 	mov.w	r5, #0
   81326:	fbe1 e502 	umlal	lr, r5, r1, r2
   8132a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   8132e:	fbe0 e503 	umlal	lr, r5, r0, r3
   81332:	f04f 0600 	mov.w	r6, #0
   81336:	fbe1 5603 	umlal	r5, r6, r1, r3
   8133a:	f09c 0f00 	teq	ip, #0
   8133e:	bf18      	it	ne
   81340:	f04e 0e01 	orrne.w	lr, lr, #1
   81344:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   81348:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   8134c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   81350:	d204      	bcs.n	8135c <__aeabi_dmul+0x80>
   81352:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   81356:	416d      	adcs	r5, r5
   81358:	eb46 0606 	adc.w	r6, r6, r6
   8135c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   81360:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   81364:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   81368:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   8136c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   81370:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   81374:	bf88      	it	hi
   81376:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   8137a:	d81e      	bhi.n	813ba <__aeabi_dmul+0xde>
   8137c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   81380:	bf08      	it	eq
   81382:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   81386:	f150 0000 	adcs.w	r0, r0, #0
   8138a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8138e:	bd70      	pop	{r4, r5, r6, pc}
   81390:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   81394:	ea46 0101 	orr.w	r1, r6, r1
   81398:	ea40 0002 	orr.w	r0, r0, r2
   8139c:	ea81 0103 	eor.w	r1, r1, r3
   813a0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   813a4:	bfc2      	ittt	gt
   813a6:	ebd4 050c 	rsbsgt	r5, r4, ip
   813aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   813ae:	bd70      	popgt	{r4, r5, r6, pc}
   813b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   813b4:	f04f 0e00 	mov.w	lr, #0
   813b8:	3c01      	subs	r4, #1
   813ba:	f300 80ab 	bgt.w	81514 <__aeabi_dmul+0x238>
   813be:	f114 0f36 	cmn.w	r4, #54	; 0x36
   813c2:	bfde      	ittt	le
   813c4:	2000      	movle	r0, #0
   813c6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   813ca:	bd70      	pople	{r4, r5, r6, pc}
   813cc:	f1c4 0400 	rsb	r4, r4, #0
   813d0:	3c20      	subs	r4, #32
   813d2:	da35      	bge.n	81440 <__aeabi_dmul+0x164>
   813d4:	340c      	adds	r4, #12
   813d6:	dc1b      	bgt.n	81410 <__aeabi_dmul+0x134>
   813d8:	f104 0414 	add.w	r4, r4, #20
   813dc:	f1c4 0520 	rsb	r5, r4, #32
   813e0:	fa00 f305 	lsl.w	r3, r0, r5
   813e4:	fa20 f004 	lsr.w	r0, r0, r4
   813e8:	fa01 f205 	lsl.w	r2, r1, r5
   813ec:	ea40 0002 	orr.w	r0, r0, r2
   813f0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   813f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   813f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   813fc:	fa21 f604 	lsr.w	r6, r1, r4
   81400:	eb42 0106 	adc.w	r1, r2, r6
   81404:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   81408:	bf08      	it	eq
   8140a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8140e:	bd70      	pop	{r4, r5, r6, pc}
   81410:	f1c4 040c 	rsb	r4, r4, #12
   81414:	f1c4 0520 	rsb	r5, r4, #32
   81418:	fa00 f304 	lsl.w	r3, r0, r4
   8141c:	fa20 f005 	lsr.w	r0, r0, r5
   81420:	fa01 f204 	lsl.w	r2, r1, r4
   81424:	ea40 0002 	orr.w	r0, r0, r2
   81428:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8142c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   81430:	f141 0100 	adc.w	r1, r1, #0
   81434:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   81438:	bf08      	it	eq
   8143a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8143e:	bd70      	pop	{r4, r5, r6, pc}
   81440:	f1c4 0520 	rsb	r5, r4, #32
   81444:	fa00 f205 	lsl.w	r2, r0, r5
   81448:	ea4e 0e02 	orr.w	lr, lr, r2
   8144c:	fa20 f304 	lsr.w	r3, r0, r4
   81450:	fa01 f205 	lsl.w	r2, r1, r5
   81454:	ea43 0302 	orr.w	r3, r3, r2
   81458:	fa21 f004 	lsr.w	r0, r1, r4
   8145c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   81460:	fa21 f204 	lsr.w	r2, r1, r4
   81464:	ea20 0002 	bic.w	r0, r0, r2
   81468:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   8146c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   81470:	bf08      	it	eq
   81472:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   81476:	bd70      	pop	{r4, r5, r6, pc}
   81478:	f094 0f00 	teq	r4, #0
   8147c:	d10f      	bne.n	8149e <__aeabi_dmul+0x1c2>
   8147e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   81482:	0040      	lsls	r0, r0, #1
   81484:	eb41 0101 	adc.w	r1, r1, r1
   81488:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8148c:	bf08      	it	eq
   8148e:	3c01      	subeq	r4, #1
   81490:	d0f7      	beq.n	81482 <__aeabi_dmul+0x1a6>
   81492:	ea41 0106 	orr.w	r1, r1, r6
   81496:	f095 0f00 	teq	r5, #0
   8149a:	bf18      	it	ne
   8149c:	4770      	bxne	lr
   8149e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   814a2:	0052      	lsls	r2, r2, #1
   814a4:	eb43 0303 	adc.w	r3, r3, r3
   814a8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   814ac:	bf08      	it	eq
   814ae:	3d01      	subeq	r5, #1
   814b0:	d0f7      	beq.n	814a2 <__aeabi_dmul+0x1c6>
   814b2:	ea43 0306 	orr.w	r3, r3, r6
   814b6:	4770      	bx	lr
   814b8:	ea94 0f0c 	teq	r4, ip
   814bc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   814c0:	bf18      	it	ne
   814c2:	ea95 0f0c 	teqne	r5, ip
   814c6:	d00c      	beq.n	814e2 <__aeabi_dmul+0x206>
   814c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   814cc:	bf18      	it	ne
   814ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   814d2:	d1d1      	bne.n	81478 <__aeabi_dmul+0x19c>
   814d4:	ea81 0103 	eor.w	r1, r1, r3
   814d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   814dc:	f04f 0000 	mov.w	r0, #0
   814e0:	bd70      	pop	{r4, r5, r6, pc}
   814e2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   814e6:	bf06      	itte	eq
   814e8:	4610      	moveq	r0, r2
   814ea:	4619      	moveq	r1, r3
   814ec:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   814f0:	d019      	beq.n	81526 <__aeabi_dmul+0x24a>
   814f2:	ea94 0f0c 	teq	r4, ip
   814f6:	d102      	bne.n	814fe <__aeabi_dmul+0x222>
   814f8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   814fc:	d113      	bne.n	81526 <__aeabi_dmul+0x24a>
   814fe:	ea95 0f0c 	teq	r5, ip
   81502:	d105      	bne.n	81510 <__aeabi_dmul+0x234>
   81504:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   81508:	bf1c      	itt	ne
   8150a:	4610      	movne	r0, r2
   8150c:	4619      	movne	r1, r3
   8150e:	d10a      	bne.n	81526 <__aeabi_dmul+0x24a>
   81510:	ea81 0103 	eor.w	r1, r1, r3
   81514:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   81518:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   8151c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   81520:	f04f 0000 	mov.w	r0, #0
   81524:	bd70      	pop	{r4, r5, r6, pc}
   81526:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   8152a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   8152e:	bd70      	pop	{r4, r5, r6, pc}

00081530 <__aeabi_ddiv>:
   81530:	b570      	push	{r4, r5, r6, lr}
   81532:	f04f 0cff 	mov.w	ip, #255	; 0xff
   81536:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   8153a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   8153e:	bf1d      	ittte	ne
   81540:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   81544:	ea94 0f0c 	teqne	r4, ip
   81548:	ea95 0f0c 	teqne	r5, ip
   8154c:	f000 f8a7 	bleq	8169e <__aeabi_ddiv+0x16e>
   81550:	eba4 0405 	sub.w	r4, r4, r5
   81554:	ea81 0e03 	eor.w	lr, r1, r3
   81558:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   8155c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   81560:	f000 8088 	beq.w	81674 <__aeabi_ddiv+0x144>
   81564:	ea4f 3303 	mov.w	r3, r3, lsl #12
   81568:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   8156c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   81570:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   81574:	ea4f 2202 	mov.w	r2, r2, lsl #8
   81578:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   8157c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   81580:	ea4f 2600 	mov.w	r6, r0, lsl #8
   81584:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   81588:	429d      	cmp	r5, r3
   8158a:	bf08      	it	eq
   8158c:	4296      	cmpeq	r6, r2
   8158e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   81592:	f504 7440 	add.w	r4, r4, #768	; 0x300
   81596:	d202      	bcs.n	8159e <__aeabi_ddiv+0x6e>
   81598:	085b      	lsrs	r3, r3, #1
   8159a:	ea4f 0232 	mov.w	r2, r2, rrx
   8159e:	1ab6      	subs	r6, r6, r2
   815a0:	eb65 0503 	sbc.w	r5, r5, r3
   815a4:	085b      	lsrs	r3, r3, #1
   815a6:	ea4f 0232 	mov.w	r2, r2, rrx
   815aa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   815ae:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   815b2:	ebb6 0e02 	subs.w	lr, r6, r2
   815b6:	eb75 0e03 	sbcs.w	lr, r5, r3
   815ba:	bf22      	ittt	cs
   815bc:	1ab6      	subcs	r6, r6, r2
   815be:	4675      	movcs	r5, lr
   815c0:	ea40 000c 	orrcs.w	r0, r0, ip
   815c4:	085b      	lsrs	r3, r3, #1
   815c6:	ea4f 0232 	mov.w	r2, r2, rrx
   815ca:	ebb6 0e02 	subs.w	lr, r6, r2
   815ce:	eb75 0e03 	sbcs.w	lr, r5, r3
   815d2:	bf22      	ittt	cs
   815d4:	1ab6      	subcs	r6, r6, r2
   815d6:	4675      	movcs	r5, lr
   815d8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   815dc:	085b      	lsrs	r3, r3, #1
   815de:	ea4f 0232 	mov.w	r2, r2, rrx
   815e2:	ebb6 0e02 	subs.w	lr, r6, r2
   815e6:	eb75 0e03 	sbcs.w	lr, r5, r3
   815ea:	bf22      	ittt	cs
   815ec:	1ab6      	subcs	r6, r6, r2
   815ee:	4675      	movcs	r5, lr
   815f0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   815f4:	085b      	lsrs	r3, r3, #1
   815f6:	ea4f 0232 	mov.w	r2, r2, rrx
   815fa:	ebb6 0e02 	subs.w	lr, r6, r2
   815fe:	eb75 0e03 	sbcs.w	lr, r5, r3
   81602:	bf22      	ittt	cs
   81604:	1ab6      	subcs	r6, r6, r2
   81606:	4675      	movcs	r5, lr
   81608:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   8160c:	ea55 0e06 	orrs.w	lr, r5, r6
   81610:	d018      	beq.n	81644 <__aeabi_ddiv+0x114>
   81612:	ea4f 1505 	mov.w	r5, r5, lsl #4
   81616:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   8161a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   8161e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   81622:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   81626:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   8162a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   8162e:	d1c0      	bne.n	815b2 <__aeabi_ddiv+0x82>
   81630:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   81634:	d10b      	bne.n	8164e <__aeabi_ddiv+0x11e>
   81636:	ea41 0100 	orr.w	r1, r1, r0
   8163a:	f04f 0000 	mov.w	r0, #0
   8163e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   81642:	e7b6      	b.n	815b2 <__aeabi_ddiv+0x82>
   81644:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   81648:	bf04      	itt	eq
   8164a:	4301      	orreq	r1, r0
   8164c:	2000      	moveq	r0, #0
   8164e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   81652:	bf88      	it	hi
   81654:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   81658:	f63f aeaf 	bhi.w	813ba <__aeabi_dmul+0xde>
   8165c:	ebb5 0c03 	subs.w	ip, r5, r3
   81660:	bf04      	itt	eq
   81662:	ebb6 0c02 	subseq.w	ip, r6, r2
   81666:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8166a:	f150 0000 	adcs.w	r0, r0, #0
   8166e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   81672:	bd70      	pop	{r4, r5, r6, pc}
   81674:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   81678:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   8167c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   81680:	bfc2      	ittt	gt
   81682:	ebd4 050c 	rsbsgt	r5, r4, ip
   81686:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8168a:	bd70      	popgt	{r4, r5, r6, pc}
   8168c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   81690:	f04f 0e00 	mov.w	lr, #0
   81694:	3c01      	subs	r4, #1
   81696:	e690      	b.n	813ba <__aeabi_dmul+0xde>
   81698:	ea45 0e06 	orr.w	lr, r5, r6
   8169c:	e68d      	b.n	813ba <__aeabi_dmul+0xde>
   8169e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   816a2:	ea94 0f0c 	teq	r4, ip
   816a6:	bf08      	it	eq
   816a8:	ea95 0f0c 	teqeq	r5, ip
   816ac:	f43f af3b 	beq.w	81526 <__aeabi_dmul+0x24a>
   816b0:	ea94 0f0c 	teq	r4, ip
   816b4:	d10a      	bne.n	816cc <__aeabi_ddiv+0x19c>
   816b6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   816ba:	f47f af34 	bne.w	81526 <__aeabi_dmul+0x24a>
   816be:	ea95 0f0c 	teq	r5, ip
   816c2:	f47f af25 	bne.w	81510 <__aeabi_dmul+0x234>
   816c6:	4610      	mov	r0, r2
   816c8:	4619      	mov	r1, r3
   816ca:	e72c      	b.n	81526 <__aeabi_dmul+0x24a>
   816cc:	ea95 0f0c 	teq	r5, ip
   816d0:	d106      	bne.n	816e0 <__aeabi_ddiv+0x1b0>
   816d2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   816d6:	f43f aefd 	beq.w	814d4 <__aeabi_dmul+0x1f8>
   816da:	4610      	mov	r0, r2
   816dc:	4619      	mov	r1, r3
   816de:	e722      	b.n	81526 <__aeabi_dmul+0x24a>
   816e0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   816e4:	bf18      	it	ne
   816e6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   816ea:	f47f aec5 	bne.w	81478 <__aeabi_dmul+0x19c>
   816ee:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   816f2:	f47f af0d 	bne.w	81510 <__aeabi_dmul+0x234>
   816f6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   816fa:	f47f aeeb 	bne.w	814d4 <__aeabi_dmul+0x1f8>
   816fe:	e712      	b.n	81526 <__aeabi_dmul+0x24a>

00081700 <__aeabi_d2iz>:
   81700:	ea4f 0241 	mov.w	r2, r1, lsl #1
   81704:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   81708:	d215      	bcs.n	81736 <__aeabi_d2iz+0x36>
   8170a:	d511      	bpl.n	81730 <__aeabi_d2iz+0x30>
   8170c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   81710:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   81714:	d912      	bls.n	8173c <__aeabi_d2iz+0x3c>
   81716:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   8171a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   8171e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   81722:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   81726:	fa23 f002 	lsr.w	r0, r3, r2
   8172a:	bf18      	it	ne
   8172c:	4240      	negne	r0, r0
   8172e:	4770      	bx	lr
   81730:	f04f 0000 	mov.w	r0, #0
   81734:	4770      	bx	lr
   81736:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   8173a:	d105      	bne.n	81748 <__aeabi_d2iz+0x48>
   8173c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   81740:	bf08      	it	eq
   81742:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   81746:	4770      	bx	lr
   81748:	f04f 0000 	mov.w	r0, #0
   8174c:	4770      	bx	lr
   8174e:	bf00      	nop

00081750 <__libc_init_array>:
   81750:	b570      	push	{r4, r5, r6, lr}
   81752:	4e0f      	ldr	r6, [pc, #60]	; (81790 <__libc_init_array+0x40>)
   81754:	4d0f      	ldr	r5, [pc, #60]	; (81794 <__libc_init_array+0x44>)
   81756:	1b76      	subs	r6, r6, r5
   81758:	10b6      	asrs	r6, r6, #2
   8175a:	bf18      	it	ne
   8175c:	2400      	movne	r4, #0
   8175e:	d005      	beq.n	8176c <__libc_init_array+0x1c>
   81760:	3401      	adds	r4, #1
   81762:	f855 3b04 	ldr.w	r3, [r5], #4
   81766:	4798      	blx	r3
   81768:	42a6      	cmp	r6, r4
   8176a:	d1f9      	bne.n	81760 <__libc_init_array+0x10>
   8176c:	4e0a      	ldr	r6, [pc, #40]	; (81798 <__libc_init_array+0x48>)
   8176e:	4d0b      	ldr	r5, [pc, #44]	; (8179c <__libc_init_array+0x4c>)
   81770:	f000 f900 	bl	81974 <_init>
   81774:	1b76      	subs	r6, r6, r5
   81776:	10b6      	asrs	r6, r6, #2
   81778:	bf18      	it	ne
   8177a:	2400      	movne	r4, #0
   8177c:	d006      	beq.n	8178c <__libc_init_array+0x3c>
   8177e:	3401      	adds	r4, #1
   81780:	f855 3b04 	ldr.w	r3, [r5], #4
   81784:	4798      	blx	r3
   81786:	42a6      	cmp	r6, r4
   81788:	d1f9      	bne.n	8177e <__libc_init_array+0x2e>
   8178a:	bd70      	pop	{r4, r5, r6, pc}
   8178c:	bd70      	pop	{r4, r5, r6, pc}
   8178e:	bf00      	nop
   81790:	00081980 	.word	0x00081980
   81794:	00081980 	.word	0x00081980
   81798:	00081988 	.word	0x00081988
   8179c:	00081980 	.word	0x00081980

000817a0 <register_fini>:
   817a0:	4b02      	ldr	r3, [pc, #8]	; (817ac <register_fini+0xc>)
   817a2:	b113      	cbz	r3, 817aa <register_fini+0xa>
   817a4:	4802      	ldr	r0, [pc, #8]	; (817b0 <register_fini+0x10>)
   817a6:	f000 b805 	b.w	817b4 <atexit>
   817aa:	4770      	bx	lr
   817ac:	00000000 	.word	0x00000000
   817b0:	000817c1 	.word	0x000817c1

000817b4 <atexit>:
   817b4:	2300      	movs	r3, #0
   817b6:	4601      	mov	r1, r0
   817b8:	461a      	mov	r2, r3
   817ba:	4618      	mov	r0, r3
   817bc:	f000 b81e 	b.w	817fc <__register_exitproc>

000817c0 <__libc_fini_array>:
   817c0:	b538      	push	{r3, r4, r5, lr}
   817c2:	4c0a      	ldr	r4, [pc, #40]	; (817ec <__libc_fini_array+0x2c>)
   817c4:	4d0a      	ldr	r5, [pc, #40]	; (817f0 <__libc_fini_array+0x30>)
   817c6:	1b64      	subs	r4, r4, r5
   817c8:	10a4      	asrs	r4, r4, #2
   817ca:	d00a      	beq.n	817e2 <__libc_fini_array+0x22>
   817cc:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   817d0:	3b01      	subs	r3, #1
   817d2:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   817d6:	3c01      	subs	r4, #1
   817d8:	f855 3904 	ldr.w	r3, [r5], #-4
   817dc:	4798      	blx	r3
   817de:	2c00      	cmp	r4, #0
   817e0:	d1f9      	bne.n	817d6 <__libc_fini_array+0x16>
   817e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   817e6:	f000 b8cf 	b.w	81988 <_fini>
   817ea:	bf00      	nop
   817ec:	00081998 	.word	0x00081998
   817f0:	00081994 	.word	0x00081994

000817f4 <__retarget_lock_acquire_recursive>:
   817f4:	4770      	bx	lr
   817f6:	bf00      	nop

000817f8 <__retarget_lock_release_recursive>:
   817f8:	4770      	bx	lr
   817fa:	bf00      	nop

000817fc <__register_exitproc>:
   817fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   81800:	4d2c      	ldr	r5, [pc, #176]	; (818b4 <__register_exitproc+0xb8>)
   81802:	4606      	mov	r6, r0
   81804:	6828      	ldr	r0, [r5, #0]
   81806:	4698      	mov	r8, r3
   81808:	460f      	mov	r7, r1
   8180a:	4691      	mov	r9, r2
   8180c:	f7ff fff2 	bl	817f4 <__retarget_lock_acquire_recursive>
   81810:	4b29      	ldr	r3, [pc, #164]	; (818b8 <__register_exitproc+0xbc>)
   81812:	681c      	ldr	r4, [r3, #0]
   81814:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   81818:	2b00      	cmp	r3, #0
   8181a:	d03e      	beq.n	8189a <__register_exitproc+0x9e>
   8181c:	685a      	ldr	r2, [r3, #4]
   8181e:	2a1f      	cmp	r2, #31
   81820:	dc1c      	bgt.n	8185c <__register_exitproc+0x60>
   81822:	f102 0e01 	add.w	lr, r2, #1
   81826:	b176      	cbz	r6, 81846 <__register_exitproc+0x4a>
   81828:	2101      	movs	r1, #1
   8182a:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   8182e:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   81832:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   81836:	4091      	lsls	r1, r2
   81838:	4308      	orrs	r0, r1
   8183a:	2e02      	cmp	r6, #2
   8183c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   81840:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   81844:	d023      	beq.n	8188e <__register_exitproc+0x92>
   81846:	3202      	adds	r2, #2
   81848:	f8c3 e004 	str.w	lr, [r3, #4]
   8184c:	6828      	ldr	r0, [r5, #0]
   8184e:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   81852:	f7ff ffd1 	bl	817f8 <__retarget_lock_release_recursive>
   81856:	2000      	movs	r0, #0
   81858:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8185c:	4b17      	ldr	r3, [pc, #92]	; (818bc <__register_exitproc+0xc0>)
   8185e:	b30b      	cbz	r3, 818a4 <__register_exitproc+0xa8>
   81860:	f44f 70c8 	mov.w	r0, #400	; 0x190
   81864:	f3af 8000 	nop.w
   81868:	4603      	mov	r3, r0
   8186a:	b1d8      	cbz	r0, 818a4 <__register_exitproc+0xa8>
   8186c:	2000      	movs	r0, #0
   8186e:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   81872:	f04f 0e01 	mov.w	lr, #1
   81876:	6058      	str	r0, [r3, #4]
   81878:	6019      	str	r1, [r3, #0]
   8187a:	4602      	mov	r2, r0
   8187c:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   81880:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   81884:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   81888:	2e00      	cmp	r6, #0
   8188a:	d0dc      	beq.n	81846 <__register_exitproc+0x4a>
   8188c:	e7cc      	b.n	81828 <__register_exitproc+0x2c>
   8188e:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   81892:	4301      	orrs	r1, r0
   81894:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   81898:	e7d5      	b.n	81846 <__register_exitproc+0x4a>
   8189a:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   8189e:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   818a2:	e7bb      	b.n	8181c <__register_exitproc+0x20>
   818a4:	6828      	ldr	r0, [r5, #0]
   818a6:	f7ff ffa7 	bl	817f8 <__retarget_lock_release_recursive>
   818aa:	f04f 30ff 	mov.w	r0, #4294967295
   818ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   818b2:	bf00      	nop
   818b4:	20000438 	.word	0x20000438
   818b8:	00081970 	.word	0x00081970
   818bc:	00000000 	.word	0x00000000
   818c0:	304e4143 	.word	0x304e4143
   818c4:	73656d20 	.word	0x73656d20
   818c8:	65676173 	.word	0x65676173
   818cc:	72726120 	.word	0x72726120
   818d0:	64657669 	.word	0x64657669
   818d4:	206e6920 	.word	0x206e6920
   818d8:	2d6e6f6e 	.word	0x2d6e6f6e
   818dc:	64657375 	.word	0x64657375
   818e0:	69616d20 	.word	0x69616d20
   818e4:	786f626c 	.word	0x786f626c
   818e8:	00000d0a 	.word	0x00000d0a
   818ec:	65666572 	.word	0x65666572
   818f0:	636e6572 	.word	0x636e6572
   818f4:	25203a65 	.word	0x25203a65
   818f8:	00002064 	.word	0x00002064
   818fc:	6f727265 	.word	0x6f727265
   81900:	25203a72 	.word	0x25203a72
   81904:	00002064 	.word	0x00002064
   81908:	203a7075 	.word	0x203a7075
   8190c:	00206425 	.word	0x00206425
   81910:	203a6975 	.word	0x203a6975
   81914:	00206425 	.word	0x00206425
   81918:	203a6475 	.word	0x203a6475
   8191c:	00206425 	.word	0x00206425
   81920:	7074756f 	.word	0x7074756f
   81924:	203a7475 	.word	0x203a7475
   81928:	00206425 	.word	0x00206425
   8192c:	6f636e65 	.word	0x6f636e65
   81930:	3a726564 	.word	0x3a726564
   81934:	20642520 	.word	0x20642520
   81938:	00000000 	.word	0x00000000
   8193c:	25203a75 	.word	0x25203a75
   81940:	0a0d2064 	.word	0x0a0d2064
   81944:	00000000 	.word	0x00000000
   81948:	6c756e28 	.word	0x6c756e28
   8194c:	0000296c 	.word	0x0000296c
   81950:	3a525245 	.word	0x3a525245
   81954:	52415520 	.word	0x52415520
   81958:	58522054 	.word	0x58522054
   8195c:	66756220 	.word	0x66756220
   81960:	20726566 	.word	0x20726566
   81964:	66207369 	.word	0x66207369
   81968:	0a6c6c75 	.word	0x0a6c6c75
   8196c:	0000000d 	.word	0x0000000d

00081970 <_global_impure_ptr>:
   81970:	20000010                                ... 

00081974 <_init>:
   81974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   81976:	bf00      	nop
   81978:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8197a:	bc08      	pop	{r3}
   8197c:	469e      	mov	lr, r3
   8197e:	4770      	bx	lr

00081980 <__init_array_start>:
   81980:	000817a1 	.word	0x000817a1

00081984 <__frame_dummy_init_array_entry>:
   81984:	00080119                                ....

00081988 <_fini>:
   81988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8198a:	bf00      	nop
   8198c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8198e:	bc08      	pop	{r3}
   81990:	469e      	mov	lr, r3
   81992:	4770      	bx	lr

00081994 <__fini_array_start>:
   81994:	000800f5 	.word	0x000800f5
