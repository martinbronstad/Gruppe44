
Node2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000017dc  00080000  00080000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000434  20000000  000817dc  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000b4  20000434  00081c10  00020434  2**2
                  ALLOC
  3 .stack        00000400  200004e8  00081cc4  00020434  2**0
                  ALLOC
  4 .heap         00000200  200008e8  000820c4  00020434  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020434  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002045d  2**0
                  CONTENTS, READONLY
  7 .debug_info   00009754  00000000  00000000  000204b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001848  00000000  00000000  00029c0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000002a0  00000000  00000000  0002b452  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000208  00000000  00000000  0002b6f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00014169  00000000  00000000  0002b8fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00005d0f  00000000  00000000  0003fa63  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000567cf  00000000  00000000  00045772  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000007c4  00000000  00000000  0009bf44  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    000011c7  00000000  00000000  0009c708  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	e8 08 00 20 f1 03 08 00 ed 03 08 00 ed 03 08 00     ... ............
   80010:	ed 03 08 00 ed 03 08 00 ed 03 08 00 00 00 00 00     ................
	...
   8002c:	ed 03 08 00 ed 03 08 00 00 00 00 00 ed 03 08 00     ................
   8003c:	ed 03 08 00 ed 03 08 00 ed 03 08 00 ed 03 08 00     ................
   8004c:	ed 03 08 00 ed 03 08 00 ed 03 08 00 ed 03 08 00     ................
   8005c:	ed 03 08 00 49 0d 08 00 ed 03 08 00 00 00 00 00     ....I...........
   8006c:	ed 03 08 00 ed 03 08 00 ed 03 08 00 ed 03 08 00     ................
	...
   80084:	ed 03 08 00 ed 03 08 00 ed 03 08 00 ed 03 08 00     ................
   80094:	ed 03 08 00 ed 03 08 00 ed 03 08 00 ed 03 08 00     ................
   800a4:	00 00 00 00 ed 03 08 00 ed 03 08 00 ed 03 08 00     ................
   800b4:	ed 03 08 00 ed 03 08 00 ed 03 08 00 ed 03 08 00     ................
   800c4:	ed 03 08 00 ed 03 08 00 ed 03 08 00 ed 03 08 00     ................
   800d4:	ed 03 08 00 ed 03 08 00 ed 03 08 00 ed 03 08 00     ................
   800e4:	ed 03 08 00 ed 03 08 00 f1 02 08 00 ed 03 08 00     ................

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20000434 	.word	0x20000434
   80110:	00000000 	.word	0x00000000
   80114:	000817dc 	.word	0x000817dc

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	000817dc 	.word	0x000817dc
   80154:	20000438 	.word	0x20000438
   80158:	000817dc 	.word	0x000817dc
   8015c:	00000000 	.word	0x00000000

00080160 <adc_init>:
   80160:	4a07      	ldr	r2, [pc, #28]	; (80180 <adc_init+0x20>)
   80162:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
   80166:	f043 0320 	orr.w	r3, r3, #32
   8016a:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
   8016e:	4b05      	ldr	r3, [pc, #20]	; (80184 <adc_init+0x24>)
   80170:	4a05      	ldr	r2, [pc, #20]	; (80188 <adc_init+0x28>)
   80172:	605a      	str	r2, [r3, #4]
   80174:	2204      	movs	r2, #4
   80176:	611a      	str	r2, [r3, #16]
   80178:	2202      	movs	r2, #2
   8017a:	601a      	str	r2, [r3, #0]
   8017c:	4770      	bx	lr
   8017e:	bf00      	nop
   80180:	400e0600 	.word	0x400e0600
   80184:	400c0000 	.word	0x400c0000
   80188:	33200080 	.word	0x33200080

0008018c <can_init>:
 * \retval Success(0) or failure(1)
 */


uint8_t can_init(uint32_t can_br, uint8_t num_tx_mb, uint8_t num_rx_mb)
{
   8018c:	b4f0      	push	{r4, r5, r6, r7}
	
	//Make sure num_rx_mb and num_tx_mb is valid
	if(num_rx_mb > 8 | num_tx_mb > 8 | num_rx_mb + num_tx_mb > 8)
   8018e:	1856      	adds	r6, r2, r1
   80190:	2e08      	cmp	r6, #8
   80192:	bfd4      	ite	le
   80194:	2300      	movle	r3, #0
   80196:	2301      	movgt	r3, #1
   80198:	2908      	cmp	r1, #8
   8019a:	bf98      	it	ls
   8019c:	2a08      	cmpls	r2, #8
   8019e:	d858      	bhi.n	80252 <can_init+0xc6>
   801a0:	460c      	mov	r4, r1
   801a2:	2b00      	cmp	r3, #0
   801a4:	d155      	bne.n	80252 <can_init+0xc6>


	uint32_t ul_status; 
	
	//Disable can
	CAN0->CAN_MR &= ~CAN_MR_CANEN; 
   801a6:	4a2c      	ldr	r2, [pc, #176]	; (80258 <can_init+0xcc>)
   801a8:	6813      	ldr	r3, [r2, #0]
   801aa:	f023 0301 	bic.w	r3, r3, #1
   801ae:	6013      	str	r3, [r2, #0]
	//Clear status register on read
	ul_status = CAN0->CAN_SR; 
   801b0:	6913      	ldr	r3, [r2, #16]
	
	
	// Disable interrupts on CANH and CANL pins
	PIOA->PIO_IDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   801b2:	4b2a      	ldr	r3, [pc, #168]	; (8025c <can_init+0xd0>)
   801b4:	f44f 7540 	mov.w	r5, #768	; 0x300
   801b8:	645d      	str	r5, [r3, #68]	; 0x44
	
	//Select CAN0 RX and TX in PIOA
	uint32_t ul_sr = PIOA->PIO_ABSR;
   801ba:	6f1d      	ldr	r5, [r3, #112]	; 0x70
	PIOA->PIO_ABSR = ~(PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0) & ul_sr;
   801bc:	f025 0503 	bic.w	r5, r5, #3
   801c0:	671d      	str	r5, [r3, #112]	; 0x70
	
	// Disable the Parallel IO (PIO) of the Rx and Tx pins so that the peripheral controller can use them
	PIOA->PIO_PDR = PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0;
   801c2:	2503      	movs	r5, #3
   801c4:	605d      	str	r5, [r3, #4]
	
	// Enable pull up on CANH and CANL pin
	PIOA->PIO_PUER = (PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0);
   801c6:	665d      	str	r5, [r3, #100]	; 0x64
	
	
	//Enable Clock for CAN0 in PMC
	PMC->PMC_PCR = PMC_PCR_EN | (0 << PMC_PCR_DIV_Pos) | PMC_PCR_CMD | (ID_CAN0 << PMC_PCR_PID_Pos); // DIV = 1(can clk = MCK/2), CMD = 1 (write), PID = 2B (CAN0)
   801c8:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
   801cc:	4d24      	ldr	r5, [pc, #144]	; (80260 <can_init+0xd4>)
   801ce:	f8c3 510c 	str.w	r5, [r3, #268]	; 0x10c
	PMC->PMC_PCER1 |= 1 << (ID_CAN0 - 32);
   801d2:	f8d3 5100 	ldr.w	r5, [r3, #256]	; 0x100
   801d6:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
   801da:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
	// SJW = 3TQ, BRP = 3, TQ = 8/Fosc, PROPSEG = 2/TQ, PS1 = 8/TQ, SAMPLE 3, PS2 = 8/TQ
	// TQ_NODE_1 = 8/ 16 Mhz, TQ_NODE_2 = 41+1 / 84 MHZ
	//                ???????1 ?0101001 ??10?001  ?111?111
	// can_br = 0b1 00101001 00100001 01110111
	// can_br = 0x1292177
	CAN0->CAN_BR = can_br; 
   801de:	6150      	str	r0, [r2, #20]
	

	/****** Start of mailbox configuration ******/

	uint32_t can_ier = 0;
   801e0:	2000      	movs	r0, #0

	/* Configure receive mailboxes */
	for (int n = num_tx_mb; n <= num_rx_mb + num_tx_mb; n++)  //Simply one mailbox setup for all messages. You might want to apply filter for them.
   801e2:	e015      	b.n	80210 <can_init+0x84>
	{
		CAN0->CAN_MB[n].CAN_MAM = 0x1F83FFFF; //Accept messages with id < 31
   801e4:	4b1c      	ldr	r3, [pc, #112]	; (80258 <can_init+0xcc>)
   801e6:	f101 0210 	add.w	r2, r1, #16
   801ea:	0152      	lsls	r2, r2, #5
   801ec:	189d      	adds	r5, r3, r2
   801ee:	4f1d      	ldr	r7, [pc, #116]	; (80264 <can_init+0xd8>)
   801f0:	606f      	str	r7, [r5, #4]
		//CAN0->CAN_MB[n].CAN_MAM = 0x00;
		//CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_RX);
   801f2:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
   801f6:	509d      	str	r5, [r3, r2]
		CAN0->CAN_MB[n].CAN_MCR |= CAN_MCR_MTCR;
   801f8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
   801fc:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
   80200:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
   80204:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

		can_ier |= 1 << n; //Enable interrupt on rx mailbox
   80208:	2301      	movs	r3, #1
   8020a:	408b      	lsls	r3, r1
   8020c:	4318      	orrs	r0, r3
	for (int n = num_tx_mb; n <= num_rx_mb + num_tx_mb; n++)  //Simply one mailbox setup for all messages. You might want to apply filter for them.
   8020e:	3101      	adds	r1, #1
   80210:	42b1      	cmp	r1, r6
   80212:	dde7      	ble.n	801e4 <can_init+0x58>
   80214:	2300      	movs	r3, #0
   80216:	e00d      	b.n	80234 <can_init+0xa8>
	}
	
	/*Configure transmit mailboxes */
	for (int n = 0; n < num_tx_mb; n++)
	{
		CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
   80218:	490f      	ldr	r1, [pc, #60]	; (80258 <can_init+0xcc>)
   8021a:	eb01 1243 	add.w	r2, r1, r3, lsl #5
   8021e:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
   80222:	f8c2 5208 	str.w	r5, [r2, #520]	; 0x208
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_TX);
   80226:	f103 0210 	add.w	r2, r3, #16
   8022a:	0152      	lsls	r2, r2, #5
   8022c:	f04f 7540 	mov.w	r5, #50331648	; 0x3000000
   80230:	508d      	str	r5, [r1, r2]
	for (int n = 0; n < num_tx_mb; n++)
   80232:	3301      	adds	r3, #1
   80234:	42a3      	cmp	r3, r4
   80236:	dbef      	blt.n	80218 <can_init+0x8c>
	}
	
	/****** End of mailbox configuraion ******/

	//Enable interrupt on receive mailboxes
	CAN0->CAN_IER = can_ier;
   80238:	4b07      	ldr	r3, [pc, #28]	; (80258 <can_init+0xcc>)
   8023a:	6058      	str	r0, [r3, #4]
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   8023c:	f44f 6100 	mov.w	r1, #2048	; 0x800
   80240:	4a09      	ldr	r2, [pc, #36]	; (80268 <can_init+0xdc>)
   80242:	6051      	str	r1, [r2, #4]

	//Enable interrupt in NVIC 
	NVIC_EnableIRQ(ID_CAN0);

	//enable CAN
	CAN0->CAN_MR |= CAN_MR_CANEN;
   80244:	681a      	ldr	r2, [r3, #0]
   80246:	f042 0201 	orr.w	r2, r2, #1
   8024a:	601a      	str	r2, [r3, #0]

	return 0;
   8024c:	2000      	movs	r0, #0
}
   8024e:	bcf0      	pop	{r4, r5, r6, r7}
   80250:	4770      	bx	lr
		return 1; //Too many mailboxes is configured
   80252:	2001      	movs	r0, #1
   80254:	e7fb      	b.n	8024e <can_init+0xc2>
   80256:	bf00      	nop
   80258:	400b4000 	.word	0x400b4000
   8025c:	400e0e00 	.word	0x400e0e00
   80260:	1000102b 	.word	0x1000102b
   80264:	1f83ffff 	.word	0x1f83ffff
   80268:	e000e100 	.word	0xe000e100

0008026c <can_receive>:
 * \retval Success(0) or failure(1)
 */
uint8_t can_receive(CAN_MESSAGE* can_msg, uint8_t rx_mb_id)
{
	//Check that mailbox is ready
	if(CAN0->CAN_MB[rx_mb_id].CAN_MSR & CAN_MSR_MRDY)
   8026c:	014b      	lsls	r3, r1, #5
   8026e:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   80272:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   80276:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
   8027a:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   8027e:	d033      	beq.n	802e8 <can_receive+0x7c>
{
   80280:	b470      	push	{r4, r5, r6}
	{
		//Get data from CAN mailbox
		uint32_t data_low = CAN0->CAN_MB[rx_mb_id].CAN_MDL;
   80282:	014b      	lsls	r3, r1, #5
   80284:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   80288:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   8028c:	f8d3 4214 	ldr.w	r4, [r3, #532]	; 0x214
		uint32_t data_high = CAN0->CAN_MB[rx_mb_id].CAN_MDH;
   80290:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
		
		//Get message ID
		can_msg->id = (uint8_t)((CAN0->CAN_MB[rx_mb_id].CAN_MID & CAN_MID_MIDvA_Msk) >> CAN_MID_MIDvA_Pos);
   80294:	f8d3 5208 	ldr.w	r5, [r3, #520]	; 0x208
   80298:	f3c5 4587 	ubfx	r5, r5, #18, #8
   8029c:	7005      	strb	r5, [r0, #0]
		
		//Get data length
		can_msg->data_length = (uint8_t)((CAN0->CAN_MB[rx_mb_id].CAN_MSR & CAN_MSR_MDLC_Msk) >> CAN_MSR_MDLC_Pos);
   8029e:	f8d3 5210 	ldr.w	r5, [r3, #528]	; 0x210
   802a2:	f3c5 4503 	ubfx	r5, r5, #16, #4
   802a6:	7045      	strb	r5, [r0, #1]
		
		//Put data in CAN_MESSAGE object
		for(int i = 0; i < can_msg->data_length;i++)
   802a8:	2300      	movs	r3, #0
   802aa:	e003      	b.n	802b4 <can_receive+0x48>
				can_msg->data[i] = (char)(data_low & 0xff);
				data_low = data_low >> 8;
			}
			else
			{
				can_msg->data[i] = (uint8_t)(data_high & 0xff);
   802ac:	18c6      	adds	r6, r0, r3
   802ae:	70b2      	strb	r2, [r6, #2]
				data_high = data_high >> 8;
   802b0:	0a12      	lsrs	r2, r2, #8
		for(int i = 0; i < can_msg->data_length;i++)
   802b2:	3301      	adds	r3, #1
   802b4:	42ab      	cmp	r3, r5
   802b6:	da05      	bge.n	802c4 <can_receive+0x58>
			if(i < 4)
   802b8:	2b03      	cmp	r3, #3
   802ba:	dcf7      	bgt.n	802ac <can_receive+0x40>
				can_msg->data[i] = (char)(data_low & 0xff);
   802bc:	18c6      	adds	r6, r0, r3
   802be:	70b4      	strb	r4, [r6, #2]
				data_low = data_low >> 8;
   802c0:	0a24      	lsrs	r4, r4, #8
   802c2:	e7f6      	b.n	802b2 <can_receive+0x46>
			}
		}
		
		//Reset for new receive
		CAN0->CAN_MB[rx_mb_id].CAN_MMR = CAN_MMR_MOT_MB_RX;
   802c4:	4b09      	ldr	r3, [pc, #36]	; (802ec <can_receive+0x80>)
   802c6:	f101 0210 	add.w	r2, r1, #16
   802ca:	0152      	lsls	r2, r2, #5
   802cc:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
   802d0:	5098      	str	r0, [r3, r2]
		CAN0->CAN_MB[rx_mb_id].CAN_MCR |= CAN_MCR_MTCR;
   802d2:	eb03 1141 	add.w	r1, r3, r1, lsl #5
   802d6:	f8d1 321c 	ldr.w	r3, [r1, #540]	; 0x21c
   802da:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   802de:	f8c1 321c 	str.w	r3, [r1, #540]	; 0x21c
		return 0;
   802e2:	2000      	movs	r0, #0
	}
	else //Mailbox busy
	{
		return 1;
	}
}
   802e4:	bc70      	pop	{r4, r5, r6}
   802e6:	4770      	bx	lr
		return 1;
   802e8:	2001      	movs	r0, #1
   802ea:	4770      	bx	lr
   802ec:	400b4000 	.word	0x400b4000

000802f0 <CAN0_Handler>:
 * \param void
 *
 * \retval 
 */
void CAN0_Handler( void )
{
   802f0:	b510      	push	{r4, lr}
   802f2:	b084      	sub	sp, #16
	//if(DEBUG_INTERRUPT)printf("CAN0 interrupt\n\r");
	char can_sr = CAN0->CAN_SR; 
   802f4:	4b21      	ldr	r3, [pc, #132]	; (8037c <CAN0_Handler+0x8c>)
   802f6:	691c      	ldr	r4, [r3, #16]
	
	//RX interrupt
	if(can_sr & (CAN_SR_MB1 | CAN_SR_MB2) )//Only mailbox 1 and 2 specified for receiving
   802f8:	f014 0f06 	tst.w	r4, #6
   802fc:	d01f      	beq.n	8033e <CAN0_Handler+0x4e>
	{
		CAN_MESSAGE message;
		
		if(can_sr & CAN_SR_MB1)  //Mailbox 1 event
   802fe:	f014 0f02 	tst.w	r4, #2
   80302:	d108      	bne.n	80316 <CAN0_Handler+0x26>
		{
			can_receive(&message, 1);

		}
		else if(can_sr & CAN_SR_MB2) //Mailbox 2 event
   80304:	f014 0f04 	tst.w	r4, #4
   80308:	d00a      	beq.n	80320 <CAN0_Handler+0x30>
		
		{
			can_receive(&message, 2);
   8030a:	2102      	movs	r1, #2
   8030c:	a801      	add	r0, sp, #4
   8030e:	4b1c      	ldr	r3, [pc, #112]	; (80380 <CAN0_Handler+0x90>)
   80310:	4798      	blx	r3
		if(DEBUG_INTERRUPT)printf("message id: %d\n\r", message.id);
		if(DEBUG_INTERRUPT)printf("message data length: %d\n\r", message.data_length);
		
	
		
		for (int i = 0; i < message.data_length; i++)
   80312:	2300      	movs	r3, #0
   80314:	e009      	b.n	8032a <CAN0_Handler+0x3a>
			can_receive(&message, 1);
   80316:	2101      	movs	r1, #1
   80318:	a801      	add	r0, sp, #4
   8031a:	4b19      	ldr	r3, [pc, #100]	; (80380 <CAN0_Handler+0x90>)
   8031c:	4798      	blx	r3
   8031e:	e7f8      	b.n	80312 <CAN0_Handler+0x22>
			printf("CAN0 message arrived in non-used mailbox\n\r");
   80320:	4818      	ldr	r0, [pc, #96]	; (80384 <CAN0_Handler+0x94>)
   80322:	4b19      	ldr	r3, [pc, #100]	; (80388 <CAN0_Handler+0x98>)
   80324:	4798      	blx	r3
   80326:	e7f4      	b.n	80312 <CAN0_Handler+0x22>
		for (int i = 0; i < message.data_length; i++)
   80328:	3301      	adds	r3, #1
   8032a:	f89d 2005 	ldrb.w	r2, [sp, #5]
   8032e:	4293      	cmp	r3, r2
   80330:	dbfa      	blt.n	80328 <CAN0_Handler+0x38>
		{
			if(DEBUG_INTERRUPT)printf("%d ", message.data[i]);
		}
		if (message.id == 1){
   80332:	f89d 3004 	ldrb.w	r3, [sp, #4]
   80336:	2b01      	cmp	r3, #1
   80338:	d00e      	beq.n	80358 <CAN0_Handler+0x68>
			//if(DEBUG_INTERRUPT)printf(" slider right %d \r \n", received_data_node1.slider_right);
			
			//pwm_set_servo(message.data[0]);
			//pid_controller1(message.data[1]); // Need to store the value somewhere thats accessible from main
		}
		if (message.id == 2){
   8033a:	2b02      	cmp	r3, #2
   8033c:	d01a      	beq.n	80374 <CAN0_Handler+0x84>
		}
		//can_send(&message, 0); //REPLIES WITH THE SAME MESSAGE BACK
		if(DEBUG_INTERRUPT)printf("\n\r");
	}
	
	if(can_sr & CAN_SR_MB0)
   8033e:	f014 0f01 	tst.w	r4, #1
   80342:	d002      	beq.n	8034a <CAN0_Handler+0x5a>
	{
		//if(DEBUG_INTERRUPT) printf("CAN0 MB0 ready to send \n\r");
		
	//Disable interrupt
		CAN0->CAN_IDR = CAN_IER_MB0;
   80344:	2201      	movs	r2, #1
   80346:	4b0d      	ldr	r3, [pc, #52]	; (8037c <CAN0_Handler+0x8c>)
   80348:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   8034a:	f44f 6200 	mov.w	r2, #2048	; 0x800
   8034e:	4b0f      	ldr	r3, [pc, #60]	; (8038c <CAN0_Handler+0x9c>)
   80350:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184

	}
	
	NVIC_ClearPendingIRQ(ID_CAN0);
	//sei();*/
}
   80354:	b004      	add	sp, #16
   80356:	bd10      	pop	{r4, pc}
			received_data_node1.joystick_x = message.data[0];
   80358:	f89d 1006 	ldrb.w	r1, [sp, #6]
   8035c:	4a0c      	ldr	r2, [pc, #48]	; (80390 <CAN0_Handler+0xa0>)
   8035e:	7011      	strb	r1, [r2, #0]
			received_data_node1.joystick_y = message.data[1];
   80360:	f89d 1007 	ldrb.w	r1, [sp, #7]
   80364:	7051      	strb	r1, [r2, #1]
			received_data_node1.slider_left = message.data[2];
   80366:	f89d 1008 	ldrb.w	r1, [sp, #8]
   8036a:	7091      	strb	r1, [r2, #2]
			received_data_node1.slider_right = message.data[3];
   8036c:	f89d 1009 	ldrb.w	r1, [sp, #9]
   80370:	70d1      	strb	r1, [r2, #3]
   80372:	e7e2      	b.n	8033a <CAN0_Handler+0x4a>
			solenoid_flag = 1;
   80374:	2201      	movs	r2, #1
   80376:	4b07      	ldr	r3, [pc, #28]	; (80394 <CAN0_Handler+0xa4>)
   80378:	601a      	str	r2, [r3, #0]
   8037a:	e7e0      	b.n	8033e <CAN0_Handler+0x4e>
   8037c:	400b4000 	.word	0x400b4000
   80380:	0008026d 	.word	0x0008026d
   80384:	00081704 	.word	0x00081704
   80388:	00080ba5 	.word	0x00080ba5
   8038c:	e000e100 	.word	0xe000e100
   80390:	20000454 	.word	0x20000454
   80394:	20000450 	.word	0x20000450

00080398 <dac_init>:
   80398:	4a0b      	ldr	r2, [pc, #44]	; (803c8 <dac_init+0x30>)
   8039a:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
   8039e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   803a2:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
   803a6:	f502 6220 	add.w	r2, r2, #2560	; 0xa00
   803aa:	6853      	ldr	r3, [r2, #4]
   803ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   803b0:	6053      	str	r3, [r2, #4]
   803b2:	4b06      	ldr	r3, [pc, #24]	; (803cc <dac_init+0x34>)
   803b4:	685a      	ldr	r2, [r3, #4]
   803b6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
   803ba:	605a      	str	r2, [r3, #4]
   803bc:	691a      	ldr	r2, [r3, #16]
   803be:	f042 0202 	orr.w	r2, r2, #2
   803c2:	611a      	str	r2, [r3, #16]
   803c4:	4770      	bx	lr
   803c6:	bf00      	nop
   803c8:	400e0600 	.word	0x400e0600
   803cc:	400c8000 	.word	0x400c8000

000803d0 <dac_write>:
   803d0:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   803d4:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   803d8:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
   803dc:	db01      	blt.n	803e2 <dac_write+0x12>
   803de:	f640 70ff 	movw	r0, #4095	; 0xfff
   803e2:	4b01      	ldr	r3, [pc, #4]	; (803e8 <dac_write+0x18>)
   803e4:	6218      	str	r0, [r3, #32]
   803e6:	4770      	bx	lr
   803e8:	400c8000 	.word	0x400c8000

000803ec <Dummy_Handler>:
   803ec:	e7fe      	b.n	803ec <Dummy_Handler>
	...

000803f0 <Reset_Handler>:
   803f0:	b508      	push	{r3, lr}
   803f2:	4b11      	ldr	r3, [pc, #68]	; (80438 <Reset_Handler+0x48>)
   803f4:	4a11      	ldr	r2, [pc, #68]	; (8043c <Reset_Handler+0x4c>)
   803f6:	429a      	cmp	r2, r3
   803f8:	d009      	beq.n	8040e <Reset_Handler+0x1e>
   803fa:	4b0f      	ldr	r3, [pc, #60]	; (80438 <Reset_Handler+0x48>)
   803fc:	4a0f      	ldr	r2, [pc, #60]	; (8043c <Reset_Handler+0x4c>)
   803fe:	e003      	b.n	80408 <Reset_Handler+0x18>
   80400:	6811      	ldr	r1, [r2, #0]
   80402:	6019      	str	r1, [r3, #0]
   80404:	3304      	adds	r3, #4
   80406:	3204      	adds	r2, #4
   80408:	490d      	ldr	r1, [pc, #52]	; (80440 <Reset_Handler+0x50>)
   8040a:	428b      	cmp	r3, r1
   8040c:	d3f8      	bcc.n	80400 <Reset_Handler+0x10>
   8040e:	4b0d      	ldr	r3, [pc, #52]	; (80444 <Reset_Handler+0x54>)
   80410:	e002      	b.n	80418 <Reset_Handler+0x28>
   80412:	2200      	movs	r2, #0
   80414:	601a      	str	r2, [r3, #0]
   80416:	3304      	adds	r3, #4
   80418:	4a0b      	ldr	r2, [pc, #44]	; (80448 <Reset_Handler+0x58>)
   8041a:	4293      	cmp	r3, r2
   8041c:	d3f9      	bcc.n	80412 <Reset_Handler+0x22>
   8041e:	4b0b      	ldr	r3, [pc, #44]	; (8044c <Reset_Handler+0x5c>)
   80420:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   80424:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   80428:	4a09      	ldr	r2, [pc, #36]	; (80450 <Reset_Handler+0x60>)
   8042a:	6093      	str	r3, [r2, #8]
   8042c:	4b09      	ldr	r3, [pc, #36]	; (80454 <Reset_Handler+0x64>)
   8042e:	4798      	blx	r3
   80430:	4b09      	ldr	r3, [pc, #36]	; (80458 <Reset_Handler+0x68>)
   80432:	4798      	blx	r3
   80434:	e7fe      	b.n	80434 <Reset_Handler+0x44>
   80436:	bf00      	nop
   80438:	20000000 	.word	0x20000000
   8043c:	000817dc 	.word	0x000817dc
   80440:	20000434 	.word	0x20000434
   80444:	20000434 	.word	0x20000434
   80448:	200004e8 	.word	0x200004e8
   8044c:	00080000 	.word	0x00080000
   80450:	e000ed00 	.word	0xe000ed00
   80454:	00081595 	.word	0x00081595
   80458:	00080525 	.word	0x00080525

0008045c <SystemInit>:
   8045c:	f44f 6380 	mov.w	r3, #1024	; 0x400
   80460:	4a20      	ldr	r2, [pc, #128]	; (804e4 <SystemInit+0x88>)
   80462:	6013      	str	r3, [r2, #0]
   80464:	f502 7200 	add.w	r2, r2, #512	; 0x200
   80468:	6013      	str	r3, [r2, #0]
   8046a:	4b1f      	ldr	r3, [pc, #124]	; (804e8 <SystemInit+0x8c>)
   8046c:	6a1b      	ldr	r3, [r3, #32]
   8046e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80472:	d107      	bne.n	80484 <SystemInit+0x28>
   80474:	4a1d      	ldr	r2, [pc, #116]	; (804ec <SystemInit+0x90>)
   80476:	4b1c      	ldr	r3, [pc, #112]	; (804e8 <SystemInit+0x8c>)
   80478:	621a      	str	r2, [r3, #32]
   8047a:	4b1b      	ldr	r3, [pc, #108]	; (804e8 <SystemInit+0x8c>)
   8047c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8047e:	f013 0f01 	tst.w	r3, #1
   80482:	d0fa      	beq.n	8047a <SystemInit+0x1e>
   80484:	4a1a      	ldr	r2, [pc, #104]	; (804f0 <SystemInit+0x94>)
   80486:	4b18      	ldr	r3, [pc, #96]	; (804e8 <SystemInit+0x8c>)
   80488:	621a      	str	r2, [r3, #32]
   8048a:	4b17      	ldr	r3, [pc, #92]	; (804e8 <SystemInit+0x8c>)
   8048c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8048e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   80492:	d0fa      	beq.n	8048a <SystemInit+0x2e>
   80494:	4a14      	ldr	r2, [pc, #80]	; (804e8 <SystemInit+0x8c>)
   80496:	6b13      	ldr	r3, [r2, #48]	; 0x30
   80498:	f023 0303 	bic.w	r3, r3, #3
   8049c:	f043 0301 	orr.w	r3, r3, #1
   804a0:	6313      	str	r3, [r2, #48]	; 0x30
   804a2:	4b11      	ldr	r3, [pc, #68]	; (804e8 <SystemInit+0x8c>)
   804a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   804a6:	f013 0f08 	tst.w	r3, #8
   804aa:	d0fa      	beq.n	804a2 <SystemInit+0x46>
   804ac:	4a11      	ldr	r2, [pc, #68]	; (804f4 <SystemInit+0x98>)
   804ae:	4b0e      	ldr	r3, [pc, #56]	; (804e8 <SystemInit+0x8c>)
   804b0:	629a      	str	r2, [r3, #40]	; 0x28
   804b2:	4b0d      	ldr	r3, [pc, #52]	; (804e8 <SystemInit+0x8c>)
   804b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   804b6:	f013 0f02 	tst.w	r3, #2
   804ba:	d0fa      	beq.n	804b2 <SystemInit+0x56>
   804bc:	2211      	movs	r2, #17
   804be:	4b0a      	ldr	r3, [pc, #40]	; (804e8 <SystemInit+0x8c>)
   804c0:	631a      	str	r2, [r3, #48]	; 0x30
   804c2:	4b09      	ldr	r3, [pc, #36]	; (804e8 <SystemInit+0x8c>)
   804c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   804c6:	f013 0f08 	tst.w	r3, #8
   804ca:	d0fa      	beq.n	804c2 <SystemInit+0x66>
   804cc:	2212      	movs	r2, #18
   804ce:	4b06      	ldr	r3, [pc, #24]	; (804e8 <SystemInit+0x8c>)
   804d0:	631a      	str	r2, [r3, #48]	; 0x30
   804d2:	4b05      	ldr	r3, [pc, #20]	; (804e8 <SystemInit+0x8c>)
   804d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   804d6:	f013 0f08 	tst.w	r3, #8
   804da:	d0fa      	beq.n	804d2 <SystemInit+0x76>
   804dc:	4a06      	ldr	r2, [pc, #24]	; (804f8 <SystemInit+0x9c>)
   804de:	4b07      	ldr	r3, [pc, #28]	; (804fc <SystemInit+0xa0>)
   804e0:	601a      	str	r2, [r3, #0]
   804e2:	4770      	bx	lr
   804e4:	400e0a00 	.word	0x400e0a00
   804e8:	400e0600 	.word	0x400e0600
   804ec:	00370809 	.word	0x00370809
   804f0:	01370809 	.word	0x01370809
   804f4:	200d3f01 	.word	0x200d3f01
   804f8:	0501bd00 	.word	0x0501bd00
   804fc:	20000000 	.word	0x20000000

00080500 <game_init>:

int time_over_threshold;

void game_init(){
	
	IR_flag = 0;
   80500:	2300      	movs	r3, #0
   80502:	4a04      	ldr	r2, [pc, #16]	; (80514 <game_init+0x14>)
   80504:	7013      	strb	r3, [r2, #0]
	previous_time = 0;
   80506:	4a04      	ldr	r2, [pc, #16]	; (80518 <game_init+0x18>)
   80508:	6013      	str	r3, [r2, #0]
	score = 0;
   8050a:	4a04      	ldr	r2, [pc, #16]	; (8051c <game_init+0x1c>)
   8050c:	6013      	str	r3, [r2, #0]
	time_over_threshold = 0;
   8050e:	4a04      	ldr	r2, [pc, #16]	; (80520 <game_init+0x20>)
   80510:	6013      	str	r3, [r2, #0]
   80512:	4770      	bx	lr
   80514:	20000458 	.word	0x20000458
   80518:	20000460 	.word	0x20000460
   8051c:	2000045c 	.word	0x2000045c
   80520:	20000464 	.word	0x20000464

00080524 <main>:




int main(void)
{
   80524:	b510      	push	{r4, lr}
    /* Initialize the SAM system */
    SystemInit();
   80526:	4b22      	ldr	r3, [pc, #136]	; (805b0 <main+0x8c>)
   80528:	4798      	blx	r3
	
	
	
	
	configure_uart(); //STARTS THE UART
   8052a:	4b22      	ldr	r3, [pc, #136]	; (805b4 <main+0x90>)
   8052c:	4798      	blx	r3
	
	can_init(0x1292177,1,2);
   8052e:	2202      	movs	r2, #2
   80530:	2101      	movs	r1, #1
   80532:	4821      	ldr	r0, [pc, #132]	; (805b8 <main+0x94>)
   80534:	4b21      	ldr	r3, [pc, #132]	; (805bc <main+0x98>)
   80536:	4798      	blx	r3
	
	pwm_init();
   80538:	4b21      	ldr	r3, [pc, #132]	; (805c0 <main+0x9c>)
   8053a:	4798      	blx	r3
	
	adc_init();
   8053c:	4b21      	ldr	r3, [pc, #132]	; (805c4 <main+0xa0>)
   8053e:	4798      	blx	r3
	
	timer_init();
   80540:	4b21      	ldr	r3, [pc, #132]	; (805c8 <main+0xa4>)
   80542:	4798      	blx	r3
		
	game_init();
   80544:	4b21      	ldr	r3, [pc, #132]	; (805cc <main+0xa8>)
   80546:	4798      	blx	r3
	
	dac_init();
   80548:	4b21      	ldr	r3, [pc, #132]	; (805d0 <main+0xac>)
   8054a:	4798      	blx	r3
	
	motor_init();
   8054c:	4b21      	ldr	r3, [pc, #132]	; (805d4 <main+0xb0>)
   8054e:	4798      	blx	r3
	
	solenoid_init();
   80550:	4b21      	ldr	r3, [pc, #132]	; (805d8 <main+0xb4>)
   80552:	4798      	blx	r3
	
	pid_init(K_P, K_I, K_D, &pid_data1);
   80554:	4b21      	ldr	r3, [pc, #132]	; (805dc <main+0xb8>)
   80556:	2200      	movs	r2, #0
   80558:	210a      	movs	r1, #10
   8055a:	2005      	movs	r0, #5
   8055c:	4c20      	ldr	r4, [pc, #128]	; (805e0 <main+0xbc>)
   8055e:	47a0      	blx	r4
	
	
	
	WDT->WDT_MR = WDT_MR_WDDIS; //DISABLES THE WATCHDOG
   80560:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   80564:	4b1f      	ldr	r3, [pc, #124]	; (805e4 <main+0xc0>)
   80566:	605a      	str	r2, [r3, #4]
	
	PIOA->PIO_PER = PIO_PA19 | PIO_PA20; // PIN I/O SELECT
   80568:	f5a3 6345 	sub.w	r3, r3, #3152	; 0xc50
   8056c:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
   80570:	601a      	str	r2, [r3, #0]
	PIOA->PIO_OER = PIO_PA19 | PIO_PA20; // PIN OUTPUT SELECT
   80572:	611a      	str	r2, [r3, #16]
	
	PIOA->PIO_SODR = PIO_PA19; //PIN SET OUTPUT DATA REGISTER
   80574:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   80578:	631a      	str	r2, [r3, #48]	; 0x30
	//PIOA->PIO_SODR = PIO_PA20;
	int i = 1;
	int T = 20; // Running time in ms (0.02 sec)
	uint32_t prev_time_reading = 0;
   8057a:	2400      	movs	r4, #0
		//printf("%d \r \n", i);
		
		
		// TESTING:
		
		CAN0_Handler();
   8057c:	4b1a      	ldr	r3, [pc, #104]	; (805e8 <main+0xc4>)
   8057e:	4798      	blx	r3
		
		//When in game: 
		if (timer_ms_read() - prev_time_reading >= sampling_interval) // run if loop each 0.02 seconds, 20
   80580:	4b1a      	ldr	r3, [pc, #104]	; (805ec <main+0xc8>)
   80582:	4798      	blx	r3
   80584:	1b00      	subs	r0, r0, r4
   80586:	2813      	cmp	r0, #19
   80588:	d9f8      	bls.n	8057c <main+0x58>
		{

			//uint32_t sampling_time_reading = timer_ms_read() - prev_time_reading;
			pid_controller1(received_data_node1.joystick_y, &pid_data1);
   8058a:	4914      	ldr	r1, [pc, #80]	; (805dc <main+0xb8>)
   8058c:	4b18      	ldr	r3, [pc, #96]	; (805f0 <main+0xcc>)
   8058e:	7858      	ldrb	r0, [r3, #1]
   80590:	4b18      	ldr	r3, [pc, #96]	; (805f4 <main+0xd0>)
   80592:	4798      	blx	r3
			//pwm_set_servo(received_data_node1.joystick_x);
			//printf("Encoder %d \r\n",encoder_read());
			prev_time_reading = timer_ms_read();
   80594:	4b15      	ldr	r3, [pc, #84]	; (805ec <main+0xc8>)
   80596:	4798      	blx	r3
   80598:	4604      	mov	r4, r0
			
			if (solenoid_flag == 1){
   8059a:	4b17      	ldr	r3, [pc, #92]	; (805f8 <main+0xd4>)
   8059c:	681b      	ldr	r3, [r3, #0]
   8059e:	2b01      	cmp	r3, #1
   805a0:	d1ec      	bne.n	8057c <main+0x58>
				solenoid_fire();
   805a2:	4b16      	ldr	r3, [pc, #88]	; (805fc <main+0xd8>)
   805a4:	4798      	blx	r3
				solenoid_flag = 0;
   805a6:	2200      	movs	r2, #0
   805a8:	4b13      	ldr	r3, [pc, #76]	; (805f8 <main+0xd4>)
   805aa:	601a      	str	r2, [r3, #0]
   805ac:	e7e6      	b.n	8057c <main+0x58>
   805ae:	bf00      	nop
   805b0:	0008045d 	.word	0x0008045d
   805b4:	00080cbd 	.word	0x00080cbd
   805b8:	01292177 	.word	0x01292177
   805bc:	0008018d 	.word	0x0008018d
   805c0:	00080bc9 	.word	0x00080bc9
   805c4:	00080161 	.word	0x00080161
   805c8:	00080c45 	.word	0x00080c45
   805cc:	00080501 	.word	0x00080501
   805d0:	00080399 	.word	0x00080399
   805d4:	00080601 	.word	0x00080601
   805d8:	00080651 	.word	0x00080651
   805dc:	20000468 	.word	0x20000468
   805e0:	00080739 	.word	0x00080739
   805e4:	400e1a50 	.word	0x400e1a50
   805e8:	000802f1 	.word	0x000802f1
   805ec:	00080ca5 	.word	0x00080ca5
   805f0:	20000454 	.word	0x20000454
   805f4:	00080759 	.word	0x00080759
   805f8:	20000450 	.word	0x20000450
   805fc:	00080689 	.word	0x00080689

00080600 <motor_init>:
 */ 
#include "sam.h"
#include "uart.h"
#include "PID.h"

void motor_init(){
   80600:	b410      	push	{r4}
	
	
	PIN 40-33 INPUT
	*/
	
	PMC->PMC_PCER0 |= 1 << ID_PIOC; //Allows power
   80602:	4b10      	ldr	r3, [pc, #64]	; (80644 <motor_init+0x44>)
   80604:	691a      	ldr	r2, [r3, #16]
   80606:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   8060a:	611a      	str	r2, [r3, #16]
	PMC->PMC_PCER0 |= 1 << ID_PIOD; //Allows power
   8060c:	691a      	ldr	r2, [r3, #16]
   8060e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   80612:	611a      	str	r2, [r3, #16]
	
	
	
	
	PIOC->PIO_PER |= PIO_PC1 | PIO_PC2 | PIO_PC3 | PIO_PC4 | PIO_PC5 | PIO_PC5 | PIO_PC6 | PIO_PC7 | PIO_PC8;
   80614:	4a0c      	ldr	r2, [pc, #48]	; (80648 <motor_init+0x48>)
   80616:	6813      	ldr	r3, [r2, #0]
   80618:	f443 73ff 	orr.w	r3, r3, #510	; 0x1fe
   8061c:	6013      	str	r3, [r2, #0]
	PIOD->PIO_PER |= PIO_PD10 | PIO_PD9 | PIO_PD2 | PIO_PD1 | PIO_PD0;
   8061e:	4b0b      	ldr	r3, [pc, #44]	; (8064c <motor_init+0x4c>)
   80620:	6818      	ldr	r0, [r3, #0]
   80622:	f240 6407 	movw	r4, #1543	; 0x607
   80626:	4320      	orrs	r0, r4
   80628:	6018      	str	r0, [r3, #0]
	
	PIOD->PIO_OER |= PIO_PD10 | PIO_PD9 | PIO_PD2 | PIO_PD1 | PIO_PD0; //Set as output
   8062a:	6919      	ldr	r1, [r3, #16]
   8062c:	4321      	orrs	r1, r4
   8062e:	6119      	str	r1, [r3, #16]
	PIOC->PIO_PUER |= PIO_PC1 | PIO_PC2 | PIO_PC3 | PIO_PC4 | PIO_PC5 | PIO_PC5 | PIO_PC6 | PIO_PC7 | PIO_PC8; //Enable pull up resistors
   80630:	6e51      	ldr	r1, [r2, #100]	; 0x64
   80632:	f441 71ff 	orr.w	r1, r1, #510	; 0x1fe
   80636:	6651      	str	r1, [r2, #100]	; 0x64
	
	PIOD->PIO_SODR |= PIO_PD1; // SETS THE NOT RESET
   80638:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   8063a:	f042 0202 	orr.w	r2, r2, #2
   8063e:	631a      	str	r2, [r3, #48]	; 0x30
	
}
   80640:	bc10      	pop	{r4}
   80642:	4770      	bx	lr
   80644:	400e0600 	.word	0x400e0600
   80648:	400e1200 	.word	0x400e1200
   8064c:	400e1400 	.word	0x400e1400

00080650 <solenoid_init>:

void solenoid_init(){
	
	
	PMC->PMC_PCER0 |= 1 << ID_PIOC;
   80650:	4a0a      	ldr	r2, [pc, #40]	; (8067c <solenoid_init+0x2c>)
   80652:	6913      	ldr	r3, [r2, #16]
   80654:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   80658:	6113      	str	r3, [r2, #16]
	
	PIOC->PIO_PER |= PIO_PC12;
   8065a:	4b09      	ldr	r3, [pc, #36]	; (80680 <solenoid_init+0x30>)
   8065c:	681a      	ldr	r2, [r3, #0]
   8065e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
   80662:	601a      	str	r2, [r3, #0]
	PIOC->PIO_OER |= PIO_PC12;
   80664:	691a      	ldr	r2, [r3, #16]
   80666:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
   8066a:	611a      	str	r2, [r3, #16]
	
	PIOC->PIO_SODR |= PIO_PC12;
   8066c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   8066e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
   80672:	631a      	str	r2, [r3, #48]	; 0x30
	
	solenoid_flag = 0;
   80674:	2200      	movs	r2, #0
   80676:	4b03      	ldr	r3, [pc, #12]	; (80684 <solenoid_init+0x34>)
   80678:	601a      	str	r2, [r3, #0]
   8067a:	4770      	bx	lr
   8067c:	400e0600 	.word	0x400e0600
   80680:	400e1200 	.word	0x400e1200
   80684:	20000450 	.word	0x20000450

00080688 <solenoid_fire>:
	
}

void solenoid_fire(){
   80688:	b510      	push	{r4, lr}
	
	
	PIOC->PIO_CODR |= PIO_PC12;
   8068a:	4c07      	ldr	r4, [pc, #28]	; (806a8 <solenoid_fire+0x20>)
   8068c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   8068e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   80692:	6363      	str	r3, [r4, #52]	; 0x34
	
	//Inputs a inverse pulse
	delay_micros_10(6000);
   80694:	f241 7070 	movw	r0, #6000	; 0x1770
   80698:	4b04      	ldr	r3, [pc, #16]	; (806ac <solenoid_fire+0x24>)
   8069a:	4798      	blx	r3
	PIOC->PIO_SODR |= PIO_PC12;
   8069c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   8069e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   806a2:	6323      	str	r3, [r4, #48]	; 0x30
   806a4:	bd10      	pop	{r4, pc}
   806a6:	bf00      	nop
   806a8:	400e1200 	.word	0x400e1200
   806ac:	00080c81 	.word	0x00080c81

000806b0 <encoder_read>:
}


uint16_t encoder_read(void){ // Target area is about 8561 -> 0, asuming the encoder is at the right most position
   806b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t value_low;
	uint8_t value_high;
	PIOD->PIO_CODR |= PIO_PD0;
   806b2:	4c10      	ldr	r4, [pc, #64]	; (806f4 <encoder_read+0x44>)
   806b4:	6b63      	ldr	r3, [r4, #52]	; 0x34
   806b6:	f043 0301 	orr.w	r3, r3, #1
   806ba:	6363      	str	r3, [r4, #52]	; 0x34
	PIOD->PIO_CODR |= PIO_PD2;
   806bc:	6b63      	ldr	r3, [r4, #52]	; 0x34
   806be:	f043 0304 	orr.w	r3, r3, #4
   806c2:	6363      	str	r3, [r4, #52]	; 0x34
	//DELAY 20 micros
	delay_micros_10(2);
   806c4:	2002      	movs	r0, #2
   806c6:	4f0c      	ldr	r7, [pc, #48]	; (806f8 <encoder_read+0x48>)
   806c8:	47b8      	blx	r7
	
	value_high = PIOC->PIO_PDSR >> 1;
   806ca:	4e0c      	ldr	r6, [pc, #48]	; (806fc <encoder_read+0x4c>)
   806cc:	6bf5      	ldr	r5, [r6, #60]	; 0x3c
   806ce:	086d      	lsrs	r5, r5, #1
	PIOD->PIO_SODR |= PIO_PD2;
   806d0:	6b23      	ldr	r3, [r4, #48]	; 0x30
   806d2:	f043 0304 	orr.w	r3, r3, #4
   806d6:	6323      	str	r3, [r4, #48]	; 0x30
	//delay 20 micros
	delay_micros_10(2);
   806d8:	2002      	movs	r0, #2
   806da:	47b8      	blx	r7
	
	value_low = PIOC->PIO_PDSR >> 1;
   806dc:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
   806de:	f3c0 0047 	ubfx	r0, r0, #1, #8
	PIOD->PIO_SODR |= PIO_PD0;
   806e2:	6b23      	ldr	r3, [r4, #48]	; 0x30
   806e4:	f043 0301 	orr.w	r3, r3, #1
   806e8:	6323      	str	r3, [r4, #48]	; 0x30
	
	uint16_t encoder = ((value_high << 8) | (value_low));
   806ea:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
	
	//printf("%d \r \n", encoder);
	//printf("%d \r \n", value_high);
	return encoder;
}
   806ee:	b280      	uxth	r0, r0
   806f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   806f2:	bf00      	nop
   806f4:	400e1400 	.word	0x400e1400
   806f8:	00080c81 	.word	0x00080c81
   806fc:	400e1200 	.word	0x400e1200

00080700 <motor_write>:


void motor_write(value){ // input 0-200 -> output 0-100 / 0-5V & direction
   80700:	b508      	push	{r3, lr}
	
	PIOD->PIO_SODR |= PIO_PD9; //enables motor
   80702:	4a0b      	ldr	r2, [pc, #44]	; (80730 <motor_write+0x30>)
   80704:	6b13      	ldr	r3, [r2, #48]	; 0x30
   80706:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   8070a:	6313      	str	r3, [r2, #48]	; 0x30
	
	if (value > 101) { //Chooses direction right if over 100
   8070c:	2865      	cmp	r0, #101	; 0x65
   8070e:	dc09      	bgt.n	80724 <motor_write+0x24>
		PIOD->PIO_SODR |= PIO_PD10;
		value -= 100; //Sets it to 0-100 right speed
	}
	else{
		PIOD->PIO_CODR |= PIO_PD10;
   80710:	4a07      	ldr	r2, [pc, #28]	; (80730 <motor_write+0x30>)
   80712:	6b53      	ldr	r3, [r2, #52]	; 0x34
   80714:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   80718:	6353      	str	r3, [r2, #52]	; 0x34
		value = 100 - value; // Sets it to 100 - 0 -> 0 - 100
   8071a:	f1c0 0064 	rsb	r0, r0, #100	; 0x64
	}
	
	
	dac_write(value);
   8071e:	4b05      	ldr	r3, [pc, #20]	; (80734 <motor_write+0x34>)
   80720:	4798      	blx	r3
   80722:	bd08      	pop	{r3, pc}
		PIOD->PIO_SODR |= PIO_PD10;
   80724:	6b13      	ldr	r3, [r2, #48]	; 0x30
   80726:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   8072a:	6313      	str	r3, [r2, #48]	; 0x30
		value -= 100; //Sets it to 0-100 right speed
   8072c:	3864      	subs	r0, #100	; 0x64
   8072e:	e7f6      	b.n	8071e <motor_write+0x1e>
   80730:	400e1400 	.word	0x400e1400
   80734:	000803d1 	.word	0x000803d1

00080738 <pid_init>:
		T = 0.02;
	*/
	
	// NEW VERSION:
	
	pid->KP = 0.8*SCALING_FACTOR; // 1.0 works
   80738:	f44f 7248 	mov.w	r2, #800	; 0x320
   8073c:	601a      	str	r2, [r3, #0]
	pid->KI = 0.4*SCALING_FACTOR; // 0.1 works but slow
   8073e:	f44f 72c8 	mov.w	r2, #400	; 0x190
   80742:	605a      	str	r2, [r3, #4]
	pid->KD = 0.1*SCALING_FACTOR;
   80744:	2264      	movs	r2, #100	; 0x64
   80746:	609a      	str	r2, [r3, #8]
	pid->sampling_time = sampling_interval;
   80748:	2214      	movs	r2, #20
   8074a:	60da      	str	r2, [r3, #12]
	pid->prev_error = 0;
   8074c:	2200      	movs	r2, #0
   8074e:	611a      	str	r2, [r3, #16]
	pid->prev_ui = 0;
   80750:	615a      	str	r2, [r3, #20]
   80752:	4770      	bx	lr
   80754:	0000      	movs	r0, r0
	...

00080758 <pid_controller1>:
	//printf("KI %d \r \n", pid->KI);
	//printf("KD %d \r \n", pid->KD);
}


void pid_controller1(uint8_t reference, struct pid_data *pid){ //based on lab notes
   80758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8075c:	b083      	sub	sp, #12
   8075e:	4606      	mov	r6, r0
   80760:	460d      	mov	r5, r1
	// Sensor reading y:
	int32_t sensor_value = encoder_read(); // y: 0-200 (43.5)
   80762:	4b55      	ldr	r3, [pc, #340]	; (808b8 <pid_controller1+0x160>)
   80764:	4798      	blx	r3
	if (sensor_value > 10000)sensor_value = 0;
   80766:	f242 7310 	movw	r3, #10000	; 0x2710
   8076a:	4298      	cmp	r0, r3
   8076c:	dd00      	ble.n	80770 <pid_controller1+0x18>
   8076e:	2000      	movs	r0, #0
	sensor_value = (sensor_value*200)/encoder_range; // Box 15 - 0-1900
   80770:	24c8      	movs	r4, #200	; 0xc8
   80772:	fb04 f000 	mul.w	r0, r4, r0
   80776:	4b51      	ldr	r3, [pc, #324]	; (808bc <pid_controller1+0x164>)
   80778:	fb83 2300 	smull	r2, r3, r3, r0
   8077c:	17c4      	asrs	r4, r0, #31
   8077e:	ebc4 3423 	rsb	r4, r4, r3, asr #12
	
	reference = 200 - reference;
   80782:	f1c6 06c8 	rsb	r6, r6, #200	; 0xc8
   80786:	fa5f fa86 	uxtb.w	sl, r6
	
	// e = r - y
	int32_t error = reference - sensor_value;
   8078a:	ebaa 0404 	sub.w	r4, sl, r4
	if(error < 5 & error > -5){
   8078e:	1d23      	adds	r3, r4, #4
   80790:	2b08      	cmp	r3, #8
   80792:	d800      	bhi.n	80796 <pid_controller1+0x3e>
		error = 0;
   80794:	2400      	movs	r4, #0
	}
	
	// Calculate outputs P-term, I-term, D-term
	int32_t output_p = pid->KP*error;
   80796:	682e      	ldr	r6, [r5, #0]
   80798:	fb06 f604 	mul.w	r6, r6, r4
	int32_t output_i = 0.02 * pid->KI * error + pid->prev_ui;
   8079c:	f8df b160 	ldr.w	fp, [pc, #352]	; 80900 <pid_controller1+0x1a8>
   807a0:	6868      	ldr	r0, [r5, #4]
   807a2:	47d8      	blx	fp
   807a4:	f8df 815c 	ldr.w	r8, [pc, #348]	; 80904 <pid_controller1+0x1ac>
   807a8:	a341      	add	r3, pc, #260	; (adr r3, 808b0 <pid_controller1+0x158>)
   807aa:	e9d3 2300 	ldrd	r2, r3, [r3]
   807ae:	47c0      	blx	r8
   807b0:	e9cd 0100 	strd	r0, r1, [sp]
   807b4:	f8df 9150 	ldr.w	r9, [pc, #336]	; 80908 <pid_controller1+0x1b0>
   807b8:	4620      	mov	r0, r4
   807ba:	47c8      	blx	r9
   807bc:	e9dd 2300 	ldrd	r2, r3, [sp]
   807c0:	47c0      	blx	r8
   807c2:	e9cd 0100 	strd	r0, r1, [sp]
   807c6:	6968      	ldr	r0, [r5, #20]
   807c8:	47c8      	blx	r9
   807ca:	e9dd 2300 	ldrd	r2, r3, [sp]
   807ce:	4f3c      	ldr	r7, [pc, #240]	; (808c0 <pid_controller1+0x168>)
   807d0:	47b8      	blx	r7
   807d2:	4b3c      	ldr	r3, [pc, #240]	; (808c4 <pid_controller1+0x16c>)
   807d4:	4798      	blx	r3
   807d6:	4607      	mov	r7, r0
	int32_t output_d = (pid->KD / 0.02) * (error - pid->prev_error);
   807d8:	68a8      	ldr	r0, [r5, #8]
   807da:	47d8      	blx	fp
   807dc:	a334      	add	r3, pc, #208	; (adr r3, 808b0 <pid_controller1+0x158>)
   807de:	e9d3 2300 	ldrd	r2, r3, [r3]
   807e2:	f8df b128 	ldr.w	fp, [pc, #296]	; 8090c <pid_controller1+0x1b4>
   807e6:	47d8      	blx	fp
   807e8:	e9cd 0100 	strd	r0, r1, [sp]
   807ec:	6928      	ldr	r0, [r5, #16]
   807ee:	1a20      	subs	r0, r4, r0
   807f0:	47c8      	blx	r9
   807f2:	e9dd 2300 	ldrd	r2, r3, [sp]
   807f6:	47c0      	blx	r8
   807f8:	4b32      	ldr	r3, [pc, #200]	; (808c4 <pid_controller1+0x16c>)
   807fa:	4798      	blx	r3
   807fc:	4680      	mov	r8, r0
	
	// Anti windup and saturation
	if (output_p > max_up) {
   807fe:	f64e 2360 	movw	r3, #60000	; 0xea60
   80802:	429e      	cmp	r6, r3
   80804:	dc04      	bgt.n	80810 <pid_controller1+0xb8>
		output_p = max_up;
	}
	else if (output_p < -max_up){
   80806:	4b30      	ldr	r3, [pc, #192]	; (808c8 <pid_controller1+0x170>)
   80808:	429e      	cmp	r6, r3
   8080a:	da03      	bge.n	80814 <pid_controller1+0xbc>
		output_p = -max_up;
   8080c:	4e2e      	ldr	r6, [pc, #184]	; (808c8 <pid_controller1+0x170>)
   8080e:	e001      	b.n	80814 <pid_controller1+0xbc>
		output_p = max_up;
   80810:	f64e 2660 	movw	r6, #60000	; 0xea60
	}
	
	if (output_d > max_ud) {
   80814:	f644 6320 	movw	r3, #20000	; 0x4e20
   80818:	4598      	cmp	r8, r3
   8081a:	dc05      	bgt.n	80828 <pid_controller1+0xd0>
		output_d = max_ud;
	}
	else if (output_d < -max_ud){
   8081c:	4b2b      	ldr	r3, [pc, #172]	; (808cc <pid_controller1+0x174>)
   8081e:	4598      	cmp	r8, r3
   80820:	da04      	bge.n	8082c <pid_controller1+0xd4>
		output_d = -max_ud;
   80822:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 808cc <pid_controller1+0x174>
   80826:	e001      	b.n	8082c <pid_controller1+0xd4>
		output_d = max_ud;
   80828:	f644 6820 	movw	r8, #20000	; 0x4e20
	}
	
	if (output_i > max_ui) {
   8082c:	f644 6320 	movw	r3, #20000	; 0x4e20
   80830:	429f      	cmp	r7, r3
   80832:	dc04      	bgt.n	8083e <pid_controller1+0xe6>
		output_i = max_ui;
	}
	else if (output_i < -max_ui){
   80834:	4b25      	ldr	r3, [pc, #148]	; (808cc <pid_controller1+0x174>)
   80836:	429f      	cmp	r7, r3
   80838:	da03      	bge.n	80842 <pid_controller1+0xea>
		output_i = -max_ui;
   8083a:	4f24      	ldr	r7, [pc, #144]	; (808cc <pid_controller1+0x174>)
   8083c:	e001      	b.n	80842 <pid_controller1+0xea>
		output_i = max_ui;
   8083e:	f644 6720 	movw	r7, #20000	; 0x4e20
	}
	
	// Update values
	pid->prev_error = error;
   80842:	612c      	str	r4, [r5, #16]
	pid->prev_ui = output_i;
   80844:	616f      	str	r7, [r5, #20]
	
	// u = up + ui + ud
	int32_t output = output_p + output_i + output_d;
   80846:	19f3      	adds	r3, r6, r7
   80848:	4443      	add	r3, r8
	
	if (output > max_u) {
   8084a:	4a21      	ldr	r2, [pc, #132]	; (808d0 <pid_controller1+0x178>)
   8084c:	4293      	cmp	r3, r2
   8084e:	dc04      	bgt.n	8085a <pid_controller1+0x102>
		output = max_u;
	}
	else if (output < -max_u){
   80850:	4a20      	ldr	r2, [pc, #128]	; (808d4 <pid_controller1+0x17c>)
   80852:	4293      	cmp	r3, r2
   80854:	da02      	bge.n	8085c <pid_controller1+0x104>
		output = -max_u;
   80856:	4b1f      	ldr	r3, [pc, #124]	; (808d4 <pid_controller1+0x17c>)
   80858:	e000      	b.n	8085c <pid_controller1+0x104>
		output = max_u;
   8085a:	4b1d      	ldr	r3, [pc, #116]	; (808d0 <pid_controller1+0x178>)
	}
	
	output = output/SCALING_FACTOR;
   8085c:	4d1e      	ldr	r5, [pc, #120]	; (808d8 <pid_controller1+0x180>)
   8085e:	fb85 2503 	smull	r2, r5, r5, r3
   80862:	17db      	asrs	r3, r3, #31
   80864:	ebc3 15a5 	rsb	r5, r3, r5, asr #6
	
	printf("reference: %d ",reference);
   80868:	4651      	mov	r1, sl
   8086a:	481c      	ldr	r0, [pc, #112]	; (808dc <pid_controller1+0x184>)
   8086c:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 80910 <pid_controller1+0x1b8>
   80870:	47c8      	blx	r9
	//printf("sensor value: %d ",sensor_value);
	printf("error: %d ", error);
   80872:	4621      	mov	r1, r4
   80874:	481a      	ldr	r0, [pc, #104]	; (808e0 <pid_controller1+0x188>)
   80876:	47c8      	blx	r9
	
	//printf("KP: %d ",pid->KP); 
	//printf("KI: %d ",pid->KI);
	//printf("KD: %d \r\n",pid->KD);
	
	printf("up: %d ",output_p);
   80878:	4631      	mov	r1, r6
   8087a:	481a      	ldr	r0, [pc, #104]	; (808e4 <pid_controller1+0x18c>)
   8087c:	47c8      	blx	r9
	printf("ui: %d ",output_i);
   8087e:	4639      	mov	r1, r7
   80880:	4819      	ldr	r0, [pc, #100]	; (808e8 <pid_controller1+0x190>)
   80882:	47c8      	blx	r9
	printf("ud: %d ",output_d);
   80884:	4641      	mov	r1, r8
   80886:	4819      	ldr	r0, [pc, #100]	; (808ec <pid_controller1+0x194>)
   80888:	47c8      	blx	r9
	
	printf("output: %d ", output);
   8088a:	4629      	mov	r1, r5
   8088c:	4818      	ldr	r0, [pc, #96]	; (808f0 <pid_controller1+0x198>)
   8088e:	47c8      	blx	r9
	printf("encoder: %d ",encoder_read());
   80890:	4b09      	ldr	r3, [pc, #36]	; (808b8 <pid_controller1+0x160>)
   80892:	4798      	blx	r3
   80894:	4601      	mov	r1, r0
   80896:	4817      	ldr	r0, [pc, #92]	; (808f4 <pid_controller1+0x19c>)
   80898:	47c8      	blx	r9
	int u = (int)output + 100;
   8089a:	3564      	adds	r5, #100	; 0x64
	printf("u: %d \r\n",u);
   8089c:	4629      	mov	r1, r5
   8089e:	4816      	ldr	r0, [pc, #88]	; (808f8 <pid_controller1+0x1a0>)
   808a0:	47c8      	blx	r9
	motor_write(u);
   808a2:	4628      	mov	r0, r5
   808a4:	4b15      	ldr	r3, [pc, #84]	; (808fc <pid_controller1+0x1a4>)
   808a6:	4798      	blx	r3
	
}
   808a8:	b003      	add	sp, #12
   808aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   808ae:	bf00      	nop
   808b0:	47ae147b 	.word	0x47ae147b
   808b4:	3f947ae1 	.word	0x3f947ae1
   808b8:	000806b1 	.word	0x000806b1
   808bc:	7b5ca453 	.word	0x7b5ca453
   808c0:	00080dbd 	.word	0x00080dbd
   808c4:	00081545 	.word	0x00081545
   808c8:	ffff15a0 	.word	0xffff15a0
   808cc:	ffffb1e0 	.word	0xffffb1e0
   808d0:	000186a0 	.word	0x000186a0
   808d4:	fffe7960 	.word	0xfffe7960
   808d8:	10624dd3 	.word	0x10624dd3
   808dc:	00081730 	.word	0x00081730
   808e0:	00081740 	.word	0x00081740
   808e4:	0008174c 	.word	0x0008174c
   808e8:	00081754 	.word	0x00081754
   808ec:	0008175c 	.word	0x0008175c
   808f0:	00081764 	.word	0x00081764
   808f4:	00081770 	.word	0x00081770
   808f8:	00081780 	.word	0x00081780
   808fc:	00080701 	.word	0x00080701
   80900:	00081035 	.word	0x00081035
   80904:	00081121 	.word	0x00081121
   80908:	00081055 	.word	0x00081055
   8090c:	00081375 	.word	0x00081375
   80910:	00080ba5 	.word	0x00080ba5

00080914 <printchar>:
   80914:	b508      	push	{r3, lr}
   80916:	b2c8      	uxtb	r0, r1
   80918:	4b01      	ldr	r3, [pc, #4]	; (80920 <printchar+0xc>)
   8091a:	4798      	blx	r3
   8091c:	bd08      	pop	{r3, pc}
   8091e:	bf00      	nop
   80920:	00080d25 	.word	0x00080d25

00080924 <prints>:
   80924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80928:	4607      	mov	r7, r0
   8092a:	460e      	mov	r6, r1
   8092c:	1e15      	subs	r5, r2, #0
   8092e:	dd02      	ble.n	80936 <prints+0x12>
   80930:	460a      	mov	r2, r1
   80932:	2100      	movs	r1, #0
   80934:	e004      	b.n	80940 <prints+0x1c>
   80936:	f04f 0820 	mov.w	r8, #32
   8093a:	e00e      	b.n	8095a <prints+0x36>
   8093c:	3101      	adds	r1, #1
   8093e:	3201      	adds	r2, #1
   80940:	7810      	ldrb	r0, [r2, #0]
   80942:	2800      	cmp	r0, #0
   80944:	d1fa      	bne.n	8093c <prints+0x18>
   80946:	42a9      	cmp	r1, r5
   80948:	da01      	bge.n	8094e <prints+0x2a>
   8094a:	1a6d      	subs	r5, r5, r1
   8094c:	e000      	b.n	80950 <prints+0x2c>
   8094e:	2500      	movs	r5, #0
   80950:	f013 0f02 	tst.w	r3, #2
   80954:	d106      	bne.n	80964 <prints+0x40>
   80956:	f04f 0820 	mov.w	r8, #32
   8095a:	f013 0401 	ands.w	r4, r3, #1
   8095e:	d00a      	beq.n	80976 <prints+0x52>
   80960:	2400      	movs	r4, #0
   80962:	e010      	b.n	80986 <prints+0x62>
   80964:	f04f 0830 	mov.w	r8, #48	; 0x30
   80968:	e7f7      	b.n	8095a <prints+0x36>
   8096a:	4641      	mov	r1, r8
   8096c:	4638      	mov	r0, r7
   8096e:	4b0d      	ldr	r3, [pc, #52]	; (809a4 <prints+0x80>)
   80970:	4798      	blx	r3
   80972:	3401      	adds	r4, #1
   80974:	3d01      	subs	r5, #1
   80976:	2d00      	cmp	r5, #0
   80978:	dcf7      	bgt.n	8096a <prints+0x46>
   8097a:	e004      	b.n	80986 <prints+0x62>
   8097c:	4638      	mov	r0, r7
   8097e:	4b09      	ldr	r3, [pc, #36]	; (809a4 <prints+0x80>)
   80980:	4798      	blx	r3
   80982:	3401      	adds	r4, #1
   80984:	3601      	adds	r6, #1
   80986:	7831      	ldrb	r1, [r6, #0]
   80988:	2900      	cmp	r1, #0
   8098a:	d1f7      	bne.n	8097c <prints+0x58>
   8098c:	e005      	b.n	8099a <prints+0x76>
   8098e:	4641      	mov	r1, r8
   80990:	4638      	mov	r0, r7
   80992:	4b04      	ldr	r3, [pc, #16]	; (809a4 <prints+0x80>)
   80994:	4798      	blx	r3
   80996:	3401      	adds	r4, #1
   80998:	3d01      	subs	r5, #1
   8099a:	2d00      	cmp	r5, #0
   8099c:	dcf7      	bgt.n	8098e <prints+0x6a>
   8099e:	4620      	mov	r0, r4
   809a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   809a4:	00080915 	.word	0x00080915

000809a8 <printi>:
   809a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   809aa:	b085      	sub	sp, #20
   809ac:	4607      	mov	r7, r0
   809ae:	980c      	ldr	r0, [sp, #48]	; 0x30
   809b0:	b151      	cbz	r1, 809c8 <printi+0x20>
   809b2:	461e      	mov	r6, r3
   809b4:	460c      	mov	r4, r1
   809b6:	b113      	cbz	r3, 809be <printi+0x16>
   809b8:	2a0a      	cmp	r2, #10
   809ba:	d012      	beq.n	809e2 <printi+0x3a>
   809bc:	2600      	movs	r6, #0
   809be:	ad04      	add	r5, sp, #16
   809c0:	2300      	movs	r3, #0
   809c2:	f805 3d01 	strb.w	r3, [r5, #-1]!
   809c6:	e018      	b.n	809fa <printi+0x52>
   809c8:	2330      	movs	r3, #48	; 0x30
   809ca:	f88d 3004 	strb.w	r3, [sp, #4]
   809ce:	2300      	movs	r3, #0
   809d0:	f88d 3005 	strb.w	r3, [sp, #5]
   809d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   809d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   809d8:	a901      	add	r1, sp, #4
   809da:	4638      	mov	r0, r7
   809dc:	4c1b      	ldr	r4, [pc, #108]	; (80a4c <printi+0xa4>)
   809de:	47a0      	blx	r4
   809e0:	e029      	b.n	80a36 <printi+0x8e>
   809e2:	2900      	cmp	r1, #0
   809e4:	db01      	blt.n	809ea <printi+0x42>
   809e6:	2600      	movs	r6, #0
   809e8:	e7e9      	b.n	809be <printi+0x16>
   809ea:	424c      	negs	r4, r1
   809ec:	2601      	movs	r6, #1
   809ee:	e7e6      	b.n	809be <printi+0x16>
   809f0:	3330      	adds	r3, #48	; 0x30
   809f2:	f805 3d01 	strb.w	r3, [r5, #-1]!
   809f6:	fbb4 f4f2 	udiv	r4, r4, r2
   809fa:	b14c      	cbz	r4, 80a10 <printi+0x68>
   809fc:	fbb4 f3f2 	udiv	r3, r4, r2
   80a00:	fb02 4313 	mls	r3, r2, r3, r4
   80a04:	2b09      	cmp	r3, #9
   80a06:	ddf3      	ble.n	809f0 <printi+0x48>
   80a08:	f1a0 013a 	sub.w	r1, r0, #58	; 0x3a
   80a0c:	440b      	add	r3, r1
   80a0e:	e7ef      	b.n	809f0 <printi+0x48>
   80a10:	b156      	cbz	r6, 80a28 <printi+0x80>
   80a12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   80a14:	b11b      	cbz	r3, 80a1e <printi+0x76>
   80a16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   80a18:	f013 0f02 	tst.w	r3, #2
   80a1c:	d10d      	bne.n	80a3a <printi+0x92>
   80a1e:	232d      	movs	r3, #45	; 0x2d
   80a20:	f805 3c01 	strb.w	r3, [r5, #-1]
   80a24:	3d01      	subs	r5, #1
   80a26:	2600      	movs	r6, #0
   80a28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   80a2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   80a2c:	4629      	mov	r1, r5
   80a2e:	4638      	mov	r0, r7
   80a30:	4c06      	ldr	r4, [pc, #24]	; (80a4c <printi+0xa4>)
   80a32:	47a0      	blx	r4
   80a34:	4430      	add	r0, r6
   80a36:	b005      	add	sp, #20
   80a38:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80a3a:	212d      	movs	r1, #45	; 0x2d
   80a3c:	4638      	mov	r0, r7
   80a3e:	4b04      	ldr	r3, [pc, #16]	; (80a50 <printi+0xa8>)
   80a40:	4798      	blx	r3
   80a42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   80a44:	3b01      	subs	r3, #1
   80a46:	930a      	str	r3, [sp, #40]	; 0x28
   80a48:	e7ee      	b.n	80a28 <printi+0x80>
   80a4a:	bf00      	nop
   80a4c:	00080925 	.word	0x00080925
   80a50:	00080915 	.word	0x00080915

00080a54 <print>:
   80a54:	b5f0      	push	{r4, r5, r6, r7, lr}
   80a56:	b089      	sub	sp, #36	; 0x24
   80a58:	4606      	mov	r6, r0
   80a5a:	460c      	mov	r4, r1
   80a5c:	9205      	str	r2, [sp, #20]
   80a5e:	2500      	movs	r5, #0
   80a60:	e081      	b.n	80b66 <print+0x112>
   80a62:	1ca2      	adds	r2, r4, #2
   80a64:	2301      	movs	r3, #1
   80a66:	e08b      	b.n	80b80 <print+0x12c>
   80a68:	3401      	adds	r4, #1
   80a6a:	f043 0302 	orr.w	r3, r3, #2
   80a6e:	7822      	ldrb	r2, [r4, #0]
   80a70:	2a30      	cmp	r2, #48	; 0x30
   80a72:	d0f9      	beq.n	80a68 <print+0x14>
   80a74:	2200      	movs	r2, #0
   80a76:	e006      	b.n	80a86 <print+0x32>
   80a78:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   80a7c:	0050      	lsls	r0, r2, #1
   80a7e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   80a82:	4402      	add	r2, r0
   80a84:	3401      	adds	r4, #1
   80a86:	7821      	ldrb	r1, [r4, #0]
   80a88:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
   80a8c:	b2c0      	uxtb	r0, r0
   80a8e:	2809      	cmp	r0, #9
   80a90:	d9f2      	bls.n	80a78 <print+0x24>
   80a92:	2973      	cmp	r1, #115	; 0x73
   80a94:	d018      	beq.n	80ac8 <print+0x74>
   80a96:	2964      	cmp	r1, #100	; 0x64
   80a98:	d022      	beq.n	80ae0 <print+0x8c>
   80a9a:	2978      	cmp	r1, #120	; 0x78
   80a9c:	d02f      	beq.n	80afe <print+0xaa>
   80a9e:	2958      	cmp	r1, #88	; 0x58
   80aa0:	d03c      	beq.n	80b1c <print+0xc8>
   80aa2:	2975      	cmp	r1, #117	; 0x75
   80aa4:	d049      	beq.n	80b3a <print+0xe6>
   80aa6:	2963      	cmp	r1, #99	; 0x63
   80aa8:	d15c      	bne.n	80b64 <print+0x110>
   80aaa:	9905      	ldr	r1, [sp, #20]
   80aac:	1d08      	adds	r0, r1, #4
   80aae:	9005      	str	r0, [sp, #20]
   80ab0:	7809      	ldrb	r1, [r1, #0]
   80ab2:	f88d 101c 	strb.w	r1, [sp, #28]
   80ab6:	2100      	movs	r1, #0
   80ab8:	f88d 101d 	strb.w	r1, [sp, #29]
   80abc:	a907      	add	r1, sp, #28
   80abe:	4630      	mov	r0, r6
   80ac0:	4f34      	ldr	r7, [pc, #208]	; (80b94 <print+0x140>)
   80ac2:	47b8      	blx	r7
   80ac4:	4405      	add	r5, r0
   80ac6:	e04d      	b.n	80b64 <print+0x110>
   80ac8:	9905      	ldr	r1, [sp, #20]
   80aca:	1d08      	adds	r0, r1, #4
   80acc:	9005      	str	r0, [sp, #20]
   80ace:	6809      	ldr	r1, [r1, #0]
   80ad0:	b121      	cbz	r1, 80adc <print+0x88>
   80ad2:	4630      	mov	r0, r6
   80ad4:	4f2f      	ldr	r7, [pc, #188]	; (80b94 <print+0x140>)
   80ad6:	47b8      	blx	r7
   80ad8:	4405      	add	r5, r0
   80ada:	e043      	b.n	80b64 <print+0x110>
   80adc:	492e      	ldr	r1, [pc, #184]	; (80b98 <print+0x144>)
   80ade:	e7f8      	b.n	80ad2 <print+0x7e>
   80ae0:	9905      	ldr	r1, [sp, #20]
   80ae2:	1d08      	adds	r0, r1, #4
   80ae4:	9005      	str	r0, [sp, #20]
   80ae6:	6809      	ldr	r1, [r1, #0]
   80ae8:	2061      	movs	r0, #97	; 0x61
   80aea:	9002      	str	r0, [sp, #8]
   80aec:	9301      	str	r3, [sp, #4]
   80aee:	9200      	str	r2, [sp, #0]
   80af0:	2301      	movs	r3, #1
   80af2:	220a      	movs	r2, #10
   80af4:	4630      	mov	r0, r6
   80af6:	4f29      	ldr	r7, [pc, #164]	; (80b9c <print+0x148>)
   80af8:	47b8      	blx	r7
   80afa:	4405      	add	r5, r0
   80afc:	e032      	b.n	80b64 <print+0x110>
   80afe:	9905      	ldr	r1, [sp, #20]
   80b00:	1d08      	adds	r0, r1, #4
   80b02:	9005      	str	r0, [sp, #20]
   80b04:	6809      	ldr	r1, [r1, #0]
   80b06:	2061      	movs	r0, #97	; 0x61
   80b08:	9002      	str	r0, [sp, #8]
   80b0a:	9301      	str	r3, [sp, #4]
   80b0c:	9200      	str	r2, [sp, #0]
   80b0e:	2300      	movs	r3, #0
   80b10:	2210      	movs	r2, #16
   80b12:	4630      	mov	r0, r6
   80b14:	4f21      	ldr	r7, [pc, #132]	; (80b9c <print+0x148>)
   80b16:	47b8      	blx	r7
   80b18:	4405      	add	r5, r0
   80b1a:	e023      	b.n	80b64 <print+0x110>
   80b1c:	9905      	ldr	r1, [sp, #20]
   80b1e:	1d08      	adds	r0, r1, #4
   80b20:	9005      	str	r0, [sp, #20]
   80b22:	6809      	ldr	r1, [r1, #0]
   80b24:	2041      	movs	r0, #65	; 0x41
   80b26:	9002      	str	r0, [sp, #8]
   80b28:	9301      	str	r3, [sp, #4]
   80b2a:	9200      	str	r2, [sp, #0]
   80b2c:	2300      	movs	r3, #0
   80b2e:	2210      	movs	r2, #16
   80b30:	4630      	mov	r0, r6
   80b32:	4f1a      	ldr	r7, [pc, #104]	; (80b9c <print+0x148>)
   80b34:	47b8      	blx	r7
   80b36:	4405      	add	r5, r0
   80b38:	e014      	b.n	80b64 <print+0x110>
   80b3a:	9905      	ldr	r1, [sp, #20]
   80b3c:	1d08      	adds	r0, r1, #4
   80b3e:	9005      	str	r0, [sp, #20]
   80b40:	6809      	ldr	r1, [r1, #0]
   80b42:	2061      	movs	r0, #97	; 0x61
   80b44:	9002      	str	r0, [sp, #8]
   80b46:	9301      	str	r3, [sp, #4]
   80b48:	9200      	str	r2, [sp, #0]
   80b4a:	2300      	movs	r3, #0
   80b4c:	220a      	movs	r2, #10
   80b4e:	4630      	mov	r0, r6
   80b50:	4f12      	ldr	r7, [pc, #72]	; (80b9c <print+0x148>)
   80b52:	47b8      	blx	r7
   80b54:	4405      	add	r5, r0
   80b56:	e005      	b.n	80b64 <print+0x110>
   80b58:	4614      	mov	r4, r2
   80b5a:	7821      	ldrb	r1, [r4, #0]
   80b5c:	4630      	mov	r0, r6
   80b5e:	4b10      	ldr	r3, [pc, #64]	; (80ba0 <print+0x14c>)
   80b60:	4798      	blx	r3
   80b62:	3501      	adds	r5, #1
   80b64:	3401      	adds	r4, #1
   80b66:	7823      	ldrb	r3, [r4, #0]
   80b68:	b163      	cbz	r3, 80b84 <print+0x130>
   80b6a:	2b25      	cmp	r3, #37	; 0x25
   80b6c:	d1f5      	bne.n	80b5a <print+0x106>
   80b6e:	1c62      	adds	r2, r4, #1
   80b70:	7863      	ldrb	r3, [r4, #1]
   80b72:	b13b      	cbz	r3, 80b84 <print+0x130>
   80b74:	2b25      	cmp	r3, #37	; 0x25
   80b76:	d0ef      	beq.n	80b58 <print+0x104>
   80b78:	2b2d      	cmp	r3, #45	; 0x2d
   80b7a:	f43f af72 	beq.w	80a62 <print+0xe>
   80b7e:	2300      	movs	r3, #0
   80b80:	4614      	mov	r4, r2
   80b82:	e774      	b.n	80a6e <print+0x1a>
   80b84:	b116      	cbz	r6, 80b8c <print+0x138>
   80b86:	6833      	ldr	r3, [r6, #0]
   80b88:	2200      	movs	r2, #0
   80b8a:	701a      	strb	r2, [r3, #0]
   80b8c:	4628      	mov	r0, r5
   80b8e:	b009      	add	sp, #36	; 0x24
   80b90:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80b92:	bf00      	nop
   80b94:	00080925 	.word	0x00080925
   80b98:	0008178c 	.word	0x0008178c
   80b9c:	000809a9 	.word	0x000809a9
   80ba0:	00080915 	.word	0x00080915

00080ba4 <printf>:
   80ba4:	b40f      	push	{r0, r1, r2, r3}
   80ba6:	b500      	push	{lr}
   80ba8:	b083      	sub	sp, #12
   80baa:	aa04      	add	r2, sp, #16
   80bac:	f852 1b04 	ldr.w	r1, [r2], #4
   80bb0:	9201      	str	r2, [sp, #4]
   80bb2:	2000      	movs	r0, #0
   80bb4:	4b03      	ldr	r3, [pc, #12]	; (80bc4 <printf+0x20>)
   80bb6:	4798      	blx	r3
   80bb8:	b003      	add	sp, #12
   80bba:	f85d eb04 	ldr.w	lr, [sp], #4
   80bbe:	b004      	add	sp, #16
   80bc0:	4770      	bx	lr
   80bc2:	bf00      	nop
   80bc4:	00080a55 	.word	0x00080a55

00080bc8 <pwm_init>:


void pwm_init(void) {
	
	
	PMC->PMC_PCER1 |= 1 << (ID_PWM - 32); //Allows power to PID36, PWM;
   80bc8:	4a18      	ldr	r2, [pc, #96]	; (80c2c <pwm_init+0x64>)
   80bca:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
   80bce:	f043 0310 	orr.w	r3, r3, #16
   80bd2:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

	PIOC->PIO_PDR |= PIO_PC18B_PWMH6 | PIO_PC19B_PWMH5; //Disables the PIO, so that peripheral can use it. Not sure if this is the correct implementation
   80bd6:	4b16      	ldr	r3, [pc, #88]	; (80c30 <pwm_init+0x68>)
   80bd8:	685a      	ldr	r2, [r3, #4]
   80bda:	f442 2240 	orr.w	r2, r2, #786432	; 0xc0000
   80bde:	605a      	str	r2, [r3, #4]
	PIOC->PIO_ABSR |= PIO_PC18B_PWMH6 | PIO_PC19B_PWMH5; //Selects peripheral 2.
   80be0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   80be2:	f442 2240 	orr.w	r2, r2, #786432	; 0xc0000
   80be6:	671a      	str	r2, [r3, #112]	; 0x70
	
	PWM->PWM_WPCR |= 0xFC; // SELECTS GROUP 0-6; WPRGx
   80be8:	4b12      	ldr	r3, [pc, #72]	; (80c34 <pwm_init+0x6c>)
   80bea:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
   80bee:	f042 02fc 	orr.w	r2, r2, #252	; 0xfc
   80bf2:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PWM->PWM_WPCR |= PWM_WPCR_WPCMD(0); //Unlock user interface
   80bf6:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
   80bfa:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	
	PWM->PWM_CLK = PWM_CLK_DIVA(1) | PWM_CLK_DIVB(1) | PWM_CLK_PREA(7) | PWM_CLK_PREB(7); //TODO: check if this is correct, MCK/128
   80bfe:	4a0e      	ldr	r2, [pc, #56]	; (80c38 <pwm_init+0x70>)
   80c00:	601a      	str	r2, [r3, #0]
	
	PWM->PWM_DIS = PWM_DIS_CHID5 | PWM_DIS_CHID6;
   80c02:	2160      	movs	r1, #96	; 0x60
   80c04:	6099      	str	r1, [r3, #8]
	
	REG_PWM_CMR5 = PWM_CMR_CPRE_CLKA; //CLOCK A, LEFT ALIGNED
   80c06:	200b      	movs	r0, #11
   80c08:	4a0c      	ldr	r2, [pc, #48]	; (80c3c <pwm_init+0x74>)
   80c0a:	6010      	str	r0, [r2, #0]
	REG_PWM_CMR6 = PWM_CMR_CPRE_CLKB; //CLOCK B, LEFT ALIGNED
   80c0c:	200c      	movs	r0, #12
   80c0e:	3220      	adds	r2, #32
   80c10:	6010      	str	r0, [r2, #0]
	
	REG_PWM_CPRD5 = 0x3345; //SETS THE PERIOD TO 20MS, 58MHZ*20ms = X * CPRD
   80c12:	f243 3245 	movw	r2, #13125	; 0x3345
   80c16:	480a      	ldr	r0, [pc, #40]	; (80c40 <pwm_init+0x78>)
   80c18:	6002      	str	r2, [r0, #0]
	REG_PWM_CPRD6 = 0x3345;
   80c1a:	3020      	adds	r0, #32
   80c1c:	6002      	str	r2, [r0, #0]
	
	REG_PWM_CDTY5 = 0x3345; // 
   80c1e:	3828      	subs	r0, #40	; 0x28
   80c20:	6002      	str	r2, [r0, #0]
	REG_PWM_CDTY6 = 0x3345; //used to actually change pwm, 0x3345 = 0 V, 0x00 = 5V
   80c22:	3020      	adds	r0, #32
   80c24:	6002      	str	r2, [r0, #0]
	

	PWM->PWM_ENA = PWM_ENA_CHID5 | PWM_ENA_CHID6; //ENABLE
   80c26:	6059      	str	r1, [r3, #4]
   80c28:	4770      	bx	lr
   80c2a:	bf00      	nop
   80c2c:	400e0600 	.word	0x400e0600
   80c30:	400e1200 	.word	0x400e1200
   80c34:	40094000 	.word	0x40094000
   80c38:	07010701 	.word	0x07010701
   80c3c:	400942a0 	.word	0x400942a0
   80c40:	400942ac 	.word	0x400942ac

00080c44 <timer_init>:
   80c44:	4a09      	ldr	r2, [pc, #36]	; (80c6c <timer_init+0x28>)
   80c46:	6913      	ldr	r3, [r2, #16]
   80c48:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
   80c4c:	6113      	str	r3, [r2, #16]
   80c4e:	4b08      	ldr	r3, [pc, #32]	; (80c70 <timer_init+0x2c>)
   80c50:	685a      	ldr	r2, [r3, #4]
   80c52:	f042 0203 	orr.w	r2, r2, #3
   80c56:	605a      	str	r2, [r3, #4]
   80c58:	681a      	ldr	r2, [r3, #0]
   80c5a:	f042 0201 	orr.w	r2, r2, #1
   80c5e:	601a      	str	r2, [r3, #0]
   80c60:	681a      	ldr	r2, [r3, #0]
   80c62:	f042 0204 	orr.w	r2, r2, #4
   80c66:	601a      	str	r2, [r3, #0]
   80c68:	4770      	bx	lr
   80c6a:	bf00      	nop
   80c6c:	400e0600 	.word	0x400e0600
   80c70:	40080000 	.word	0x40080000

00080c74 <timer_read>:
   80c74:	4b01      	ldr	r3, [pc, #4]	; (80c7c <timer_read+0x8>)
   80c76:	6918      	ldr	r0, [r3, #16]
   80c78:	4770      	bx	lr
   80c7a:	bf00      	nop
   80c7c:	40080000 	.word	0x40080000

00080c80 <delay_micros_10>:
   80c80:	b538      	push	{r3, r4, r5, lr}
   80c82:	4604      	mov	r4, r0
   80c84:	4b06      	ldr	r3, [pc, #24]	; (80ca0 <delay_micros_10+0x20>)
   80c86:	4798      	blx	r3
   80c88:	4605      	mov	r5, r0
   80c8a:	e001      	b.n	80c90 <delay_micros_10+0x10>
   80c8c:	4b04      	ldr	r3, [pc, #16]	; (80ca0 <delay_micros_10+0x20>)
   80c8e:	4798      	blx	r3
   80c90:	4b03      	ldr	r3, [pc, #12]	; (80ca0 <delay_micros_10+0x20>)
   80c92:	4798      	blx	r3
   80c94:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   80c98:	442b      	add	r3, r5
   80c9a:	4298      	cmp	r0, r3
   80c9c:	dbf6      	blt.n	80c8c <delay_micros_10+0xc>
   80c9e:	bd38      	pop	{r3, r4, r5, pc}
   80ca0:	00080c75 	.word	0x00080c75

00080ca4 <timer_ms_read>:
   80ca4:	4b03      	ldr	r3, [pc, #12]	; (80cb4 <timer_ms_read+0x10>)
   80ca6:	6918      	ldr	r0, [r3, #16]
   80ca8:	4b03      	ldr	r3, [pc, #12]	; (80cb8 <timer_ms_read+0x14>)
   80caa:	fba3 3000 	umull	r3, r0, r3, r0
   80cae:	0a40      	lsrs	r0, r0, #9
   80cb0:	4770      	bx	lr
   80cb2:	bf00      	nop
   80cb4:	40080000 	.word	0x40080000
   80cb8:	c7ce0c7d 	.word	0xc7ce0c7d

00080cbc <configure_uart>:
   80cbc:	4b16      	ldr	r3, [pc, #88]	; (80d18 <configure_uart+0x5c>)
   80cbe:	2200      	movs	r2, #0
   80cc0:	701a      	strb	r2, [r3, #0]
   80cc2:	705a      	strb	r2, [r3, #1]
   80cc4:	4b15      	ldr	r3, [pc, #84]	; (80d1c <configure_uart+0x60>)
   80cc6:	f44f 7140 	mov.w	r1, #768	; 0x300
   80cca:	6459      	str	r1, [r3, #68]	; 0x44
   80ccc:	6059      	str	r1, [r3, #4]
   80cce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   80cd0:	6f18      	ldr	r0, [r3, #112]	; 0x70
   80cd2:	4002      	ands	r2, r0
   80cd4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   80cd8:	671a      	str	r2, [r3, #112]	; 0x70
   80cda:	6659      	str	r1, [r3, #100]	; 0x64
   80cdc:	f44f 7280 	mov.w	r2, #256	; 0x100
   80ce0:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
   80ce4:	611a      	str	r2, [r3, #16]
   80ce6:	f503 7300 	add.w	r3, r3, #512	; 0x200
   80cea:	21ac      	movs	r1, #172	; 0xac
   80cec:	6019      	str	r1, [r3, #0]
   80cee:	f240 2123 	movw	r1, #547	; 0x223
   80cf2:	6219      	str	r1, [r3, #32]
   80cf4:	f44f 6100 	mov.w	r1, #2048	; 0x800
   80cf8:	6059      	str	r1, [r3, #4]
   80cfa:	f240 2102 	movw	r1, #514	; 0x202
   80cfe:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   80d02:	f04f 31ff 	mov.w	r1, #4294967295
   80d06:	60d9      	str	r1, [r3, #12]
   80d08:	21e1      	movs	r1, #225	; 0xe1
   80d0a:	6099      	str	r1, [r3, #8]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   80d0c:	4904      	ldr	r1, [pc, #16]	; (80d20 <configure_uart+0x64>)
   80d0e:	600a      	str	r2, [r1, #0]
   80d10:	2250      	movs	r2, #80	; 0x50
   80d12:	601a      	str	r2, [r3, #0]
   80d14:	4770      	bx	lr
   80d16:	bf00      	nop
   80d18:	20000480 	.word	0x20000480
   80d1c:	400e0e00 	.word	0x400e0e00
   80d20:	e000e100 	.word	0xe000e100

00080d24 <uart_putchar>:
   80d24:	4b07      	ldr	r3, [pc, #28]	; (80d44 <uart_putchar+0x20>)
   80d26:	695b      	ldr	r3, [r3, #20]
   80d28:	f013 0f02 	tst.w	r3, #2
   80d2c:	d008      	beq.n	80d40 <uart_putchar+0x1c>
   80d2e:	4b05      	ldr	r3, [pc, #20]	; (80d44 <uart_putchar+0x20>)
   80d30:	61d8      	str	r0, [r3, #28]
   80d32:	4b04      	ldr	r3, [pc, #16]	; (80d44 <uart_putchar+0x20>)
   80d34:	695b      	ldr	r3, [r3, #20]
   80d36:	f413 7f00 	tst.w	r3, #512	; 0x200
   80d3a:	d0fa      	beq.n	80d32 <uart_putchar+0xe>
   80d3c:	2000      	movs	r0, #0
   80d3e:	4770      	bx	lr
   80d40:	2001      	movs	r0, #1
   80d42:	4770      	bx	lr
   80d44:	400e0800 	.word	0x400e0800

00080d48 <UART_Handler>:
   80d48:	b508      	push	{r3, lr}
   80d4a:	4b15      	ldr	r3, [pc, #84]	; (80da0 <UART_Handler+0x58>)
   80d4c:	695b      	ldr	r3, [r3, #20]
   80d4e:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   80d52:	d003      	beq.n	80d5c <UART_Handler+0x14>
   80d54:	f44f 71a8 	mov.w	r1, #336	; 0x150
   80d58:	4a11      	ldr	r2, [pc, #68]	; (80da0 <UART_Handler+0x58>)
   80d5a:	6011      	str	r1, [r2, #0]
   80d5c:	f013 0f01 	tst.w	r3, #1
   80d60:	d012      	beq.n	80d88 <UART_Handler+0x40>
   80d62:	4810      	ldr	r0, [pc, #64]	; (80da4 <UART_Handler+0x5c>)
   80d64:	7842      	ldrb	r2, [r0, #1]
   80d66:	1c53      	adds	r3, r2, #1
   80d68:	4259      	negs	r1, r3
   80d6a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   80d6e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   80d72:	bf58      	it	pl
   80d74:	424b      	negpl	r3, r1
   80d76:	7801      	ldrb	r1, [r0, #0]
   80d78:	428b      	cmp	r3, r1
   80d7a:	d006      	beq.n	80d8a <UART_Handler+0x42>
   80d7c:	4908      	ldr	r1, [pc, #32]	; (80da0 <UART_Handler+0x58>)
   80d7e:	6988      	ldr	r0, [r1, #24]
   80d80:	4908      	ldr	r1, [pc, #32]	; (80da4 <UART_Handler+0x5c>)
   80d82:	440a      	add	r2, r1
   80d84:	7090      	strb	r0, [r2, #2]
   80d86:	704b      	strb	r3, [r1, #1]
   80d88:	bd08      	pop	{r3, pc}
   80d8a:	4807      	ldr	r0, [pc, #28]	; (80da8 <UART_Handler+0x60>)
   80d8c:	4b07      	ldr	r3, [pc, #28]	; (80dac <UART_Handler+0x64>)
   80d8e:	4798      	blx	r3
   80d90:	4b04      	ldr	r3, [pc, #16]	; (80da4 <UART_Handler+0x5c>)
   80d92:	7859      	ldrb	r1, [r3, #1]
   80d94:	4a02      	ldr	r2, [pc, #8]	; (80da0 <UART_Handler+0x58>)
   80d96:	6992      	ldr	r2, [r2, #24]
   80d98:	440b      	add	r3, r1
   80d9a:	709a      	strb	r2, [r3, #2]
   80d9c:	bd08      	pop	{r3, pc}
   80d9e:	bf00      	nop
   80da0:	400e0800 	.word	0x400e0800
   80da4:	20000480 	.word	0x20000480
   80da8:	00081794 	.word	0x00081794
   80dac:	00080ba5 	.word	0x00080ba5

00080db0 <__aeabi_drsub>:
   80db0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   80db4:	e002      	b.n	80dbc <__adddf3>
   80db6:	bf00      	nop

00080db8 <__aeabi_dsub>:
   80db8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00080dbc <__adddf3>:
   80dbc:	b530      	push	{r4, r5, lr}
   80dbe:	ea4f 0441 	mov.w	r4, r1, lsl #1
   80dc2:	ea4f 0543 	mov.w	r5, r3, lsl #1
   80dc6:	ea94 0f05 	teq	r4, r5
   80dca:	bf08      	it	eq
   80dcc:	ea90 0f02 	teqeq	r0, r2
   80dd0:	bf1f      	itttt	ne
   80dd2:	ea54 0c00 	orrsne.w	ip, r4, r0
   80dd6:	ea55 0c02 	orrsne.w	ip, r5, r2
   80dda:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   80dde:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   80de2:	f000 80e2 	beq.w	80faa <__adddf3+0x1ee>
   80de6:	ea4f 5454 	mov.w	r4, r4, lsr #21
   80dea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   80dee:	bfb8      	it	lt
   80df0:	426d      	neglt	r5, r5
   80df2:	dd0c      	ble.n	80e0e <__adddf3+0x52>
   80df4:	442c      	add	r4, r5
   80df6:	ea80 0202 	eor.w	r2, r0, r2
   80dfa:	ea81 0303 	eor.w	r3, r1, r3
   80dfe:	ea82 0000 	eor.w	r0, r2, r0
   80e02:	ea83 0101 	eor.w	r1, r3, r1
   80e06:	ea80 0202 	eor.w	r2, r0, r2
   80e0a:	ea81 0303 	eor.w	r3, r1, r3
   80e0e:	2d36      	cmp	r5, #54	; 0x36
   80e10:	bf88      	it	hi
   80e12:	bd30      	pophi	{r4, r5, pc}
   80e14:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   80e18:	ea4f 3101 	mov.w	r1, r1, lsl #12
   80e1c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   80e20:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   80e24:	d002      	beq.n	80e2c <__adddf3+0x70>
   80e26:	4240      	negs	r0, r0
   80e28:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   80e2c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   80e30:	ea4f 3303 	mov.w	r3, r3, lsl #12
   80e34:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   80e38:	d002      	beq.n	80e40 <__adddf3+0x84>
   80e3a:	4252      	negs	r2, r2
   80e3c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   80e40:	ea94 0f05 	teq	r4, r5
   80e44:	f000 80a7 	beq.w	80f96 <__adddf3+0x1da>
   80e48:	f1a4 0401 	sub.w	r4, r4, #1
   80e4c:	f1d5 0e20 	rsbs	lr, r5, #32
   80e50:	db0d      	blt.n	80e6e <__adddf3+0xb2>
   80e52:	fa02 fc0e 	lsl.w	ip, r2, lr
   80e56:	fa22 f205 	lsr.w	r2, r2, r5
   80e5a:	1880      	adds	r0, r0, r2
   80e5c:	f141 0100 	adc.w	r1, r1, #0
   80e60:	fa03 f20e 	lsl.w	r2, r3, lr
   80e64:	1880      	adds	r0, r0, r2
   80e66:	fa43 f305 	asr.w	r3, r3, r5
   80e6a:	4159      	adcs	r1, r3
   80e6c:	e00e      	b.n	80e8c <__adddf3+0xd0>
   80e6e:	f1a5 0520 	sub.w	r5, r5, #32
   80e72:	f10e 0e20 	add.w	lr, lr, #32
   80e76:	2a01      	cmp	r2, #1
   80e78:	fa03 fc0e 	lsl.w	ip, r3, lr
   80e7c:	bf28      	it	cs
   80e7e:	f04c 0c02 	orrcs.w	ip, ip, #2
   80e82:	fa43 f305 	asr.w	r3, r3, r5
   80e86:	18c0      	adds	r0, r0, r3
   80e88:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   80e8c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   80e90:	d507      	bpl.n	80ea2 <__adddf3+0xe6>
   80e92:	f04f 0e00 	mov.w	lr, #0
   80e96:	f1dc 0c00 	rsbs	ip, ip, #0
   80e9a:	eb7e 0000 	sbcs.w	r0, lr, r0
   80e9e:	eb6e 0101 	sbc.w	r1, lr, r1
   80ea2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   80ea6:	d31b      	bcc.n	80ee0 <__adddf3+0x124>
   80ea8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   80eac:	d30c      	bcc.n	80ec8 <__adddf3+0x10c>
   80eae:	0849      	lsrs	r1, r1, #1
   80eb0:	ea5f 0030 	movs.w	r0, r0, rrx
   80eb4:	ea4f 0c3c 	mov.w	ip, ip, rrx
   80eb8:	f104 0401 	add.w	r4, r4, #1
   80ebc:	ea4f 5244 	mov.w	r2, r4, lsl #21
   80ec0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   80ec4:	f080 809a 	bcs.w	80ffc <__adddf3+0x240>
   80ec8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   80ecc:	bf08      	it	eq
   80ece:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   80ed2:	f150 0000 	adcs.w	r0, r0, #0
   80ed6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   80eda:	ea41 0105 	orr.w	r1, r1, r5
   80ede:	bd30      	pop	{r4, r5, pc}
   80ee0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   80ee4:	4140      	adcs	r0, r0
   80ee6:	eb41 0101 	adc.w	r1, r1, r1
   80eea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   80eee:	f1a4 0401 	sub.w	r4, r4, #1
   80ef2:	d1e9      	bne.n	80ec8 <__adddf3+0x10c>
   80ef4:	f091 0f00 	teq	r1, #0
   80ef8:	bf04      	itt	eq
   80efa:	4601      	moveq	r1, r0
   80efc:	2000      	moveq	r0, #0
   80efe:	fab1 f381 	clz	r3, r1
   80f02:	bf08      	it	eq
   80f04:	3320      	addeq	r3, #32
   80f06:	f1a3 030b 	sub.w	r3, r3, #11
   80f0a:	f1b3 0220 	subs.w	r2, r3, #32
   80f0e:	da0c      	bge.n	80f2a <__adddf3+0x16e>
   80f10:	320c      	adds	r2, #12
   80f12:	dd08      	ble.n	80f26 <__adddf3+0x16a>
   80f14:	f102 0c14 	add.w	ip, r2, #20
   80f18:	f1c2 020c 	rsb	r2, r2, #12
   80f1c:	fa01 f00c 	lsl.w	r0, r1, ip
   80f20:	fa21 f102 	lsr.w	r1, r1, r2
   80f24:	e00c      	b.n	80f40 <__adddf3+0x184>
   80f26:	f102 0214 	add.w	r2, r2, #20
   80f2a:	bfd8      	it	le
   80f2c:	f1c2 0c20 	rsble	ip, r2, #32
   80f30:	fa01 f102 	lsl.w	r1, r1, r2
   80f34:	fa20 fc0c 	lsr.w	ip, r0, ip
   80f38:	bfdc      	itt	le
   80f3a:	ea41 010c 	orrle.w	r1, r1, ip
   80f3e:	4090      	lslle	r0, r2
   80f40:	1ae4      	subs	r4, r4, r3
   80f42:	bfa2      	ittt	ge
   80f44:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   80f48:	4329      	orrge	r1, r5
   80f4a:	bd30      	popge	{r4, r5, pc}
   80f4c:	ea6f 0404 	mvn.w	r4, r4
   80f50:	3c1f      	subs	r4, #31
   80f52:	da1c      	bge.n	80f8e <__adddf3+0x1d2>
   80f54:	340c      	adds	r4, #12
   80f56:	dc0e      	bgt.n	80f76 <__adddf3+0x1ba>
   80f58:	f104 0414 	add.w	r4, r4, #20
   80f5c:	f1c4 0220 	rsb	r2, r4, #32
   80f60:	fa20 f004 	lsr.w	r0, r0, r4
   80f64:	fa01 f302 	lsl.w	r3, r1, r2
   80f68:	ea40 0003 	orr.w	r0, r0, r3
   80f6c:	fa21 f304 	lsr.w	r3, r1, r4
   80f70:	ea45 0103 	orr.w	r1, r5, r3
   80f74:	bd30      	pop	{r4, r5, pc}
   80f76:	f1c4 040c 	rsb	r4, r4, #12
   80f7a:	f1c4 0220 	rsb	r2, r4, #32
   80f7e:	fa20 f002 	lsr.w	r0, r0, r2
   80f82:	fa01 f304 	lsl.w	r3, r1, r4
   80f86:	ea40 0003 	orr.w	r0, r0, r3
   80f8a:	4629      	mov	r1, r5
   80f8c:	bd30      	pop	{r4, r5, pc}
   80f8e:	fa21 f004 	lsr.w	r0, r1, r4
   80f92:	4629      	mov	r1, r5
   80f94:	bd30      	pop	{r4, r5, pc}
   80f96:	f094 0f00 	teq	r4, #0
   80f9a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   80f9e:	bf06      	itte	eq
   80fa0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   80fa4:	3401      	addeq	r4, #1
   80fa6:	3d01      	subne	r5, #1
   80fa8:	e74e      	b.n	80e48 <__adddf3+0x8c>
   80faa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   80fae:	bf18      	it	ne
   80fb0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   80fb4:	d029      	beq.n	8100a <__adddf3+0x24e>
   80fb6:	ea94 0f05 	teq	r4, r5
   80fba:	bf08      	it	eq
   80fbc:	ea90 0f02 	teqeq	r0, r2
   80fc0:	d005      	beq.n	80fce <__adddf3+0x212>
   80fc2:	ea54 0c00 	orrs.w	ip, r4, r0
   80fc6:	bf04      	itt	eq
   80fc8:	4619      	moveq	r1, r3
   80fca:	4610      	moveq	r0, r2
   80fcc:	bd30      	pop	{r4, r5, pc}
   80fce:	ea91 0f03 	teq	r1, r3
   80fd2:	bf1e      	ittt	ne
   80fd4:	2100      	movne	r1, #0
   80fd6:	2000      	movne	r0, #0
   80fd8:	bd30      	popne	{r4, r5, pc}
   80fda:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   80fde:	d105      	bne.n	80fec <__adddf3+0x230>
   80fe0:	0040      	lsls	r0, r0, #1
   80fe2:	4149      	adcs	r1, r1
   80fe4:	bf28      	it	cs
   80fe6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   80fea:	bd30      	pop	{r4, r5, pc}
   80fec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   80ff0:	bf3c      	itt	cc
   80ff2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   80ff6:	bd30      	popcc	{r4, r5, pc}
   80ff8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   80ffc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   81000:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   81004:	f04f 0000 	mov.w	r0, #0
   81008:	bd30      	pop	{r4, r5, pc}
   8100a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   8100e:	bf1a      	itte	ne
   81010:	4619      	movne	r1, r3
   81012:	4610      	movne	r0, r2
   81014:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   81018:	bf1c      	itt	ne
   8101a:	460b      	movne	r3, r1
   8101c:	4602      	movne	r2, r0
   8101e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   81022:	bf06      	itte	eq
   81024:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   81028:	ea91 0f03 	teqeq	r1, r3
   8102c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   81030:	bd30      	pop	{r4, r5, pc}
   81032:	bf00      	nop

00081034 <__aeabi_ui2d>:
   81034:	f090 0f00 	teq	r0, #0
   81038:	bf04      	itt	eq
   8103a:	2100      	moveq	r1, #0
   8103c:	4770      	bxeq	lr
   8103e:	b530      	push	{r4, r5, lr}
   81040:	f44f 6480 	mov.w	r4, #1024	; 0x400
   81044:	f104 0432 	add.w	r4, r4, #50	; 0x32
   81048:	f04f 0500 	mov.w	r5, #0
   8104c:	f04f 0100 	mov.w	r1, #0
   81050:	e750      	b.n	80ef4 <__adddf3+0x138>
   81052:	bf00      	nop

00081054 <__aeabi_i2d>:
   81054:	f090 0f00 	teq	r0, #0
   81058:	bf04      	itt	eq
   8105a:	2100      	moveq	r1, #0
   8105c:	4770      	bxeq	lr
   8105e:	b530      	push	{r4, r5, lr}
   81060:	f44f 6480 	mov.w	r4, #1024	; 0x400
   81064:	f104 0432 	add.w	r4, r4, #50	; 0x32
   81068:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   8106c:	bf48      	it	mi
   8106e:	4240      	negmi	r0, r0
   81070:	f04f 0100 	mov.w	r1, #0
   81074:	e73e      	b.n	80ef4 <__adddf3+0x138>
   81076:	bf00      	nop

00081078 <__aeabi_f2d>:
   81078:	0042      	lsls	r2, r0, #1
   8107a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   8107e:	ea4f 0131 	mov.w	r1, r1, rrx
   81082:	ea4f 7002 	mov.w	r0, r2, lsl #28
   81086:	bf1f      	itttt	ne
   81088:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   8108c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   81090:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   81094:	4770      	bxne	lr
   81096:	f092 0f00 	teq	r2, #0
   8109a:	bf14      	ite	ne
   8109c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   810a0:	4770      	bxeq	lr
   810a2:	b530      	push	{r4, r5, lr}
   810a4:	f44f 7460 	mov.w	r4, #896	; 0x380
   810a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   810ac:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   810b0:	e720      	b.n	80ef4 <__adddf3+0x138>
   810b2:	bf00      	nop

000810b4 <__aeabi_ul2d>:
   810b4:	ea50 0201 	orrs.w	r2, r0, r1
   810b8:	bf08      	it	eq
   810ba:	4770      	bxeq	lr
   810bc:	b530      	push	{r4, r5, lr}
   810be:	f04f 0500 	mov.w	r5, #0
   810c2:	e00a      	b.n	810da <__aeabi_l2d+0x16>

000810c4 <__aeabi_l2d>:
   810c4:	ea50 0201 	orrs.w	r2, r0, r1
   810c8:	bf08      	it	eq
   810ca:	4770      	bxeq	lr
   810cc:	b530      	push	{r4, r5, lr}
   810ce:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   810d2:	d502      	bpl.n	810da <__aeabi_l2d+0x16>
   810d4:	4240      	negs	r0, r0
   810d6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   810da:	f44f 6480 	mov.w	r4, #1024	; 0x400
   810de:	f104 0432 	add.w	r4, r4, #50	; 0x32
   810e2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   810e6:	f43f aedc 	beq.w	80ea2 <__adddf3+0xe6>
   810ea:	f04f 0203 	mov.w	r2, #3
   810ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   810f2:	bf18      	it	ne
   810f4:	3203      	addne	r2, #3
   810f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   810fa:	bf18      	it	ne
   810fc:	3203      	addne	r2, #3
   810fe:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   81102:	f1c2 0320 	rsb	r3, r2, #32
   81106:	fa00 fc03 	lsl.w	ip, r0, r3
   8110a:	fa20 f002 	lsr.w	r0, r0, r2
   8110e:	fa01 fe03 	lsl.w	lr, r1, r3
   81112:	ea40 000e 	orr.w	r0, r0, lr
   81116:	fa21 f102 	lsr.w	r1, r1, r2
   8111a:	4414      	add	r4, r2
   8111c:	e6c1      	b.n	80ea2 <__adddf3+0xe6>
   8111e:	bf00      	nop

00081120 <__aeabi_dmul>:
   81120:	b570      	push	{r4, r5, r6, lr}
   81122:	f04f 0cff 	mov.w	ip, #255	; 0xff
   81126:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   8112a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   8112e:	bf1d      	ittte	ne
   81130:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   81134:	ea94 0f0c 	teqne	r4, ip
   81138:	ea95 0f0c 	teqne	r5, ip
   8113c:	f000 f8de 	bleq	812fc <__aeabi_dmul+0x1dc>
   81140:	442c      	add	r4, r5
   81142:	ea81 0603 	eor.w	r6, r1, r3
   81146:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   8114a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   8114e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   81152:	bf18      	it	ne
   81154:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   81158:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8115c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   81160:	d038      	beq.n	811d4 <__aeabi_dmul+0xb4>
   81162:	fba0 ce02 	umull	ip, lr, r0, r2
   81166:	f04f 0500 	mov.w	r5, #0
   8116a:	fbe1 e502 	umlal	lr, r5, r1, r2
   8116e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   81172:	fbe0 e503 	umlal	lr, r5, r0, r3
   81176:	f04f 0600 	mov.w	r6, #0
   8117a:	fbe1 5603 	umlal	r5, r6, r1, r3
   8117e:	f09c 0f00 	teq	ip, #0
   81182:	bf18      	it	ne
   81184:	f04e 0e01 	orrne.w	lr, lr, #1
   81188:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   8118c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   81190:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   81194:	d204      	bcs.n	811a0 <__aeabi_dmul+0x80>
   81196:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   8119a:	416d      	adcs	r5, r5
   8119c:	eb46 0606 	adc.w	r6, r6, r6
   811a0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   811a4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   811a8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   811ac:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   811b0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   811b4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   811b8:	bf88      	it	hi
   811ba:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   811be:	d81e      	bhi.n	811fe <__aeabi_dmul+0xde>
   811c0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   811c4:	bf08      	it	eq
   811c6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   811ca:	f150 0000 	adcs.w	r0, r0, #0
   811ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   811d2:	bd70      	pop	{r4, r5, r6, pc}
   811d4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   811d8:	ea46 0101 	orr.w	r1, r6, r1
   811dc:	ea40 0002 	orr.w	r0, r0, r2
   811e0:	ea81 0103 	eor.w	r1, r1, r3
   811e4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   811e8:	bfc2      	ittt	gt
   811ea:	ebd4 050c 	rsbsgt	r5, r4, ip
   811ee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   811f2:	bd70      	popgt	{r4, r5, r6, pc}
   811f4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   811f8:	f04f 0e00 	mov.w	lr, #0
   811fc:	3c01      	subs	r4, #1
   811fe:	f300 80ab 	bgt.w	81358 <__aeabi_dmul+0x238>
   81202:	f114 0f36 	cmn.w	r4, #54	; 0x36
   81206:	bfde      	ittt	le
   81208:	2000      	movle	r0, #0
   8120a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   8120e:	bd70      	pople	{r4, r5, r6, pc}
   81210:	f1c4 0400 	rsb	r4, r4, #0
   81214:	3c20      	subs	r4, #32
   81216:	da35      	bge.n	81284 <__aeabi_dmul+0x164>
   81218:	340c      	adds	r4, #12
   8121a:	dc1b      	bgt.n	81254 <__aeabi_dmul+0x134>
   8121c:	f104 0414 	add.w	r4, r4, #20
   81220:	f1c4 0520 	rsb	r5, r4, #32
   81224:	fa00 f305 	lsl.w	r3, r0, r5
   81228:	fa20 f004 	lsr.w	r0, r0, r4
   8122c:	fa01 f205 	lsl.w	r2, r1, r5
   81230:	ea40 0002 	orr.w	r0, r0, r2
   81234:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   81238:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   8123c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   81240:	fa21 f604 	lsr.w	r6, r1, r4
   81244:	eb42 0106 	adc.w	r1, r2, r6
   81248:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8124c:	bf08      	it	eq
   8124e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   81252:	bd70      	pop	{r4, r5, r6, pc}
   81254:	f1c4 040c 	rsb	r4, r4, #12
   81258:	f1c4 0520 	rsb	r5, r4, #32
   8125c:	fa00 f304 	lsl.w	r3, r0, r4
   81260:	fa20 f005 	lsr.w	r0, r0, r5
   81264:	fa01 f204 	lsl.w	r2, r1, r4
   81268:	ea40 0002 	orr.w	r0, r0, r2
   8126c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   81270:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   81274:	f141 0100 	adc.w	r1, r1, #0
   81278:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8127c:	bf08      	it	eq
   8127e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   81282:	bd70      	pop	{r4, r5, r6, pc}
   81284:	f1c4 0520 	rsb	r5, r4, #32
   81288:	fa00 f205 	lsl.w	r2, r0, r5
   8128c:	ea4e 0e02 	orr.w	lr, lr, r2
   81290:	fa20 f304 	lsr.w	r3, r0, r4
   81294:	fa01 f205 	lsl.w	r2, r1, r5
   81298:	ea43 0302 	orr.w	r3, r3, r2
   8129c:	fa21 f004 	lsr.w	r0, r1, r4
   812a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   812a4:	fa21 f204 	lsr.w	r2, r1, r4
   812a8:	ea20 0002 	bic.w	r0, r0, r2
   812ac:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   812b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   812b4:	bf08      	it	eq
   812b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   812ba:	bd70      	pop	{r4, r5, r6, pc}
   812bc:	f094 0f00 	teq	r4, #0
   812c0:	d10f      	bne.n	812e2 <__aeabi_dmul+0x1c2>
   812c2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   812c6:	0040      	lsls	r0, r0, #1
   812c8:	eb41 0101 	adc.w	r1, r1, r1
   812cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   812d0:	bf08      	it	eq
   812d2:	3c01      	subeq	r4, #1
   812d4:	d0f7      	beq.n	812c6 <__aeabi_dmul+0x1a6>
   812d6:	ea41 0106 	orr.w	r1, r1, r6
   812da:	f095 0f00 	teq	r5, #0
   812de:	bf18      	it	ne
   812e0:	4770      	bxne	lr
   812e2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   812e6:	0052      	lsls	r2, r2, #1
   812e8:	eb43 0303 	adc.w	r3, r3, r3
   812ec:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   812f0:	bf08      	it	eq
   812f2:	3d01      	subeq	r5, #1
   812f4:	d0f7      	beq.n	812e6 <__aeabi_dmul+0x1c6>
   812f6:	ea43 0306 	orr.w	r3, r3, r6
   812fa:	4770      	bx	lr
   812fc:	ea94 0f0c 	teq	r4, ip
   81300:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   81304:	bf18      	it	ne
   81306:	ea95 0f0c 	teqne	r5, ip
   8130a:	d00c      	beq.n	81326 <__aeabi_dmul+0x206>
   8130c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   81310:	bf18      	it	ne
   81312:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   81316:	d1d1      	bne.n	812bc <__aeabi_dmul+0x19c>
   81318:	ea81 0103 	eor.w	r1, r1, r3
   8131c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   81320:	f04f 0000 	mov.w	r0, #0
   81324:	bd70      	pop	{r4, r5, r6, pc}
   81326:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8132a:	bf06      	itte	eq
   8132c:	4610      	moveq	r0, r2
   8132e:	4619      	moveq	r1, r3
   81330:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   81334:	d019      	beq.n	8136a <__aeabi_dmul+0x24a>
   81336:	ea94 0f0c 	teq	r4, ip
   8133a:	d102      	bne.n	81342 <__aeabi_dmul+0x222>
   8133c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   81340:	d113      	bne.n	8136a <__aeabi_dmul+0x24a>
   81342:	ea95 0f0c 	teq	r5, ip
   81346:	d105      	bne.n	81354 <__aeabi_dmul+0x234>
   81348:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   8134c:	bf1c      	itt	ne
   8134e:	4610      	movne	r0, r2
   81350:	4619      	movne	r1, r3
   81352:	d10a      	bne.n	8136a <__aeabi_dmul+0x24a>
   81354:	ea81 0103 	eor.w	r1, r1, r3
   81358:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8135c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   81360:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   81364:	f04f 0000 	mov.w	r0, #0
   81368:	bd70      	pop	{r4, r5, r6, pc}
   8136a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   8136e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   81372:	bd70      	pop	{r4, r5, r6, pc}

00081374 <__aeabi_ddiv>:
   81374:	b570      	push	{r4, r5, r6, lr}
   81376:	f04f 0cff 	mov.w	ip, #255	; 0xff
   8137a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   8137e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   81382:	bf1d      	ittte	ne
   81384:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   81388:	ea94 0f0c 	teqne	r4, ip
   8138c:	ea95 0f0c 	teqne	r5, ip
   81390:	f000 f8a7 	bleq	814e2 <__aeabi_ddiv+0x16e>
   81394:	eba4 0405 	sub.w	r4, r4, r5
   81398:	ea81 0e03 	eor.w	lr, r1, r3
   8139c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   813a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   813a4:	f000 8088 	beq.w	814b8 <__aeabi_ddiv+0x144>
   813a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   813ac:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   813b0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   813b4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   813b8:	ea4f 2202 	mov.w	r2, r2, lsl #8
   813bc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   813c0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   813c4:	ea4f 2600 	mov.w	r6, r0, lsl #8
   813c8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   813cc:	429d      	cmp	r5, r3
   813ce:	bf08      	it	eq
   813d0:	4296      	cmpeq	r6, r2
   813d2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   813d6:	f504 7440 	add.w	r4, r4, #768	; 0x300
   813da:	d202      	bcs.n	813e2 <__aeabi_ddiv+0x6e>
   813dc:	085b      	lsrs	r3, r3, #1
   813de:	ea4f 0232 	mov.w	r2, r2, rrx
   813e2:	1ab6      	subs	r6, r6, r2
   813e4:	eb65 0503 	sbc.w	r5, r5, r3
   813e8:	085b      	lsrs	r3, r3, #1
   813ea:	ea4f 0232 	mov.w	r2, r2, rrx
   813ee:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   813f2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   813f6:	ebb6 0e02 	subs.w	lr, r6, r2
   813fa:	eb75 0e03 	sbcs.w	lr, r5, r3
   813fe:	bf22      	ittt	cs
   81400:	1ab6      	subcs	r6, r6, r2
   81402:	4675      	movcs	r5, lr
   81404:	ea40 000c 	orrcs.w	r0, r0, ip
   81408:	085b      	lsrs	r3, r3, #1
   8140a:	ea4f 0232 	mov.w	r2, r2, rrx
   8140e:	ebb6 0e02 	subs.w	lr, r6, r2
   81412:	eb75 0e03 	sbcs.w	lr, r5, r3
   81416:	bf22      	ittt	cs
   81418:	1ab6      	subcs	r6, r6, r2
   8141a:	4675      	movcs	r5, lr
   8141c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   81420:	085b      	lsrs	r3, r3, #1
   81422:	ea4f 0232 	mov.w	r2, r2, rrx
   81426:	ebb6 0e02 	subs.w	lr, r6, r2
   8142a:	eb75 0e03 	sbcs.w	lr, r5, r3
   8142e:	bf22      	ittt	cs
   81430:	1ab6      	subcs	r6, r6, r2
   81432:	4675      	movcs	r5, lr
   81434:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   81438:	085b      	lsrs	r3, r3, #1
   8143a:	ea4f 0232 	mov.w	r2, r2, rrx
   8143e:	ebb6 0e02 	subs.w	lr, r6, r2
   81442:	eb75 0e03 	sbcs.w	lr, r5, r3
   81446:	bf22      	ittt	cs
   81448:	1ab6      	subcs	r6, r6, r2
   8144a:	4675      	movcs	r5, lr
   8144c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   81450:	ea55 0e06 	orrs.w	lr, r5, r6
   81454:	d018      	beq.n	81488 <__aeabi_ddiv+0x114>
   81456:	ea4f 1505 	mov.w	r5, r5, lsl #4
   8145a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   8145e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   81462:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   81466:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   8146a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   8146e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   81472:	d1c0      	bne.n	813f6 <__aeabi_ddiv+0x82>
   81474:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   81478:	d10b      	bne.n	81492 <__aeabi_ddiv+0x11e>
   8147a:	ea41 0100 	orr.w	r1, r1, r0
   8147e:	f04f 0000 	mov.w	r0, #0
   81482:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   81486:	e7b6      	b.n	813f6 <__aeabi_ddiv+0x82>
   81488:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8148c:	bf04      	itt	eq
   8148e:	4301      	orreq	r1, r0
   81490:	2000      	moveq	r0, #0
   81492:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   81496:	bf88      	it	hi
   81498:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   8149c:	f63f aeaf 	bhi.w	811fe <__aeabi_dmul+0xde>
   814a0:	ebb5 0c03 	subs.w	ip, r5, r3
   814a4:	bf04      	itt	eq
   814a6:	ebb6 0c02 	subseq.w	ip, r6, r2
   814aa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   814ae:	f150 0000 	adcs.w	r0, r0, #0
   814b2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   814b6:	bd70      	pop	{r4, r5, r6, pc}
   814b8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   814bc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   814c0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   814c4:	bfc2      	ittt	gt
   814c6:	ebd4 050c 	rsbsgt	r5, r4, ip
   814ca:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   814ce:	bd70      	popgt	{r4, r5, r6, pc}
   814d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   814d4:	f04f 0e00 	mov.w	lr, #0
   814d8:	3c01      	subs	r4, #1
   814da:	e690      	b.n	811fe <__aeabi_dmul+0xde>
   814dc:	ea45 0e06 	orr.w	lr, r5, r6
   814e0:	e68d      	b.n	811fe <__aeabi_dmul+0xde>
   814e2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   814e6:	ea94 0f0c 	teq	r4, ip
   814ea:	bf08      	it	eq
   814ec:	ea95 0f0c 	teqeq	r5, ip
   814f0:	f43f af3b 	beq.w	8136a <__aeabi_dmul+0x24a>
   814f4:	ea94 0f0c 	teq	r4, ip
   814f8:	d10a      	bne.n	81510 <__aeabi_ddiv+0x19c>
   814fa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   814fe:	f47f af34 	bne.w	8136a <__aeabi_dmul+0x24a>
   81502:	ea95 0f0c 	teq	r5, ip
   81506:	f47f af25 	bne.w	81354 <__aeabi_dmul+0x234>
   8150a:	4610      	mov	r0, r2
   8150c:	4619      	mov	r1, r3
   8150e:	e72c      	b.n	8136a <__aeabi_dmul+0x24a>
   81510:	ea95 0f0c 	teq	r5, ip
   81514:	d106      	bne.n	81524 <__aeabi_ddiv+0x1b0>
   81516:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   8151a:	f43f aefd 	beq.w	81318 <__aeabi_dmul+0x1f8>
   8151e:	4610      	mov	r0, r2
   81520:	4619      	mov	r1, r3
   81522:	e722      	b.n	8136a <__aeabi_dmul+0x24a>
   81524:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   81528:	bf18      	it	ne
   8152a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8152e:	f47f aec5 	bne.w	812bc <__aeabi_dmul+0x19c>
   81532:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   81536:	f47f af0d 	bne.w	81354 <__aeabi_dmul+0x234>
   8153a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   8153e:	f47f aeeb 	bne.w	81318 <__aeabi_dmul+0x1f8>
   81542:	e712      	b.n	8136a <__aeabi_dmul+0x24a>

00081544 <__aeabi_d2iz>:
   81544:	ea4f 0241 	mov.w	r2, r1, lsl #1
   81548:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   8154c:	d215      	bcs.n	8157a <__aeabi_d2iz+0x36>
   8154e:	d511      	bpl.n	81574 <__aeabi_d2iz+0x30>
   81550:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   81554:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   81558:	d912      	bls.n	81580 <__aeabi_d2iz+0x3c>
   8155a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   8155e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   81562:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   81566:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   8156a:	fa23 f002 	lsr.w	r0, r3, r2
   8156e:	bf18      	it	ne
   81570:	4240      	negne	r0, r0
   81572:	4770      	bx	lr
   81574:	f04f 0000 	mov.w	r0, #0
   81578:	4770      	bx	lr
   8157a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   8157e:	d105      	bne.n	8158c <__aeabi_d2iz+0x48>
   81580:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   81584:	bf08      	it	eq
   81586:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   8158a:	4770      	bx	lr
   8158c:	f04f 0000 	mov.w	r0, #0
   81590:	4770      	bx	lr
   81592:	bf00      	nop

00081594 <__libc_init_array>:
   81594:	b570      	push	{r4, r5, r6, lr}
   81596:	4e0f      	ldr	r6, [pc, #60]	; (815d4 <__libc_init_array+0x40>)
   81598:	4d0f      	ldr	r5, [pc, #60]	; (815d8 <__libc_init_array+0x44>)
   8159a:	1b76      	subs	r6, r6, r5
   8159c:	10b6      	asrs	r6, r6, #2
   8159e:	bf18      	it	ne
   815a0:	2400      	movne	r4, #0
   815a2:	d005      	beq.n	815b0 <__libc_init_array+0x1c>
   815a4:	3401      	adds	r4, #1
   815a6:	f855 3b04 	ldr.w	r3, [r5], #4
   815aa:	4798      	blx	r3
   815ac:	42a6      	cmp	r6, r4
   815ae:	d1f9      	bne.n	815a4 <__libc_init_array+0x10>
   815b0:	4e0a      	ldr	r6, [pc, #40]	; (815dc <__libc_init_array+0x48>)
   815b2:	4d0b      	ldr	r5, [pc, #44]	; (815e0 <__libc_init_array+0x4c>)
   815b4:	f000 f900 	bl	817b8 <_init>
   815b8:	1b76      	subs	r6, r6, r5
   815ba:	10b6      	asrs	r6, r6, #2
   815bc:	bf18      	it	ne
   815be:	2400      	movne	r4, #0
   815c0:	d006      	beq.n	815d0 <__libc_init_array+0x3c>
   815c2:	3401      	adds	r4, #1
   815c4:	f855 3b04 	ldr.w	r3, [r5], #4
   815c8:	4798      	blx	r3
   815ca:	42a6      	cmp	r6, r4
   815cc:	d1f9      	bne.n	815c2 <__libc_init_array+0x2e>
   815ce:	bd70      	pop	{r4, r5, r6, pc}
   815d0:	bd70      	pop	{r4, r5, r6, pc}
   815d2:	bf00      	nop
   815d4:	000817c4 	.word	0x000817c4
   815d8:	000817c4 	.word	0x000817c4
   815dc:	000817cc 	.word	0x000817cc
   815e0:	000817c4 	.word	0x000817c4

000815e4 <register_fini>:
   815e4:	4b02      	ldr	r3, [pc, #8]	; (815f0 <register_fini+0xc>)
   815e6:	b113      	cbz	r3, 815ee <register_fini+0xa>
   815e8:	4802      	ldr	r0, [pc, #8]	; (815f4 <register_fini+0x10>)
   815ea:	f000 b805 	b.w	815f8 <atexit>
   815ee:	4770      	bx	lr
   815f0:	00000000 	.word	0x00000000
   815f4:	00081605 	.word	0x00081605

000815f8 <atexit>:
   815f8:	2300      	movs	r3, #0
   815fa:	4601      	mov	r1, r0
   815fc:	461a      	mov	r2, r3
   815fe:	4618      	mov	r0, r3
   81600:	f000 b81e 	b.w	81640 <__register_exitproc>

00081604 <__libc_fini_array>:
   81604:	b538      	push	{r3, r4, r5, lr}
   81606:	4c0a      	ldr	r4, [pc, #40]	; (81630 <__libc_fini_array+0x2c>)
   81608:	4d0a      	ldr	r5, [pc, #40]	; (81634 <__libc_fini_array+0x30>)
   8160a:	1b64      	subs	r4, r4, r5
   8160c:	10a4      	asrs	r4, r4, #2
   8160e:	d00a      	beq.n	81626 <__libc_fini_array+0x22>
   81610:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   81614:	3b01      	subs	r3, #1
   81616:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   8161a:	3c01      	subs	r4, #1
   8161c:	f855 3904 	ldr.w	r3, [r5], #-4
   81620:	4798      	blx	r3
   81622:	2c00      	cmp	r4, #0
   81624:	d1f9      	bne.n	8161a <__libc_fini_array+0x16>
   81626:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   8162a:	f000 b8cf 	b.w	817cc <_fini>
   8162e:	bf00      	nop
   81630:	000817dc 	.word	0x000817dc
   81634:	000817d8 	.word	0x000817d8

00081638 <__retarget_lock_acquire_recursive>:
   81638:	4770      	bx	lr
   8163a:	bf00      	nop

0008163c <__retarget_lock_release_recursive>:
   8163c:	4770      	bx	lr
   8163e:	bf00      	nop

00081640 <__register_exitproc>:
   81640:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   81644:	4d2c      	ldr	r5, [pc, #176]	; (816f8 <__register_exitproc+0xb8>)
   81646:	4606      	mov	r6, r0
   81648:	6828      	ldr	r0, [r5, #0]
   8164a:	4698      	mov	r8, r3
   8164c:	460f      	mov	r7, r1
   8164e:	4691      	mov	r9, r2
   81650:	f7ff fff2 	bl	81638 <__retarget_lock_acquire_recursive>
   81654:	4b29      	ldr	r3, [pc, #164]	; (816fc <__register_exitproc+0xbc>)
   81656:	681c      	ldr	r4, [r3, #0]
   81658:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   8165c:	2b00      	cmp	r3, #0
   8165e:	d03e      	beq.n	816de <__register_exitproc+0x9e>
   81660:	685a      	ldr	r2, [r3, #4]
   81662:	2a1f      	cmp	r2, #31
   81664:	dc1c      	bgt.n	816a0 <__register_exitproc+0x60>
   81666:	f102 0e01 	add.w	lr, r2, #1
   8166a:	b176      	cbz	r6, 8168a <__register_exitproc+0x4a>
   8166c:	2101      	movs	r1, #1
   8166e:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   81672:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   81676:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   8167a:	4091      	lsls	r1, r2
   8167c:	4308      	orrs	r0, r1
   8167e:	2e02      	cmp	r6, #2
   81680:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   81684:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   81688:	d023      	beq.n	816d2 <__register_exitproc+0x92>
   8168a:	3202      	adds	r2, #2
   8168c:	f8c3 e004 	str.w	lr, [r3, #4]
   81690:	6828      	ldr	r0, [r5, #0]
   81692:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   81696:	f7ff ffd1 	bl	8163c <__retarget_lock_release_recursive>
   8169a:	2000      	movs	r0, #0
   8169c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   816a0:	4b17      	ldr	r3, [pc, #92]	; (81700 <__register_exitproc+0xc0>)
   816a2:	b30b      	cbz	r3, 816e8 <__register_exitproc+0xa8>
   816a4:	f44f 70c8 	mov.w	r0, #400	; 0x190
   816a8:	f3af 8000 	nop.w
   816ac:	4603      	mov	r3, r0
   816ae:	b1d8      	cbz	r0, 816e8 <__register_exitproc+0xa8>
   816b0:	2000      	movs	r0, #0
   816b2:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   816b6:	f04f 0e01 	mov.w	lr, #1
   816ba:	6058      	str	r0, [r3, #4]
   816bc:	6019      	str	r1, [r3, #0]
   816be:	4602      	mov	r2, r0
   816c0:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   816c4:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   816c8:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   816cc:	2e00      	cmp	r6, #0
   816ce:	d0dc      	beq.n	8168a <__register_exitproc+0x4a>
   816d0:	e7cc      	b.n	8166c <__register_exitproc+0x2c>
   816d2:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   816d6:	4301      	orrs	r1, r0
   816d8:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   816dc:	e7d5      	b.n	8168a <__register_exitproc+0x4a>
   816de:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   816e2:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   816e6:	e7bb      	b.n	81660 <__register_exitproc+0x20>
   816e8:	6828      	ldr	r0, [r5, #0]
   816ea:	f7ff ffa7 	bl	8163c <__retarget_lock_release_recursive>
   816ee:	f04f 30ff 	mov.w	r0, #4294967295
   816f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   816f6:	bf00      	nop
   816f8:	20000430 	.word	0x20000430
   816fc:	000817b4 	.word	0x000817b4
   81700:	00000000 	.word	0x00000000
   81704:	304e4143 	.word	0x304e4143
   81708:	73656d20 	.word	0x73656d20
   8170c:	65676173 	.word	0x65676173
   81710:	72726120 	.word	0x72726120
   81714:	64657669 	.word	0x64657669
   81718:	206e6920 	.word	0x206e6920
   8171c:	2d6e6f6e 	.word	0x2d6e6f6e
   81720:	64657375 	.word	0x64657375
   81724:	69616d20 	.word	0x69616d20
   81728:	786f626c 	.word	0x786f626c
   8172c:	00000d0a 	.word	0x00000d0a
   81730:	65666572 	.word	0x65666572
   81734:	636e6572 	.word	0x636e6572
   81738:	25203a65 	.word	0x25203a65
   8173c:	00002064 	.word	0x00002064
   81740:	6f727265 	.word	0x6f727265
   81744:	25203a72 	.word	0x25203a72
   81748:	00002064 	.word	0x00002064
   8174c:	203a7075 	.word	0x203a7075
   81750:	00206425 	.word	0x00206425
   81754:	203a6975 	.word	0x203a6975
   81758:	00206425 	.word	0x00206425
   8175c:	203a6475 	.word	0x203a6475
   81760:	00206425 	.word	0x00206425
   81764:	7074756f 	.word	0x7074756f
   81768:	203a7475 	.word	0x203a7475
   8176c:	00206425 	.word	0x00206425
   81770:	6f636e65 	.word	0x6f636e65
   81774:	3a726564 	.word	0x3a726564
   81778:	20642520 	.word	0x20642520
   8177c:	00000000 	.word	0x00000000
   81780:	25203a75 	.word	0x25203a75
   81784:	0a0d2064 	.word	0x0a0d2064
   81788:	00000000 	.word	0x00000000
   8178c:	6c756e28 	.word	0x6c756e28
   81790:	0000296c 	.word	0x0000296c
   81794:	3a525245 	.word	0x3a525245
   81798:	52415520 	.word	0x52415520
   8179c:	58522054 	.word	0x58522054
   817a0:	66756220 	.word	0x66756220
   817a4:	20726566 	.word	0x20726566
   817a8:	66207369 	.word	0x66207369
   817ac:	0a6c6c75 	.word	0x0a6c6c75
   817b0:	0000000d 	.word	0x0000000d

000817b4 <_global_impure_ptr>:
   817b4:	20000008                                ... 

000817b8 <_init>:
   817b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   817ba:	bf00      	nop
   817bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
   817be:	bc08      	pop	{r3}
   817c0:	469e      	mov	lr, r3
   817c2:	4770      	bx	lr

000817c4 <__init_array_start>:
   817c4:	000815e5 	.word	0x000815e5

000817c8 <__frame_dummy_init_array_entry>:
   817c8:	00080119                                ....

000817cc <_fini>:
   817cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   817ce:	bf00      	nop
   817d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   817d2:	bc08      	pop	{r3}
   817d4:	469e      	mov	lr, r3
   817d6:	4770      	bx	lr

000817d8 <__fini_array_start>:
   817d8:	000800f5 	.word	0x000800f5
