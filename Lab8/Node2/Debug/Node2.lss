
Node2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d10  00080000  00080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000043c  20000000  00080d10  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000094  2000043c  0008114c  0002043c  2**2
                  ALLOC
  3 .stack        00000400  200004d0  000811e0  0002043c  2**0
                  ALLOC
  4 .heap         00000200  200008d0  000815e0  0002043c  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  0002043c  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020465  2**0
                  CONTENTS, READONLY
  7 .debug_info   00006cb6  00000000  00000000  000204be  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000122b  00000000  00000000  00027174  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000228  00000000  00000000  0002839f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000001b0  00000000  00000000  000285c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00013883  00000000  00000000  00028777  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00004f34  00000000  00000000  0003bffa  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0005652d  00000000  00000000  00040f2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000005a4  00000000  00000000  0009745c  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00000e37  00000000  00000000  00097a00  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	d0 08 00 20 f5 03 08 00 f1 03 08 00 f1 03 08 00     ... ............
   80010:	f1 03 08 00 f1 03 08 00 f1 03 08 00 00 00 00 00     ................
	...
   8002c:	f1 03 08 00 f1 03 08 00 00 00 00 00 f1 03 08 00     ................
   8003c:	f1 03 08 00 f1 03 08 00 f1 03 08 00 f1 03 08 00     ................
   8004c:	f1 03 08 00 f1 03 08 00 f1 03 08 00 f1 03 08 00     ................
   8005c:	f1 03 08 00 79 0a 08 00 f1 03 08 00 00 00 00 00     ....y...........
   8006c:	f1 03 08 00 f1 03 08 00 f1 03 08 00 f1 03 08 00     ................
	...
   80084:	f1 03 08 00 f1 03 08 00 f1 03 08 00 f1 03 08 00     ................
   80094:	f1 03 08 00 f1 03 08 00 f1 03 08 00 f1 03 08 00     ................
   800a4:	00 00 00 00 f1 03 08 00 f1 03 08 00 f1 03 08 00     ................
   800b4:	f1 03 08 00 f1 03 08 00 f1 03 08 00 f1 03 08 00     ................
   800c4:	f1 03 08 00 f1 03 08 00 f1 03 08 00 f1 03 08 00     ................
   800d4:	f1 03 08 00 f1 03 08 00 f1 03 08 00 f1 03 08 00     ................
   800e4:	f1 03 08 00 f1 03 08 00 fd 02 08 00 f1 03 08 00     ................

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	2000043c 	.word	0x2000043c
   80110:	00000000 	.word	0x00000000
   80114:	00080d10 	.word	0x00080d10

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	00080d10 	.word	0x00080d10
   80154:	20000440 	.word	0x20000440
   80158:	00080d10 	.word	0x00080d10
   8015c:	00000000 	.word	0x00000000

00080160 <adc_init>:


void adc_init(){
	
	
	PMC->PMC_PCER1 |= 1 << (ID_ADC - 32); //Allows power to PID 37, ADC
   80160:	4a07      	ldr	r2, [pc, #28]	; (80180 <adc_init+0x20>)
   80162:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
   80166:	f043 0320 	orr.w	r3, r3, #32
   8016a:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

	//PIOA->PIO_PDA |= PIO_PA4X1_AD2; // Disables normal I/O
	
	//ADC->ADC_WPMR |= ADC_WPMR_WPEN >> 1; //Disables write protect???
	
	ADC->ADC_MR = ADC_MR_FREERUN_ON | ADC_MR_SETTLING_AST9 | ADC_MR_TRACKTIM(3) | ADC_MR_TRANSFER(3);
   8016e:	4b05      	ldr	r3, [pc, #20]	; (80184 <adc_init+0x24>)
   80170:	4a05      	ldr	r2, [pc, #20]	; (80188 <adc_init+0x28>)
   80172:	605a      	str	r2, [r3, #4]
	// | ADC_MR_SETTLING_AST5 | ADC_MR_ANACH_NONE | ADC_MR_STARTUP_SUT8 | ADC_MR_TRACKTIM(1) | ADC_MR_TRANSFER(1) | ADC_MR_PRESCAL(1);
	
	ADC->ADC_CHER = ADC_CHER_CH2;
   80174:	2204      	movs	r2, #4
   80176:	611a      	str	r2, [r3, #16]

	ADC->ADC_CR = ADC_CR_START;
   80178:	2202      	movs	r2, #2
   8017a:	601a      	str	r2, [r3, #0]
   8017c:	4770      	bx	lr
   8017e:	bf00      	nop
   80180:	400e0600 	.word	0x400e0600
   80184:	400c0000 	.word	0x400c0000
   80188:	33200080 	.word	0x33200080

0008018c <adc_read>:
	
}

uint16_t adc_read(void){
	
	uint16_t value = ADC->ADC_CDR[2];
   8018c:	4b01      	ldr	r3, [pc, #4]	; (80194 <adc_read+0x8>)
   8018e:	6d98      	ldr	r0, [r3, #88]	; 0x58
//  	if(value < 1000){
//  	printf("%d \r \n", value);
//  	}	
	return value;

}
   80190:	b280      	uxth	r0, r0
   80192:	4770      	bx	lr
   80194:	400c0000 	.word	0x400c0000

00080198 <can_init>:
   80198:	b4f0      	push	{r4, r5, r6, r7}
   8019a:	1856      	adds	r6, r2, r1
   8019c:	2e08      	cmp	r6, #8
   8019e:	bfd4      	ite	le
   801a0:	2300      	movle	r3, #0
   801a2:	2301      	movgt	r3, #1
   801a4:	2908      	cmp	r1, #8
   801a6:	bf98      	it	ls
   801a8:	2a08      	cmpls	r2, #8
   801aa:	d858      	bhi.n	8025e <can_init+0xc6>
   801ac:	460c      	mov	r4, r1
   801ae:	2b00      	cmp	r3, #0
   801b0:	d155      	bne.n	8025e <can_init+0xc6>
   801b2:	4a2c      	ldr	r2, [pc, #176]	; (80264 <can_init+0xcc>)
   801b4:	6813      	ldr	r3, [r2, #0]
   801b6:	f023 0301 	bic.w	r3, r3, #1
   801ba:	6013      	str	r3, [r2, #0]
   801bc:	6913      	ldr	r3, [r2, #16]
   801be:	4b2a      	ldr	r3, [pc, #168]	; (80268 <can_init+0xd0>)
   801c0:	f44f 7540 	mov.w	r5, #768	; 0x300
   801c4:	645d      	str	r5, [r3, #68]	; 0x44
   801c6:	6f1d      	ldr	r5, [r3, #112]	; 0x70
   801c8:	f025 0503 	bic.w	r5, r5, #3
   801cc:	671d      	str	r5, [r3, #112]	; 0x70
   801ce:	2503      	movs	r5, #3
   801d0:	605d      	str	r5, [r3, #4]
   801d2:	665d      	str	r5, [r3, #100]	; 0x64
   801d4:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
   801d8:	4d24      	ldr	r5, [pc, #144]	; (8026c <can_init+0xd4>)
   801da:	f8c3 510c 	str.w	r5, [r3, #268]	; 0x10c
   801de:	f8d3 5100 	ldr.w	r5, [r3, #256]	; 0x100
   801e2:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
   801e6:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
   801ea:	6150      	str	r0, [r2, #20]
   801ec:	2000      	movs	r0, #0
   801ee:	e015      	b.n	8021c <can_init+0x84>
   801f0:	4b1c      	ldr	r3, [pc, #112]	; (80264 <can_init+0xcc>)
   801f2:	f101 0210 	add.w	r2, r1, #16
   801f6:	0152      	lsls	r2, r2, #5
   801f8:	189d      	adds	r5, r3, r2
   801fa:	4f1d      	ldr	r7, [pc, #116]	; (80270 <can_init+0xd8>)
   801fc:	606f      	str	r7, [r5, #4]
   801fe:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
   80202:	509d      	str	r5, [r3, r2]
   80204:	eb03 1341 	add.w	r3, r3, r1, lsl #5
   80208:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
   8020c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
   80210:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
   80214:	2301      	movs	r3, #1
   80216:	408b      	lsls	r3, r1
   80218:	4318      	orrs	r0, r3
   8021a:	3101      	adds	r1, #1
   8021c:	42b1      	cmp	r1, r6
   8021e:	dde7      	ble.n	801f0 <can_init+0x58>
   80220:	2300      	movs	r3, #0
   80222:	e00d      	b.n	80240 <can_init+0xa8>
   80224:	490f      	ldr	r1, [pc, #60]	; (80264 <can_init+0xcc>)
   80226:	eb01 1243 	add.w	r2, r1, r3, lsl #5
   8022a:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
   8022e:	f8c2 5208 	str.w	r5, [r2, #520]	; 0x208
   80232:	f103 0210 	add.w	r2, r3, #16
   80236:	0152      	lsls	r2, r2, #5
   80238:	f04f 7540 	mov.w	r5, #50331648	; 0x3000000
   8023c:	508d      	str	r5, [r1, r2]
   8023e:	3301      	adds	r3, #1
   80240:	42a3      	cmp	r3, r4
   80242:	dbef      	blt.n	80224 <can_init+0x8c>
   80244:	4b07      	ldr	r3, [pc, #28]	; (80264 <can_init+0xcc>)
   80246:	6058      	str	r0, [r3, #4]
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   80248:	f44f 6100 	mov.w	r1, #2048	; 0x800
   8024c:	4a09      	ldr	r2, [pc, #36]	; (80274 <can_init+0xdc>)
   8024e:	6051      	str	r1, [r2, #4]
   80250:	681a      	ldr	r2, [r3, #0]
   80252:	f042 0201 	orr.w	r2, r2, #1
   80256:	601a      	str	r2, [r3, #0]
   80258:	2000      	movs	r0, #0
   8025a:	bcf0      	pop	{r4, r5, r6, r7}
   8025c:	4770      	bx	lr
   8025e:	2001      	movs	r0, #1
   80260:	e7fb      	b.n	8025a <can_init+0xc2>
   80262:	bf00      	nop
   80264:	400b4000 	.word	0x400b4000
   80268:	400e0e00 	.word	0x400e0e00
   8026c:	1000102b 	.word	0x1000102b
   80270:	1f83ffff 	.word	0x1f83ffff
   80274:	e000e100 	.word	0xe000e100

00080278 <can_receive>:
   80278:	014b      	lsls	r3, r1, #5
   8027a:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   8027e:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   80282:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
   80286:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   8028a:	d033      	beq.n	802f4 <can_receive+0x7c>
   8028c:	b470      	push	{r4, r5, r6}
   8028e:	014b      	lsls	r3, r1, #5
   80290:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   80294:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   80298:	f8d3 4214 	ldr.w	r4, [r3, #532]	; 0x214
   8029c:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
   802a0:	f8d3 5208 	ldr.w	r5, [r3, #520]	; 0x208
   802a4:	f3c5 4587 	ubfx	r5, r5, #18, #8
   802a8:	7005      	strb	r5, [r0, #0]
   802aa:	f8d3 5210 	ldr.w	r5, [r3, #528]	; 0x210
   802ae:	f3c5 4503 	ubfx	r5, r5, #16, #4
   802b2:	7045      	strb	r5, [r0, #1]
   802b4:	2300      	movs	r3, #0
   802b6:	e003      	b.n	802c0 <can_receive+0x48>
   802b8:	18c6      	adds	r6, r0, r3
   802ba:	70b2      	strb	r2, [r6, #2]
   802bc:	0a12      	lsrs	r2, r2, #8
   802be:	3301      	adds	r3, #1
   802c0:	42ab      	cmp	r3, r5
   802c2:	da05      	bge.n	802d0 <can_receive+0x58>
   802c4:	2b03      	cmp	r3, #3
   802c6:	dcf7      	bgt.n	802b8 <can_receive+0x40>
   802c8:	18c6      	adds	r6, r0, r3
   802ca:	70b4      	strb	r4, [r6, #2]
   802cc:	0a24      	lsrs	r4, r4, #8
   802ce:	e7f6      	b.n	802be <can_receive+0x46>
   802d0:	4b09      	ldr	r3, [pc, #36]	; (802f8 <can_receive+0x80>)
   802d2:	f101 0210 	add.w	r2, r1, #16
   802d6:	0152      	lsls	r2, r2, #5
   802d8:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
   802dc:	5098      	str	r0, [r3, r2]
   802de:	eb03 1141 	add.w	r1, r3, r1, lsl #5
   802e2:	f8d1 321c 	ldr.w	r3, [r1, #540]	; 0x21c
   802e6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   802ea:	f8c1 321c 	str.w	r3, [r1, #540]	; 0x21c
   802ee:	2000      	movs	r0, #0
   802f0:	bc70      	pop	{r4, r5, r6}
   802f2:	4770      	bx	lr
   802f4:	2001      	movs	r0, #1
   802f6:	4770      	bx	lr
   802f8:	400b4000 	.word	0x400b4000

000802fc <CAN0_Handler>:
 * \param void
 *
 * \retval 
 */
void CAN0_Handler( void )
{
   802fc:	b530      	push	{r4, r5, lr}
   802fe:	b085      	sub	sp, #20
	//if(DEBUG_INTERRUPT)printf("CAN0 interrupt\n\r");
	char can_sr = CAN0->CAN_SR; 
   80300:	4b23      	ldr	r3, [pc, #140]	; (80390 <CAN0_Handler+0x94>)
   80302:	691d      	ldr	r5, [r3, #16]
	
	//RX interrupt
	if(can_sr & (CAN_SR_MB1 | CAN_SR_MB2) )//Only mailbox 1 and 2 specified for receiving
   80304:	f015 0f06 	tst.w	r5, #6
   80308:	d030      	beq.n	8036c <CAN0_Handler+0x70>
	{
		CAN_MESSAGE message;
		if(can_sr & CAN_SR_MB1)  //Mailbox 1 event
   8030a:	f015 0f02 	tst.w	r5, #2
   8030e:	d111      	bne.n	80334 <CAN0_Handler+0x38>
		{
			can_receive(&message, 1);

		}
		else if(can_sr & CAN_SR_MB2) //Mailbox 2 event
   80310:	f015 0f04 	tst.w	r5, #4
   80314:	d013      	beq.n	8033e <CAN0_Handler+0x42>
		
		{
			can_receive(&message, 2);
   80316:	2102      	movs	r1, #2
   80318:	a801      	add	r0, sp, #4
   8031a:	4b1e      	ldr	r3, [pc, #120]	; (80394 <CAN0_Handler+0x98>)
   8031c:	4798      	blx	r3
		else
		{
			printf("CAN0 message arrived in non-used mailbox\n\r");
		}

		if(DEBUG_INTERRUPT)printf("message id: %d\n\r", message.id);
   8031e:	f89d 1004 	ldrb.w	r1, [sp, #4]
   80322:	481d      	ldr	r0, [pc, #116]	; (80398 <CAN0_Handler+0x9c>)
   80324:	4c1d      	ldr	r4, [pc, #116]	; (8039c <CAN0_Handler+0xa0>)
   80326:	47a0      	blx	r4
		if(DEBUG_INTERRUPT)printf("message data length: %d\n\r", message.data_length);
   80328:	f89d 1005 	ldrb.w	r1, [sp, #5]
   8032c:	481c      	ldr	r0, [pc, #112]	; (803a0 <CAN0_Handler+0xa4>)
   8032e:	47a0      	blx	r4
		
	
		
		for (int i = 0; i < message.data_length; i++)
   80330:	2400      	movs	r4, #0
   80332:	e010      	b.n	80356 <CAN0_Handler+0x5a>
			can_receive(&message, 1);
   80334:	2101      	movs	r1, #1
   80336:	a801      	add	r0, sp, #4
   80338:	4b16      	ldr	r3, [pc, #88]	; (80394 <CAN0_Handler+0x98>)
   8033a:	4798      	blx	r3
   8033c:	e7ef      	b.n	8031e <CAN0_Handler+0x22>
			printf("CAN0 message arrived in non-used mailbox\n\r");
   8033e:	4819      	ldr	r0, [pc, #100]	; (803a4 <CAN0_Handler+0xa8>)
   80340:	4b16      	ldr	r3, [pc, #88]	; (8039c <CAN0_Handler+0xa0>)
   80342:	4798      	blx	r3
   80344:	e7eb      	b.n	8031e <CAN0_Handler+0x22>
		{
			if(DEBUG_INTERRUPT)printf("%d ", message.data[i]);
   80346:	ab04      	add	r3, sp, #16
   80348:	4423      	add	r3, r4
   8034a:	f813 1c0a 	ldrb.w	r1, [r3, #-10]
   8034e:	4816      	ldr	r0, [pc, #88]	; (803a8 <CAN0_Handler+0xac>)
   80350:	4b12      	ldr	r3, [pc, #72]	; (8039c <CAN0_Handler+0xa0>)
   80352:	4798      	blx	r3
		for (int i = 0; i < message.data_length; i++)
   80354:	3401      	adds	r4, #1
   80356:	f89d 3005 	ldrb.w	r3, [sp, #5]
   8035a:	429c      	cmp	r4, r3
   8035c:	dbf3      	blt.n	80346 <CAN0_Handler+0x4a>
		}
		if (message.id == 1){
   8035e:	f89d 3004 	ldrb.w	r3, [sp, #4]
   80362:	2b01      	cmp	r3, #1
   80364:	d00f      	beq.n	80386 <CAN0_Handler+0x8a>
			pwm_set_servo(message.data[0]);
		}
		//can_send(&message, 0); //REPLIES WITH THE SAME MESSAGE BACK
		if(DEBUG_INTERRUPT)printf("\n\r");
   80366:	4811      	ldr	r0, [pc, #68]	; (803ac <CAN0_Handler+0xb0>)
   80368:	4b0c      	ldr	r3, [pc, #48]	; (8039c <CAN0_Handler+0xa0>)
   8036a:	4798      	blx	r3
	}
	
	if(can_sr & CAN_SR_MB0)
   8036c:	f015 0f01 	tst.w	r5, #1
   80370:	d002      	beq.n	80378 <CAN0_Handler+0x7c>
	{
		//if(DEBUG_INTERRUPT) printf("CAN0 MB0 ready to send \n\r");
		
	//Disable interrupt
		CAN0->CAN_IDR = CAN_IER_MB0;
   80372:	2201      	movs	r2, #1
   80374:	4b06      	ldr	r3, [pc, #24]	; (80390 <CAN0_Handler+0x94>)
   80376:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   80378:	f44f 6200 	mov.w	r2, #2048	; 0x800
   8037c:	4b0c      	ldr	r3, [pc, #48]	; (803b0 <CAN0_Handler+0xb4>)
   8037e:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184

	}
	
	NVIC_ClearPendingIRQ(ID_CAN0);
	//sei();*/
}
   80382:	b005      	add	sp, #20
   80384:	bd30      	pop	{r4, r5, pc}
			pwm_set_servo(message.data[0]);
   80386:	f89d 0006 	ldrb.w	r0, [sp, #6]
   8038a:	4b0a      	ldr	r3, [pc, #40]	; (803b4 <CAN0_Handler+0xb8>)
   8038c:	4798      	blx	r3
   8038e:	e7ea      	b.n	80366 <CAN0_Handler+0x6a>
   80390:	400b4000 	.word	0x400b4000
   80394:	00080279 	.word	0x00080279
   80398:	00080c7c 	.word	0x00080c7c
   8039c:	000808d5 	.word	0x000808d5
   803a0:	00080c90 	.word	0x00080c90
   803a4:	00080c50 	.word	0x00080c50
   803a8:	00080cac 	.word	0x00080cac
   803ac:	00080c78 	.word	0x00080c78
   803b0:	e000e100 	.word	0xe000e100
   803b4:	0008099d 	.word	0x0008099d

000803b8 <dac_init>:
#include "uart.h"

void dac_init(void){
	
	
	PMC->PMC_PCER1 |= 1 << (ID_DACC - 32); //Allows power to PID38, DAC;
   803b8:	4a0b      	ldr	r2, [pc, #44]	; (803e8 <dac_init+0x30>)
   803ba:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
   803be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   803c2:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

	
	
   803c6:	f502 6220 	add.w	r2, r2, #2560	; 0xa00
   803ca:	6853      	ldr	r3, [r2, #4]
   803cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   803d0:	6053      	str	r3, [r2, #4]
	//DACC->DACC_MR |= 
	
	
   803d2:	4b06      	ldr	r3, [pc, #24]	; (803ec <dac_init+0x34>)
   803d4:	685a      	ldr	r2, [r3, #4]
   803d6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
   803da:	605a      	str	r2, [r3, #4]
   803dc:	691a      	ldr	r2, [r3, #16]
   803de:	f042 0202 	orr.w	r2, r2, #2
   803e2:	611a      	str	r2, [r3, #16]
   803e4:	4770      	bx	lr
   803e6:	bf00      	nop
   803e8:	400e0600 	.word	0x400e0600
   803ec:	400c8000 	.word	0x400c8000

000803f0 <Dummy_Handler>:
   803f0:	e7fe      	b.n	803f0 <Dummy_Handler>
	...

000803f4 <Reset_Handler>:
   803f4:	b508      	push	{r3, lr}
   803f6:	4b11      	ldr	r3, [pc, #68]	; (8043c <Reset_Handler+0x48>)
   803f8:	4a11      	ldr	r2, [pc, #68]	; (80440 <Reset_Handler+0x4c>)
   803fa:	429a      	cmp	r2, r3
   803fc:	d009      	beq.n	80412 <Reset_Handler+0x1e>
   803fe:	4b0f      	ldr	r3, [pc, #60]	; (8043c <Reset_Handler+0x48>)
   80400:	4a0f      	ldr	r2, [pc, #60]	; (80440 <Reset_Handler+0x4c>)
   80402:	e003      	b.n	8040c <Reset_Handler+0x18>
   80404:	6811      	ldr	r1, [r2, #0]
   80406:	6019      	str	r1, [r3, #0]
   80408:	3304      	adds	r3, #4
   8040a:	3204      	adds	r2, #4
   8040c:	490d      	ldr	r1, [pc, #52]	; (80444 <Reset_Handler+0x50>)
   8040e:	428b      	cmp	r3, r1
   80410:	d3f8      	bcc.n	80404 <Reset_Handler+0x10>
   80412:	4b0d      	ldr	r3, [pc, #52]	; (80448 <Reset_Handler+0x54>)
   80414:	e002      	b.n	8041c <Reset_Handler+0x28>
   80416:	2200      	movs	r2, #0
   80418:	601a      	str	r2, [r3, #0]
   8041a:	3304      	adds	r3, #4
   8041c:	4a0b      	ldr	r2, [pc, #44]	; (8044c <Reset_Handler+0x58>)
   8041e:	4293      	cmp	r3, r2
   80420:	d3f9      	bcc.n	80416 <Reset_Handler+0x22>
   80422:	4b0b      	ldr	r3, [pc, #44]	; (80450 <Reset_Handler+0x5c>)
   80424:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   80428:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   8042c:	4a09      	ldr	r2, [pc, #36]	; (80454 <Reset_Handler+0x60>)
   8042e:	6093      	str	r3, [r2, #8]
   80430:	4b09      	ldr	r3, [pc, #36]	; (80458 <Reset_Handler+0x64>)
   80432:	4798      	blx	r3
   80434:	4b09      	ldr	r3, [pc, #36]	; (8045c <Reset_Handler+0x68>)
   80436:	4798      	blx	r3
   80438:	e7fe      	b.n	80438 <Reset_Handler+0x44>
   8043a:	bf00      	nop
   8043c:	20000000 	.word	0x20000000
   80440:	00080d10 	.word	0x00080d10
   80444:	2000043c 	.word	0x2000043c
   80448:	2000043c 	.word	0x2000043c
   8044c:	200004d0 	.word	0x200004d0
   80450:	00080000 	.word	0x00080000
   80454:	e000ed00 	.word	0xe000ed00
   80458:	00080ae1 	.word	0x00080ae1
   8045c:	000805c1 	.word	0x000805c1

00080460 <SystemInit>:
   80460:	f44f 6380 	mov.w	r3, #1024	; 0x400
   80464:	4a20      	ldr	r2, [pc, #128]	; (804e8 <SystemInit+0x88>)
   80466:	6013      	str	r3, [r2, #0]
   80468:	f502 7200 	add.w	r2, r2, #512	; 0x200
   8046c:	6013      	str	r3, [r2, #0]
   8046e:	4b1f      	ldr	r3, [pc, #124]	; (804ec <SystemInit+0x8c>)
   80470:	6a1b      	ldr	r3, [r3, #32]
   80472:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80476:	d107      	bne.n	80488 <SystemInit+0x28>
   80478:	4a1d      	ldr	r2, [pc, #116]	; (804f0 <SystemInit+0x90>)
   8047a:	4b1c      	ldr	r3, [pc, #112]	; (804ec <SystemInit+0x8c>)
   8047c:	621a      	str	r2, [r3, #32]
   8047e:	4b1b      	ldr	r3, [pc, #108]	; (804ec <SystemInit+0x8c>)
   80480:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80482:	f013 0f01 	tst.w	r3, #1
   80486:	d0fa      	beq.n	8047e <SystemInit+0x1e>
   80488:	4a1a      	ldr	r2, [pc, #104]	; (804f4 <SystemInit+0x94>)
   8048a:	4b18      	ldr	r3, [pc, #96]	; (804ec <SystemInit+0x8c>)
   8048c:	621a      	str	r2, [r3, #32]
   8048e:	4b17      	ldr	r3, [pc, #92]	; (804ec <SystemInit+0x8c>)
   80490:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80492:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   80496:	d0fa      	beq.n	8048e <SystemInit+0x2e>
   80498:	4a14      	ldr	r2, [pc, #80]	; (804ec <SystemInit+0x8c>)
   8049a:	6b13      	ldr	r3, [r2, #48]	; 0x30
   8049c:	f023 0303 	bic.w	r3, r3, #3
   804a0:	f043 0301 	orr.w	r3, r3, #1
   804a4:	6313      	str	r3, [r2, #48]	; 0x30
   804a6:	4b11      	ldr	r3, [pc, #68]	; (804ec <SystemInit+0x8c>)
   804a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   804aa:	f013 0f08 	tst.w	r3, #8
   804ae:	d0fa      	beq.n	804a6 <SystemInit+0x46>
   804b0:	4a11      	ldr	r2, [pc, #68]	; (804f8 <SystemInit+0x98>)
   804b2:	4b0e      	ldr	r3, [pc, #56]	; (804ec <SystemInit+0x8c>)
   804b4:	629a      	str	r2, [r3, #40]	; 0x28
   804b6:	4b0d      	ldr	r3, [pc, #52]	; (804ec <SystemInit+0x8c>)
   804b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   804ba:	f013 0f02 	tst.w	r3, #2
   804be:	d0fa      	beq.n	804b6 <SystemInit+0x56>
   804c0:	2211      	movs	r2, #17
   804c2:	4b0a      	ldr	r3, [pc, #40]	; (804ec <SystemInit+0x8c>)
   804c4:	631a      	str	r2, [r3, #48]	; 0x30
   804c6:	4b09      	ldr	r3, [pc, #36]	; (804ec <SystemInit+0x8c>)
   804c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   804ca:	f013 0f08 	tst.w	r3, #8
   804ce:	d0fa      	beq.n	804c6 <SystemInit+0x66>
   804d0:	2212      	movs	r2, #18
   804d2:	4b06      	ldr	r3, [pc, #24]	; (804ec <SystemInit+0x8c>)
   804d4:	631a      	str	r2, [r3, #48]	; 0x30
   804d6:	4b05      	ldr	r3, [pc, #20]	; (804ec <SystemInit+0x8c>)
   804d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   804da:	f013 0f08 	tst.w	r3, #8
   804de:	d0fa      	beq.n	804d6 <SystemInit+0x76>
   804e0:	4a06      	ldr	r2, [pc, #24]	; (804fc <SystemInit+0x9c>)
   804e2:	4b07      	ldr	r3, [pc, #28]	; (80500 <SystemInit+0xa0>)
   804e4:	601a      	str	r2, [r3, #0]
   804e6:	4770      	bx	lr
   804e8:	400e0a00 	.word	0x400e0a00
   804ec:	400e0600 	.word	0x400e0600
   804f0:	00370809 	.word	0x00370809
   804f4:	01370809 	.word	0x01370809
   804f8:	200d3f01 	.word	0x200d3f01
   804fc:	0501bd00 	.word	0x0501bd00
   80500:	20000000 	.word	0x20000000

00080504 <game_init>:

int time_over_threshold;

void game_init(){
	
	IR_flag = 0;
   80504:	2300      	movs	r3, #0
   80506:	4a04      	ldr	r2, [pc, #16]	; (80518 <game_init+0x14>)
   80508:	7013      	strb	r3, [r2, #0]
	previous_time = 0;
   8050a:	4a04      	ldr	r2, [pc, #16]	; (8051c <game_init+0x18>)
   8050c:	6013      	str	r3, [r2, #0]
	score = 0;
   8050e:	4a04      	ldr	r2, [pc, #16]	; (80520 <game_init+0x1c>)
   80510:	6013      	str	r3, [r2, #0]
	time_over_threshold = 0;
   80512:	4a04      	ldr	r2, [pc, #16]	; (80524 <game_init+0x20>)
   80514:	6013      	str	r3, [r2, #0]
   80516:	4770      	bx	lr
   80518:	20000458 	.word	0x20000458
   8051c:	20000460 	.word	0x20000460
   80520:	2000045c 	.word	0x2000045c
   80524:	20000464 	.word	0x20000464

00080528 <game_check_loss>:
	
	//TC0->TC_CHANNEL->TC_CCR |= TC_CCR_SWTRG; //RESETS TIMER
}


void game_check_loss(){
   80528:	b538      	push	{r3, r4, r5, lr}
	
	int value = adc_read();
   8052a:	4b1b      	ldr	r3, [pc, #108]	; (80598 <game_check_loss+0x70>)
   8052c:	4798      	blx	r3
	
	if (value < IR_threshold){
   8052e:	4b1b      	ldr	r3, [pc, #108]	; (8059c <game_check_loss+0x74>)
   80530:	681b      	ldr	r3, [r3, #0]
   80532:	4298      	cmp	r0, r3
   80534:	da2a      	bge.n	8058c <game_check_loss+0x64>
		
		if ((timer_read() - time_over_threshold) >  noise_delay){
   80536:	4b1a      	ldr	r3, [pc, #104]	; (805a0 <game_check_loss+0x78>)
   80538:	4798      	blx	r3
   8053a:	4b1a      	ldr	r3, [pc, #104]	; (805a4 <game_check_loss+0x7c>)
   8053c:	681b      	ldr	r3, [r3, #0]
   8053e:	1ac0      	subs	r0, r0, r3
   80540:	4b16      	ldr	r3, [pc, #88]	; (8059c <game_check_loss+0x74>)
   80542:	685b      	ldr	r3, [r3, #4]
   80544:	4298      	cmp	r0, r3
   80546:	dd25      	ble.n	80594 <game_check_loss+0x6c>
			
			if ((timer_read() - previous_time) > bounce_delay){
   80548:	4b15      	ldr	r3, [pc, #84]	; (805a0 <game_check_loss+0x78>)
   8054a:	4798      	blx	r3
   8054c:	4b16      	ldr	r3, [pc, #88]	; (805a8 <game_check_loss+0x80>)
   8054e:	681b      	ldr	r3, [r3, #0]
   80550:	1ac0      	subs	r0, r0, r3
   80552:	4b12      	ldr	r3, [pc, #72]	; (8059c <game_check_loss+0x74>)
   80554:	689b      	ldr	r3, [r3, #8]
   80556:	4298      	cmp	r0, r3
   80558:	dd02      	ble.n	80560 <game_check_loss+0x38>
				IR_flag = 0;
   8055a:	2200      	movs	r2, #0
   8055c:	4b13      	ldr	r3, [pc, #76]	; (805ac <game_check_loss+0x84>)
   8055e:	701a      	strb	r2, [r3, #0]
			}
			if (IR_flag == 0){
   80560:	4b12      	ldr	r3, [pc, #72]	; (805ac <game_check_loss+0x84>)
   80562:	781b      	ldrb	r3, [r3, #0]
   80564:	b123      	cbz	r3, 80570 <game_check_loss+0x48>
				IR_flag = 1;
				score++;
				printf("Score: ");
				printf("%d \r \n", score);
			}
			previous_time = timer_read();
   80566:	4b0e      	ldr	r3, [pc, #56]	; (805a0 <game_check_loss+0x78>)
   80568:	4798      	blx	r3
   8056a:	4b0f      	ldr	r3, [pc, #60]	; (805a8 <game_check_loss+0x80>)
   8056c:	6018      	str	r0, [r3, #0]
   8056e:	bd38      	pop	{r3, r4, r5, pc}
				IR_flag = 1;
   80570:	2201      	movs	r2, #1
   80572:	4b0e      	ldr	r3, [pc, #56]	; (805ac <game_check_loss+0x84>)
   80574:	701a      	strb	r2, [r3, #0]
				score++;
   80576:	4c0e      	ldr	r4, [pc, #56]	; (805b0 <game_check_loss+0x88>)
   80578:	6823      	ldr	r3, [r4, #0]
   8057a:	4413      	add	r3, r2
   8057c:	6023      	str	r3, [r4, #0]
				printf("Score: ");
   8057e:	480d      	ldr	r0, [pc, #52]	; (805b4 <game_check_loss+0x8c>)
   80580:	4d0d      	ldr	r5, [pc, #52]	; (805b8 <game_check_loss+0x90>)
   80582:	47a8      	blx	r5
				printf("%d \r \n", score);
   80584:	6821      	ldr	r1, [r4, #0]
   80586:	480d      	ldr	r0, [pc, #52]	; (805bc <game_check_loss+0x94>)
   80588:	47a8      	blx	r5
   8058a:	e7ec      	b.n	80566 <game_check_loss+0x3e>
			
		}
		
	}
	else{
		time_over_threshold = timer_read();
   8058c:	4b04      	ldr	r3, [pc, #16]	; (805a0 <game_check_loss+0x78>)
   8058e:	4798      	blx	r3
   80590:	4b04      	ldr	r3, [pc, #16]	; (805a4 <game_check_loss+0x7c>)
   80592:	6018      	str	r0, [r3, #0]
   80594:	bd38      	pop	{r3, r4, r5, pc}
   80596:	bf00      	nop
   80598:	0008018d 	.word	0x0008018d
   8059c:	20000004 	.word	0x20000004
   805a0:	000809e1 	.word	0x000809e1
   805a4:	20000464 	.word	0x20000464
   805a8:	20000460 	.word	0x20000460
   805ac:	20000458 	.word	0x20000458
   805b0:	2000045c 	.word	0x2000045c
   805b4:	00080cb0 	.word	0x00080cb0
   805b8:	000808d5 	.word	0x000808d5
   805bc:	00080cb8 	.word	0x00080cb8

000805c0 <main>:




int main(void)
{
   805c0:	b508      	push	{r3, lr}
    /* Initialize the SAM system */
    SystemInit();
   805c2:	4b13      	ldr	r3, [pc, #76]	; (80610 <main+0x50>)
   805c4:	4798      	blx	r3
	
	
	
	
	configure_uart(); //STARTS THE UART
   805c6:	4b13      	ldr	r3, [pc, #76]	; (80614 <main+0x54>)
   805c8:	4798      	blx	r3
	
	can_init(0x1292177,1,2);
   805ca:	2202      	movs	r2, #2
   805cc:	2101      	movs	r1, #1
   805ce:	4812      	ldr	r0, [pc, #72]	; (80618 <main+0x58>)
   805d0:	4b12      	ldr	r3, [pc, #72]	; (8061c <main+0x5c>)
   805d2:	4798      	blx	r3
	
	pwm_init();
   805d4:	4b12      	ldr	r3, [pc, #72]	; (80620 <main+0x60>)
   805d6:	4798      	blx	r3
	
	adc_init();
   805d8:	4b12      	ldr	r3, [pc, #72]	; (80624 <main+0x64>)
   805da:	4798      	blx	r3
	
	timer_init();
   805dc:	4b12      	ldr	r3, [pc, #72]	; (80628 <main+0x68>)
   805de:	4798      	blx	r3
		
	game_init();
   805e0:	4b12      	ldr	r3, [pc, #72]	; (8062c <main+0x6c>)
   805e2:	4798      	blx	r3
	
	dac_init();
   805e4:	4b12      	ldr	r3, [pc, #72]	; (80630 <main+0x70>)
   805e6:	4798      	blx	r3
	
	
	WDT->WDT_MR = WDT_MR_WDDIS; //DISABLES THE WATCHDOG
   805e8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   805ec:	4b11      	ldr	r3, [pc, #68]	; (80634 <main+0x74>)
   805ee:	605a      	str	r2, [r3, #4]
	
	PIOA->PIO_PER = PIO_PA19 | PIO_PA20; // PIN I/O SELECT
   805f0:	f5a3 6345 	sub.w	r3, r3, #3152	; 0xc50
   805f4:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
   805f8:	601a      	str	r2, [r3, #0]
	PIOA->PIO_OER = PIO_PA19 | PIO_PA20; // PIN OUTPUT SELECT
   805fa:	611a      	str	r2, [r3, #16]
	
	PIOA->PIO_SODR = PIO_PA19; //PIN SET OUTPUT DATA REGISTER
   805fc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   80600:	631a      	str	r2, [r3, #48]	; 0x30
	int i = 1;
	
	while (1) 
    {
		//adc_read();
		CAN0_Handler();
   80602:	4b0d      	ldr	r3, [pc, #52]	; (80638 <main+0x78>)
   80604:	4798      	blx	r3
		timer_read();
   80606:	4b0d      	ldr	r3, [pc, #52]	; (8063c <main+0x7c>)
   80608:	4798      	blx	r3
		game_check_loss();
   8060a:	4b0d      	ldr	r3, [pc, #52]	; (80640 <main+0x80>)
   8060c:	4798      	blx	r3
   8060e:	e7f8      	b.n	80602 <main+0x42>
   80610:	00080461 	.word	0x00080461
   80614:	000809ed 	.word	0x000809ed
   80618:	01292177 	.word	0x01292177
   8061c:	00080199 	.word	0x00080199
   80620:	000808f9 	.word	0x000808f9
   80624:	00080161 	.word	0x00080161
   80628:	000809b1 	.word	0x000809b1
   8062c:	00080505 	.word	0x00080505
   80630:	000803b9 	.word	0x000803b9
   80634:	400e1a50 	.word	0x400e1a50
   80638:	000802fd 	.word	0x000802fd
   8063c:	000809e1 	.word	0x000809e1
   80640:	00080529 	.word	0x00080529

00080644 <printchar>:
   80644:	b508      	push	{r3, lr}
   80646:	b2c8      	uxtb	r0, r1
   80648:	4b01      	ldr	r3, [pc, #4]	; (80650 <printchar+0xc>)
   8064a:	4798      	blx	r3
   8064c:	bd08      	pop	{r3, pc}
   8064e:	bf00      	nop
   80650:	00080a55 	.word	0x00080a55

00080654 <prints>:
   80654:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80658:	4607      	mov	r7, r0
   8065a:	460e      	mov	r6, r1
   8065c:	1e15      	subs	r5, r2, #0
   8065e:	dd02      	ble.n	80666 <prints+0x12>
   80660:	460a      	mov	r2, r1
   80662:	2100      	movs	r1, #0
   80664:	e004      	b.n	80670 <prints+0x1c>
   80666:	f04f 0820 	mov.w	r8, #32
   8066a:	e00e      	b.n	8068a <prints+0x36>
   8066c:	3101      	adds	r1, #1
   8066e:	3201      	adds	r2, #1
   80670:	7810      	ldrb	r0, [r2, #0]
   80672:	2800      	cmp	r0, #0
   80674:	d1fa      	bne.n	8066c <prints+0x18>
   80676:	42a9      	cmp	r1, r5
   80678:	da01      	bge.n	8067e <prints+0x2a>
   8067a:	1a6d      	subs	r5, r5, r1
   8067c:	e000      	b.n	80680 <prints+0x2c>
   8067e:	2500      	movs	r5, #0
   80680:	f013 0f02 	tst.w	r3, #2
   80684:	d106      	bne.n	80694 <prints+0x40>
   80686:	f04f 0820 	mov.w	r8, #32
   8068a:	f013 0401 	ands.w	r4, r3, #1
   8068e:	d00a      	beq.n	806a6 <prints+0x52>
   80690:	2400      	movs	r4, #0
   80692:	e010      	b.n	806b6 <prints+0x62>
   80694:	f04f 0830 	mov.w	r8, #48	; 0x30
   80698:	e7f7      	b.n	8068a <prints+0x36>
   8069a:	4641      	mov	r1, r8
   8069c:	4638      	mov	r0, r7
   8069e:	4b0d      	ldr	r3, [pc, #52]	; (806d4 <prints+0x80>)
   806a0:	4798      	blx	r3
   806a2:	3401      	adds	r4, #1
   806a4:	3d01      	subs	r5, #1
   806a6:	2d00      	cmp	r5, #0
   806a8:	dcf7      	bgt.n	8069a <prints+0x46>
   806aa:	e004      	b.n	806b6 <prints+0x62>
   806ac:	4638      	mov	r0, r7
   806ae:	4b09      	ldr	r3, [pc, #36]	; (806d4 <prints+0x80>)
   806b0:	4798      	blx	r3
   806b2:	3401      	adds	r4, #1
   806b4:	3601      	adds	r6, #1
   806b6:	7831      	ldrb	r1, [r6, #0]
   806b8:	2900      	cmp	r1, #0
   806ba:	d1f7      	bne.n	806ac <prints+0x58>
   806bc:	e005      	b.n	806ca <prints+0x76>
   806be:	4641      	mov	r1, r8
   806c0:	4638      	mov	r0, r7
   806c2:	4b04      	ldr	r3, [pc, #16]	; (806d4 <prints+0x80>)
   806c4:	4798      	blx	r3
   806c6:	3401      	adds	r4, #1
   806c8:	3d01      	subs	r5, #1
   806ca:	2d00      	cmp	r5, #0
   806cc:	dcf7      	bgt.n	806be <prints+0x6a>
   806ce:	4620      	mov	r0, r4
   806d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   806d4:	00080645 	.word	0x00080645

000806d8 <printi>:
   806d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   806da:	b085      	sub	sp, #20
   806dc:	4607      	mov	r7, r0
   806de:	980c      	ldr	r0, [sp, #48]	; 0x30
   806e0:	b151      	cbz	r1, 806f8 <printi+0x20>
   806e2:	461e      	mov	r6, r3
   806e4:	460c      	mov	r4, r1
   806e6:	b113      	cbz	r3, 806ee <printi+0x16>
   806e8:	2a0a      	cmp	r2, #10
   806ea:	d012      	beq.n	80712 <printi+0x3a>
   806ec:	2600      	movs	r6, #0
   806ee:	ad04      	add	r5, sp, #16
   806f0:	2300      	movs	r3, #0
   806f2:	f805 3d01 	strb.w	r3, [r5, #-1]!
   806f6:	e018      	b.n	8072a <printi+0x52>
   806f8:	2330      	movs	r3, #48	; 0x30
   806fa:	f88d 3004 	strb.w	r3, [sp, #4]
   806fe:	2300      	movs	r3, #0
   80700:	f88d 3005 	strb.w	r3, [sp, #5]
   80704:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   80706:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   80708:	a901      	add	r1, sp, #4
   8070a:	4638      	mov	r0, r7
   8070c:	4c1b      	ldr	r4, [pc, #108]	; (8077c <printi+0xa4>)
   8070e:	47a0      	blx	r4
   80710:	e029      	b.n	80766 <printi+0x8e>
   80712:	2900      	cmp	r1, #0
   80714:	db01      	blt.n	8071a <printi+0x42>
   80716:	2600      	movs	r6, #0
   80718:	e7e9      	b.n	806ee <printi+0x16>
   8071a:	424c      	negs	r4, r1
   8071c:	2601      	movs	r6, #1
   8071e:	e7e6      	b.n	806ee <printi+0x16>
   80720:	3330      	adds	r3, #48	; 0x30
   80722:	f805 3d01 	strb.w	r3, [r5, #-1]!
   80726:	fbb4 f4f2 	udiv	r4, r4, r2
   8072a:	b14c      	cbz	r4, 80740 <printi+0x68>
   8072c:	fbb4 f3f2 	udiv	r3, r4, r2
   80730:	fb02 4313 	mls	r3, r2, r3, r4
   80734:	2b09      	cmp	r3, #9
   80736:	ddf3      	ble.n	80720 <printi+0x48>
   80738:	f1a0 013a 	sub.w	r1, r0, #58	; 0x3a
   8073c:	440b      	add	r3, r1
   8073e:	e7ef      	b.n	80720 <printi+0x48>
   80740:	b156      	cbz	r6, 80758 <printi+0x80>
   80742:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   80744:	b11b      	cbz	r3, 8074e <printi+0x76>
   80746:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   80748:	f013 0f02 	tst.w	r3, #2
   8074c:	d10d      	bne.n	8076a <printi+0x92>
   8074e:	232d      	movs	r3, #45	; 0x2d
   80750:	f805 3c01 	strb.w	r3, [r5, #-1]
   80754:	3d01      	subs	r5, #1
   80756:	2600      	movs	r6, #0
   80758:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8075a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   8075c:	4629      	mov	r1, r5
   8075e:	4638      	mov	r0, r7
   80760:	4c06      	ldr	r4, [pc, #24]	; (8077c <printi+0xa4>)
   80762:	47a0      	blx	r4
   80764:	4430      	add	r0, r6
   80766:	b005      	add	sp, #20
   80768:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8076a:	212d      	movs	r1, #45	; 0x2d
   8076c:	4638      	mov	r0, r7
   8076e:	4b04      	ldr	r3, [pc, #16]	; (80780 <printi+0xa8>)
   80770:	4798      	blx	r3
   80772:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   80774:	3b01      	subs	r3, #1
   80776:	930a      	str	r3, [sp, #40]	; 0x28
   80778:	e7ee      	b.n	80758 <printi+0x80>
   8077a:	bf00      	nop
   8077c:	00080655 	.word	0x00080655
   80780:	00080645 	.word	0x00080645

00080784 <print>:
   80784:	b5f0      	push	{r4, r5, r6, r7, lr}
   80786:	b089      	sub	sp, #36	; 0x24
   80788:	4606      	mov	r6, r0
   8078a:	460c      	mov	r4, r1
   8078c:	9205      	str	r2, [sp, #20]
   8078e:	2500      	movs	r5, #0
   80790:	e081      	b.n	80896 <print+0x112>
   80792:	1ca2      	adds	r2, r4, #2
   80794:	2301      	movs	r3, #1
   80796:	e08b      	b.n	808b0 <print+0x12c>
   80798:	3401      	adds	r4, #1
   8079a:	f043 0302 	orr.w	r3, r3, #2
   8079e:	7822      	ldrb	r2, [r4, #0]
   807a0:	2a30      	cmp	r2, #48	; 0x30
   807a2:	d0f9      	beq.n	80798 <print+0x14>
   807a4:	2200      	movs	r2, #0
   807a6:	e006      	b.n	807b6 <print+0x32>
   807a8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   807ac:	0050      	lsls	r0, r2, #1
   807ae:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   807b2:	4402      	add	r2, r0
   807b4:	3401      	adds	r4, #1
   807b6:	7821      	ldrb	r1, [r4, #0]
   807b8:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
   807bc:	b2c0      	uxtb	r0, r0
   807be:	2809      	cmp	r0, #9
   807c0:	d9f2      	bls.n	807a8 <print+0x24>
   807c2:	2973      	cmp	r1, #115	; 0x73
   807c4:	d018      	beq.n	807f8 <print+0x74>
   807c6:	2964      	cmp	r1, #100	; 0x64
   807c8:	d022      	beq.n	80810 <print+0x8c>
   807ca:	2978      	cmp	r1, #120	; 0x78
   807cc:	d02f      	beq.n	8082e <print+0xaa>
   807ce:	2958      	cmp	r1, #88	; 0x58
   807d0:	d03c      	beq.n	8084c <print+0xc8>
   807d2:	2975      	cmp	r1, #117	; 0x75
   807d4:	d049      	beq.n	8086a <print+0xe6>
   807d6:	2963      	cmp	r1, #99	; 0x63
   807d8:	d15c      	bne.n	80894 <print+0x110>
   807da:	9905      	ldr	r1, [sp, #20]
   807dc:	1d08      	adds	r0, r1, #4
   807de:	9005      	str	r0, [sp, #20]
   807e0:	7809      	ldrb	r1, [r1, #0]
   807e2:	f88d 101c 	strb.w	r1, [sp, #28]
   807e6:	2100      	movs	r1, #0
   807e8:	f88d 101d 	strb.w	r1, [sp, #29]
   807ec:	a907      	add	r1, sp, #28
   807ee:	4630      	mov	r0, r6
   807f0:	4f34      	ldr	r7, [pc, #208]	; (808c4 <print+0x140>)
   807f2:	47b8      	blx	r7
   807f4:	4405      	add	r5, r0
   807f6:	e04d      	b.n	80894 <print+0x110>
   807f8:	9905      	ldr	r1, [sp, #20]
   807fa:	1d08      	adds	r0, r1, #4
   807fc:	9005      	str	r0, [sp, #20]
   807fe:	6809      	ldr	r1, [r1, #0]
   80800:	b121      	cbz	r1, 8080c <print+0x88>
   80802:	4630      	mov	r0, r6
   80804:	4f2f      	ldr	r7, [pc, #188]	; (808c4 <print+0x140>)
   80806:	47b8      	blx	r7
   80808:	4405      	add	r5, r0
   8080a:	e043      	b.n	80894 <print+0x110>
   8080c:	492e      	ldr	r1, [pc, #184]	; (808c8 <print+0x144>)
   8080e:	e7f8      	b.n	80802 <print+0x7e>
   80810:	9905      	ldr	r1, [sp, #20]
   80812:	1d08      	adds	r0, r1, #4
   80814:	9005      	str	r0, [sp, #20]
   80816:	6809      	ldr	r1, [r1, #0]
   80818:	2061      	movs	r0, #97	; 0x61
   8081a:	9002      	str	r0, [sp, #8]
   8081c:	9301      	str	r3, [sp, #4]
   8081e:	9200      	str	r2, [sp, #0]
   80820:	2301      	movs	r3, #1
   80822:	220a      	movs	r2, #10
   80824:	4630      	mov	r0, r6
   80826:	4f29      	ldr	r7, [pc, #164]	; (808cc <print+0x148>)
   80828:	47b8      	blx	r7
   8082a:	4405      	add	r5, r0
   8082c:	e032      	b.n	80894 <print+0x110>
   8082e:	9905      	ldr	r1, [sp, #20]
   80830:	1d08      	adds	r0, r1, #4
   80832:	9005      	str	r0, [sp, #20]
   80834:	6809      	ldr	r1, [r1, #0]
   80836:	2061      	movs	r0, #97	; 0x61
   80838:	9002      	str	r0, [sp, #8]
   8083a:	9301      	str	r3, [sp, #4]
   8083c:	9200      	str	r2, [sp, #0]
   8083e:	2300      	movs	r3, #0
   80840:	2210      	movs	r2, #16
   80842:	4630      	mov	r0, r6
   80844:	4f21      	ldr	r7, [pc, #132]	; (808cc <print+0x148>)
   80846:	47b8      	blx	r7
   80848:	4405      	add	r5, r0
   8084a:	e023      	b.n	80894 <print+0x110>
   8084c:	9905      	ldr	r1, [sp, #20]
   8084e:	1d08      	adds	r0, r1, #4
   80850:	9005      	str	r0, [sp, #20]
   80852:	6809      	ldr	r1, [r1, #0]
   80854:	2041      	movs	r0, #65	; 0x41
   80856:	9002      	str	r0, [sp, #8]
   80858:	9301      	str	r3, [sp, #4]
   8085a:	9200      	str	r2, [sp, #0]
   8085c:	2300      	movs	r3, #0
   8085e:	2210      	movs	r2, #16
   80860:	4630      	mov	r0, r6
   80862:	4f1a      	ldr	r7, [pc, #104]	; (808cc <print+0x148>)
   80864:	47b8      	blx	r7
   80866:	4405      	add	r5, r0
   80868:	e014      	b.n	80894 <print+0x110>
   8086a:	9905      	ldr	r1, [sp, #20]
   8086c:	1d08      	adds	r0, r1, #4
   8086e:	9005      	str	r0, [sp, #20]
   80870:	6809      	ldr	r1, [r1, #0]
   80872:	2061      	movs	r0, #97	; 0x61
   80874:	9002      	str	r0, [sp, #8]
   80876:	9301      	str	r3, [sp, #4]
   80878:	9200      	str	r2, [sp, #0]
   8087a:	2300      	movs	r3, #0
   8087c:	220a      	movs	r2, #10
   8087e:	4630      	mov	r0, r6
   80880:	4f12      	ldr	r7, [pc, #72]	; (808cc <print+0x148>)
   80882:	47b8      	blx	r7
   80884:	4405      	add	r5, r0
   80886:	e005      	b.n	80894 <print+0x110>
   80888:	4614      	mov	r4, r2
   8088a:	7821      	ldrb	r1, [r4, #0]
   8088c:	4630      	mov	r0, r6
   8088e:	4b10      	ldr	r3, [pc, #64]	; (808d0 <print+0x14c>)
   80890:	4798      	blx	r3
   80892:	3501      	adds	r5, #1
   80894:	3401      	adds	r4, #1
   80896:	7823      	ldrb	r3, [r4, #0]
   80898:	b163      	cbz	r3, 808b4 <print+0x130>
   8089a:	2b25      	cmp	r3, #37	; 0x25
   8089c:	d1f5      	bne.n	8088a <print+0x106>
   8089e:	1c62      	adds	r2, r4, #1
   808a0:	7863      	ldrb	r3, [r4, #1]
   808a2:	b13b      	cbz	r3, 808b4 <print+0x130>
   808a4:	2b25      	cmp	r3, #37	; 0x25
   808a6:	d0ef      	beq.n	80888 <print+0x104>
   808a8:	2b2d      	cmp	r3, #45	; 0x2d
   808aa:	f43f af72 	beq.w	80792 <print+0xe>
   808ae:	2300      	movs	r3, #0
   808b0:	4614      	mov	r4, r2
   808b2:	e774      	b.n	8079e <print+0x1a>
   808b4:	b116      	cbz	r6, 808bc <print+0x138>
   808b6:	6833      	ldr	r3, [r6, #0]
   808b8:	2200      	movs	r2, #0
   808ba:	701a      	strb	r2, [r3, #0]
   808bc:	4628      	mov	r0, r5
   808be:	b009      	add	sp, #36	; 0x24
   808c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   808c2:	bf00      	nop
   808c4:	00080655 	.word	0x00080655
   808c8:	00080cc0 	.word	0x00080cc0
   808cc:	000806d9 	.word	0x000806d9
   808d0:	00080645 	.word	0x00080645

000808d4 <printf>:
   808d4:	b40f      	push	{r0, r1, r2, r3}
   808d6:	b500      	push	{lr}
   808d8:	b083      	sub	sp, #12
   808da:	aa04      	add	r2, sp, #16
   808dc:	f852 1b04 	ldr.w	r1, [r2], #4
   808e0:	9201      	str	r2, [sp, #4]
   808e2:	2000      	movs	r0, #0
   808e4:	4b03      	ldr	r3, [pc, #12]	; (808f4 <printf+0x20>)
   808e6:	4798      	blx	r3
   808e8:	b003      	add	sp, #12
   808ea:	f85d eb04 	ldr.w	lr, [sp], #4
   808ee:	b004      	add	sp, #16
   808f0:	4770      	bx	lr
   808f2:	bf00      	nop
   808f4:	00080785 	.word	0x00080785

000808f8 <pwm_init>:


void pwm_init(void) {
	
	
	PMC->PMC_PCER1 |= 1 << (ID_PWM - 32); //Allows power to PID36, PWM;
   808f8:	4a18      	ldr	r2, [pc, #96]	; (8095c <pwm_init+0x64>)
   808fa:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
   808fe:	f043 0310 	orr.w	r3, r3, #16
   80902:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

	PIOC->PIO_PDR |= PIO_PC18B_PWMH6 | PIO_PC19B_PWMH5; //Disables the PIO, so that peripheral can use it. Not sure if this is the correct implementation
   80906:	4b16      	ldr	r3, [pc, #88]	; (80960 <pwm_init+0x68>)
   80908:	685a      	ldr	r2, [r3, #4]
   8090a:	f442 2240 	orr.w	r2, r2, #786432	; 0xc0000
   8090e:	605a      	str	r2, [r3, #4]
	PIOC->PIO_ABSR |= PIO_PC18B_PWMH6 | PIO_PC19B_PWMH5; //Selects peripheral 2.
   80910:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   80912:	f442 2240 	orr.w	r2, r2, #786432	; 0xc0000
   80916:	671a      	str	r2, [r3, #112]	; 0x70
	
	PWM->PWM_WPCR |= 0xFC; // SELECTS GROUP 0-6; WPRGx
   80918:	4b12      	ldr	r3, [pc, #72]	; (80964 <pwm_init+0x6c>)
   8091a:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
   8091e:	f042 02fc 	orr.w	r2, r2, #252	; 0xfc
   80922:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PWM->PWM_WPCR |= PWM_WPCR_WPCMD(0); //Unlock user interface
   80926:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
   8092a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	
	PWM->PWM_CLK = PWM_CLK_DIVA(1) | PWM_CLK_DIVB(1) | PWM_CLK_PREA(7) | PWM_CLK_PREB(7); //TODO: check if this is correct, MCK/128
   8092e:	4a0e      	ldr	r2, [pc, #56]	; (80968 <pwm_init+0x70>)
   80930:	601a      	str	r2, [r3, #0]
	
	PWM->PWM_DIS = PWM_DIS_CHID5 | PWM_DIS_CHID6;
   80932:	2160      	movs	r1, #96	; 0x60
   80934:	6099      	str	r1, [r3, #8]
	
	REG_PWM_CMR5 = PWM_CMR_CPRE_CLKA; //CLOCK A, LEFT ALIGNED
   80936:	200b      	movs	r0, #11
   80938:	4a0c      	ldr	r2, [pc, #48]	; (8096c <pwm_init+0x74>)
   8093a:	6010      	str	r0, [r2, #0]
	REG_PWM_CMR6 = PWM_CMR_CPRE_CLKB; //CLOCK B, LEFT ALIGNED
   8093c:	200c      	movs	r0, #12
   8093e:	3220      	adds	r2, #32
   80940:	6010      	str	r0, [r2, #0]
	
	REG_PWM_CPRD5 = 0x3345; //SETS THE PERIOD TO 20MS, 58MHZ*20ms = X * CPRD
   80942:	f243 3245 	movw	r2, #13125	; 0x3345
   80946:	480a      	ldr	r0, [pc, #40]	; (80970 <pwm_init+0x78>)
   80948:	6002      	str	r2, [r0, #0]
	REG_PWM_CPRD6 = 0x3345;
   8094a:	3020      	adds	r0, #32
   8094c:	6002      	str	r2, [r0, #0]
	
	REG_PWM_CDTY5 = 0x3345; // 
   8094e:	3828      	subs	r0, #40	; 0x28
   80950:	6002      	str	r2, [r0, #0]
	REG_PWM_CDTY6 = 0x3345; //used to actually change pwm, 0x3345 = 0 V, 0x00 = 5V
   80952:	3020      	adds	r0, #32
   80954:	6002      	str	r2, [r0, #0]
	

	PWM->PWM_ENA = PWM_ENA_CHID5 | PWM_ENA_CHID6; //ENABLE
   80956:	6059      	str	r1, [r3, #4]
   80958:	4770      	bx	lr
   8095a:	bf00      	nop
   8095c:	400e0600 	.word	0x400e0600
   80960:	400e1200 	.word	0x400e1200
   80964:	40094000 	.word	0x40094000
   80968:	07010701 	.word	0x07010701
   8096c:	400942a0 	.word	0x400942a0
   80970:	400942ac 	.word	0x400942ac

00080974 <pwm_set>:
	
}

void pwm_set(int value) {
	// SETS THE PWM VALUE, CAPPED TO 0,9ms - 2.1 ms
	if (value > 1378){
   80974:	f240 5362 	movw	r3, #1378	; 0x562
   80978:	4298      	cmp	r0, r3
   8097a:	dd00      	ble.n	8097e <pwm_set+0xa>
		value = 1378;
   8097c:	4618      	mov	r0, r3
		
	}
	if (value < 591){
   8097e:	f240 234e 	movw	r3, #590	; 0x24e
   80982:	4298      	cmp	r0, r3
   80984:	dc01      	bgt.n	8098a <pwm_set+0x16>
		value = 591;
   80986:	f240 204f 	movw	r0, #591	; 0x24f
	}
	
	REG_PWM_CDTY5 = (0x3345 - value);	
   8098a:	f5c0 504d 	rsb	r0, r0, #13120	; 0x3340
   8098e:	3005      	adds	r0, #5
   80990:	4b01      	ldr	r3, [pc, #4]	; (80998 <pwm_set+0x24>)
   80992:	6018      	str	r0, [r3, #0]
   80994:	4770      	bx	lr
   80996:	bf00      	nop
   80998:	400942a4 	.word	0x400942a4

0008099c <pwm_set_servo>:
}

void pwm_set_servo(int value){
   8099c:	b508      	push	{r3, lr}
	//SETS THE PWM VALUE BASED OF JOYSTICK, GETS 0-200 in, ~591-1378 out
	
	value = value*4 + 502; // Calculated value 591, 
   8099e:	0080      	lsls	r0, r0, #2
	pwm_set(value);
   809a0:	f500 70fb 	add.w	r0, r0, #502	; 0x1f6
   809a4:	4b01      	ldr	r3, [pc, #4]	; (809ac <pwm_set_servo+0x10>)
   809a6:	4798      	blx	r3
   809a8:	bd08      	pop	{r3, pc}
   809aa:	bf00      	nop
   809ac:	00080975 	.word	0x00080975

000809b0 <timer_init>:


void timer_init(){
	
	
		PMC->PMC_PCER0 |= 1 << (ID_TC0);
   809b0:	4a09      	ldr	r2, [pc, #36]	; (809d8 <timer_init+0x28>)
   809b2:	6913      	ldr	r3, [r2, #16]
   809b4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
   809b8:	6113      	str	r3, [r2, #16]
		
		//PIOB->PIO_PDR |= PIO_PB26B_TCLK0; //Disables IO for the TCKL0
		
		//PIOB->PIO_ABSR |= PIO_PB26B_TCLK0; //Selects peripheral 2.
		
		TC0->TC_CHANNEL->TC_CMR |= TC_CMR_TCCLKS_TIMER_CLOCK4;
   809ba:	4b08      	ldr	r3, [pc, #32]	; (809dc <timer_init+0x2c>)
   809bc:	685a      	ldr	r2, [r3, #4]
   809be:	f042 0203 	orr.w	r2, r2, #3
   809c2:	605a      	str	r2, [r3, #4]
		
		TC0->TC_CHANNEL->TC_CCR |= TC_CCR_CLKEN;
   809c4:	681a      	ldr	r2, [r3, #0]
   809c6:	f042 0201 	orr.w	r2, r2, #1
   809ca:	601a      	str	r2, [r3, #0]
		
		TC0->TC_CHANNEL->TC_CCR |= TC_CCR_SWTRG;
   809cc:	681a      	ldr	r2, [r3, #0]
   809ce:	f042 0204 	orr.w	r2, r2, #4
   809d2:	601a      	str	r2, [r3, #0]
   809d4:	4770      	bx	lr
   809d6:	bf00      	nop
   809d8:	400e0600 	.word	0x400e0600
   809dc:	40080000 	.word	0x40080000

000809e0 <timer_read>:
		
}

int timer_read(){
	
	int value = TC0->TC_CHANNEL->TC_CV;
   809e0:	4b01      	ldr	r3, [pc, #4]	; (809e8 <timer_read+0x8>)
   809e2:	6918      	ldr	r0, [r3, #16]
	

	//printf("%d \r \n", value);
	
	return value;
   809e4:	4770      	bx	lr
   809e6:	bf00      	nop
   809e8:	40080000 	.word	0x40080000

000809ec <configure_uart>:
   809ec:	4b16      	ldr	r3, [pc, #88]	; (80a48 <configure_uart+0x5c>)
   809ee:	2200      	movs	r2, #0
   809f0:	701a      	strb	r2, [r3, #0]
   809f2:	705a      	strb	r2, [r3, #1]
   809f4:	4b15      	ldr	r3, [pc, #84]	; (80a4c <configure_uart+0x60>)
   809f6:	f44f 7140 	mov.w	r1, #768	; 0x300
   809fa:	6459      	str	r1, [r3, #68]	; 0x44
   809fc:	6059      	str	r1, [r3, #4]
   809fe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   80a00:	6f18      	ldr	r0, [r3, #112]	; 0x70
   80a02:	4002      	ands	r2, r0
   80a04:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   80a08:	671a      	str	r2, [r3, #112]	; 0x70
   80a0a:	6659      	str	r1, [r3, #100]	; 0x64
   80a0c:	f44f 7280 	mov.w	r2, #256	; 0x100
   80a10:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
   80a14:	611a      	str	r2, [r3, #16]
   80a16:	f503 7300 	add.w	r3, r3, #512	; 0x200
   80a1a:	21ac      	movs	r1, #172	; 0xac
   80a1c:	6019      	str	r1, [r3, #0]
   80a1e:	f240 2123 	movw	r1, #547	; 0x223
   80a22:	6219      	str	r1, [r3, #32]
   80a24:	f44f 6100 	mov.w	r1, #2048	; 0x800
   80a28:	6059      	str	r1, [r3, #4]
   80a2a:	f240 2102 	movw	r1, #514	; 0x202
   80a2e:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   80a32:	f04f 31ff 	mov.w	r1, #4294967295
   80a36:	60d9      	str	r1, [r3, #12]
   80a38:	21e1      	movs	r1, #225	; 0xe1
   80a3a:	6099      	str	r1, [r3, #8]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   80a3c:	4904      	ldr	r1, [pc, #16]	; (80a50 <configure_uart+0x64>)
   80a3e:	600a      	str	r2, [r1, #0]
   80a40:	2250      	movs	r2, #80	; 0x50
   80a42:	601a      	str	r2, [r3, #0]
   80a44:	4770      	bx	lr
   80a46:	bf00      	nop
   80a48:	20000468 	.word	0x20000468
   80a4c:	400e0e00 	.word	0x400e0e00
   80a50:	e000e100 	.word	0xe000e100

00080a54 <uart_putchar>:
   80a54:	4b07      	ldr	r3, [pc, #28]	; (80a74 <uart_putchar+0x20>)
   80a56:	695b      	ldr	r3, [r3, #20]
   80a58:	f013 0f02 	tst.w	r3, #2
   80a5c:	d008      	beq.n	80a70 <uart_putchar+0x1c>
   80a5e:	4b05      	ldr	r3, [pc, #20]	; (80a74 <uart_putchar+0x20>)
   80a60:	61d8      	str	r0, [r3, #28]
   80a62:	4b04      	ldr	r3, [pc, #16]	; (80a74 <uart_putchar+0x20>)
   80a64:	695b      	ldr	r3, [r3, #20]
   80a66:	f413 7f00 	tst.w	r3, #512	; 0x200
   80a6a:	d0fa      	beq.n	80a62 <uart_putchar+0xe>
   80a6c:	2000      	movs	r0, #0
   80a6e:	4770      	bx	lr
   80a70:	2001      	movs	r0, #1
   80a72:	4770      	bx	lr
   80a74:	400e0800 	.word	0x400e0800

00080a78 <UART_Handler>:
   80a78:	b508      	push	{r3, lr}
   80a7a:	4b15      	ldr	r3, [pc, #84]	; (80ad0 <UART_Handler+0x58>)
   80a7c:	695b      	ldr	r3, [r3, #20]
   80a7e:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   80a82:	d003      	beq.n	80a8c <UART_Handler+0x14>
   80a84:	f44f 71a8 	mov.w	r1, #336	; 0x150
   80a88:	4a11      	ldr	r2, [pc, #68]	; (80ad0 <UART_Handler+0x58>)
   80a8a:	6011      	str	r1, [r2, #0]
   80a8c:	f013 0f01 	tst.w	r3, #1
   80a90:	d012      	beq.n	80ab8 <UART_Handler+0x40>
   80a92:	4810      	ldr	r0, [pc, #64]	; (80ad4 <UART_Handler+0x5c>)
   80a94:	7842      	ldrb	r2, [r0, #1]
   80a96:	1c53      	adds	r3, r2, #1
   80a98:	4259      	negs	r1, r3
   80a9a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   80a9e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   80aa2:	bf58      	it	pl
   80aa4:	424b      	negpl	r3, r1
   80aa6:	7801      	ldrb	r1, [r0, #0]
   80aa8:	428b      	cmp	r3, r1
   80aaa:	d006      	beq.n	80aba <UART_Handler+0x42>
   80aac:	4908      	ldr	r1, [pc, #32]	; (80ad0 <UART_Handler+0x58>)
   80aae:	6988      	ldr	r0, [r1, #24]
   80ab0:	4908      	ldr	r1, [pc, #32]	; (80ad4 <UART_Handler+0x5c>)
   80ab2:	440a      	add	r2, r1
   80ab4:	7090      	strb	r0, [r2, #2]
   80ab6:	704b      	strb	r3, [r1, #1]
   80ab8:	bd08      	pop	{r3, pc}
   80aba:	4807      	ldr	r0, [pc, #28]	; (80ad8 <UART_Handler+0x60>)
   80abc:	4b07      	ldr	r3, [pc, #28]	; (80adc <UART_Handler+0x64>)
   80abe:	4798      	blx	r3
   80ac0:	4b04      	ldr	r3, [pc, #16]	; (80ad4 <UART_Handler+0x5c>)
   80ac2:	7859      	ldrb	r1, [r3, #1]
   80ac4:	4a02      	ldr	r2, [pc, #8]	; (80ad0 <UART_Handler+0x58>)
   80ac6:	6992      	ldr	r2, [r2, #24]
   80ac8:	440b      	add	r3, r1
   80aca:	709a      	strb	r2, [r3, #2]
   80acc:	bd08      	pop	{r3, pc}
   80ace:	bf00      	nop
   80ad0:	400e0800 	.word	0x400e0800
   80ad4:	20000468 	.word	0x20000468
   80ad8:	00080cc8 	.word	0x00080cc8
   80adc:	000808d5 	.word	0x000808d5

00080ae0 <__libc_init_array>:
   80ae0:	b570      	push	{r4, r5, r6, lr}
   80ae2:	4e0f      	ldr	r6, [pc, #60]	; (80b20 <__libc_init_array+0x40>)
   80ae4:	4d0f      	ldr	r5, [pc, #60]	; (80b24 <__libc_init_array+0x44>)
   80ae6:	1b76      	subs	r6, r6, r5
   80ae8:	10b6      	asrs	r6, r6, #2
   80aea:	bf18      	it	ne
   80aec:	2400      	movne	r4, #0
   80aee:	d005      	beq.n	80afc <__libc_init_array+0x1c>
   80af0:	3401      	adds	r4, #1
   80af2:	f855 3b04 	ldr.w	r3, [r5], #4
   80af6:	4798      	blx	r3
   80af8:	42a6      	cmp	r6, r4
   80afa:	d1f9      	bne.n	80af0 <__libc_init_array+0x10>
   80afc:	4e0a      	ldr	r6, [pc, #40]	; (80b28 <__libc_init_array+0x48>)
   80afe:	4d0b      	ldr	r5, [pc, #44]	; (80b2c <__libc_init_array+0x4c>)
   80b00:	f000 f8f4 	bl	80cec <_init>
   80b04:	1b76      	subs	r6, r6, r5
   80b06:	10b6      	asrs	r6, r6, #2
   80b08:	bf18      	it	ne
   80b0a:	2400      	movne	r4, #0
   80b0c:	d006      	beq.n	80b1c <__libc_init_array+0x3c>
   80b0e:	3401      	adds	r4, #1
   80b10:	f855 3b04 	ldr.w	r3, [r5], #4
   80b14:	4798      	blx	r3
   80b16:	42a6      	cmp	r6, r4
   80b18:	d1f9      	bne.n	80b0e <__libc_init_array+0x2e>
   80b1a:	bd70      	pop	{r4, r5, r6, pc}
   80b1c:	bd70      	pop	{r4, r5, r6, pc}
   80b1e:	bf00      	nop
   80b20:	00080cf8 	.word	0x00080cf8
   80b24:	00080cf8 	.word	0x00080cf8
   80b28:	00080d00 	.word	0x00080d00
   80b2c:	00080cf8 	.word	0x00080cf8

00080b30 <register_fini>:
   80b30:	4b02      	ldr	r3, [pc, #8]	; (80b3c <register_fini+0xc>)
   80b32:	b113      	cbz	r3, 80b3a <register_fini+0xa>
   80b34:	4802      	ldr	r0, [pc, #8]	; (80b40 <register_fini+0x10>)
   80b36:	f000 b805 	b.w	80b44 <atexit>
   80b3a:	4770      	bx	lr
   80b3c:	00000000 	.word	0x00000000
   80b40:	00080b51 	.word	0x00080b51

00080b44 <atexit>:
   80b44:	2300      	movs	r3, #0
   80b46:	4601      	mov	r1, r0
   80b48:	461a      	mov	r2, r3
   80b4a:	4618      	mov	r0, r3
   80b4c:	f000 b81e 	b.w	80b8c <__register_exitproc>

00080b50 <__libc_fini_array>:
   80b50:	b538      	push	{r3, r4, r5, lr}
   80b52:	4c0a      	ldr	r4, [pc, #40]	; (80b7c <__libc_fini_array+0x2c>)
   80b54:	4d0a      	ldr	r5, [pc, #40]	; (80b80 <__libc_fini_array+0x30>)
   80b56:	1b64      	subs	r4, r4, r5
   80b58:	10a4      	asrs	r4, r4, #2
   80b5a:	d00a      	beq.n	80b72 <__libc_fini_array+0x22>
   80b5c:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   80b60:	3b01      	subs	r3, #1
   80b62:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   80b66:	3c01      	subs	r4, #1
   80b68:	f855 3904 	ldr.w	r3, [r5], #-4
   80b6c:	4798      	blx	r3
   80b6e:	2c00      	cmp	r4, #0
   80b70:	d1f9      	bne.n	80b66 <__libc_fini_array+0x16>
   80b72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   80b76:	f000 b8c3 	b.w	80d00 <_fini>
   80b7a:	bf00      	nop
   80b7c:	00080d10 	.word	0x00080d10
   80b80:	00080d0c 	.word	0x00080d0c

00080b84 <__retarget_lock_acquire_recursive>:
   80b84:	4770      	bx	lr
   80b86:	bf00      	nop

00080b88 <__retarget_lock_release_recursive>:
   80b88:	4770      	bx	lr
   80b8a:	bf00      	nop

00080b8c <__register_exitproc>:
   80b8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   80b90:	4d2c      	ldr	r5, [pc, #176]	; (80c44 <__register_exitproc+0xb8>)
   80b92:	4606      	mov	r6, r0
   80b94:	6828      	ldr	r0, [r5, #0]
   80b96:	4698      	mov	r8, r3
   80b98:	460f      	mov	r7, r1
   80b9a:	4691      	mov	r9, r2
   80b9c:	f7ff fff2 	bl	80b84 <__retarget_lock_acquire_recursive>
   80ba0:	4b29      	ldr	r3, [pc, #164]	; (80c48 <__register_exitproc+0xbc>)
   80ba2:	681c      	ldr	r4, [r3, #0]
   80ba4:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   80ba8:	2b00      	cmp	r3, #0
   80baa:	d03e      	beq.n	80c2a <__register_exitproc+0x9e>
   80bac:	685a      	ldr	r2, [r3, #4]
   80bae:	2a1f      	cmp	r2, #31
   80bb0:	dc1c      	bgt.n	80bec <__register_exitproc+0x60>
   80bb2:	f102 0e01 	add.w	lr, r2, #1
   80bb6:	b176      	cbz	r6, 80bd6 <__register_exitproc+0x4a>
   80bb8:	2101      	movs	r1, #1
   80bba:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   80bbe:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   80bc2:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   80bc6:	4091      	lsls	r1, r2
   80bc8:	4308      	orrs	r0, r1
   80bca:	2e02      	cmp	r6, #2
   80bcc:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   80bd0:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   80bd4:	d023      	beq.n	80c1e <__register_exitproc+0x92>
   80bd6:	3202      	adds	r2, #2
   80bd8:	f8c3 e004 	str.w	lr, [r3, #4]
   80bdc:	6828      	ldr	r0, [r5, #0]
   80bde:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   80be2:	f7ff ffd1 	bl	80b88 <__retarget_lock_release_recursive>
   80be6:	2000      	movs	r0, #0
   80be8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   80bec:	4b17      	ldr	r3, [pc, #92]	; (80c4c <__register_exitproc+0xc0>)
   80bee:	b30b      	cbz	r3, 80c34 <__register_exitproc+0xa8>
   80bf0:	f44f 70c8 	mov.w	r0, #400	; 0x190
   80bf4:	f3af 8000 	nop.w
   80bf8:	4603      	mov	r3, r0
   80bfa:	b1d8      	cbz	r0, 80c34 <__register_exitproc+0xa8>
   80bfc:	2000      	movs	r0, #0
   80bfe:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   80c02:	f04f 0e01 	mov.w	lr, #1
   80c06:	6058      	str	r0, [r3, #4]
   80c08:	6019      	str	r1, [r3, #0]
   80c0a:	4602      	mov	r2, r0
   80c0c:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   80c10:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   80c14:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   80c18:	2e00      	cmp	r6, #0
   80c1a:	d0dc      	beq.n	80bd6 <__register_exitproc+0x4a>
   80c1c:	e7cc      	b.n	80bb8 <__register_exitproc+0x2c>
   80c1e:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   80c22:	4301      	orrs	r1, r0
   80c24:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   80c28:	e7d5      	b.n	80bd6 <__register_exitproc+0x4a>
   80c2a:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   80c2e:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   80c32:	e7bb      	b.n	80bac <__register_exitproc+0x20>
   80c34:	6828      	ldr	r0, [r5, #0]
   80c36:	f7ff ffa7 	bl	80b88 <__retarget_lock_release_recursive>
   80c3a:	f04f 30ff 	mov.w	r0, #4294967295
   80c3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   80c42:	bf00      	nop
   80c44:	20000438 	.word	0x20000438
   80c48:	00080ce8 	.word	0x00080ce8
   80c4c:	00000000 	.word	0x00000000
   80c50:	304e4143 	.word	0x304e4143
   80c54:	73656d20 	.word	0x73656d20
   80c58:	65676173 	.word	0x65676173
   80c5c:	72726120 	.word	0x72726120
   80c60:	64657669 	.word	0x64657669
   80c64:	206e6920 	.word	0x206e6920
   80c68:	2d6e6f6e 	.word	0x2d6e6f6e
   80c6c:	64657375 	.word	0x64657375
   80c70:	69616d20 	.word	0x69616d20
   80c74:	786f626c 	.word	0x786f626c
   80c78:	00000d0a 	.word	0x00000d0a
   80c7c:	7373656d 	.word	0x7373656d
   80c80:	20656761 	.word	0x20656761
   80c84:	203a6469 	.word	0x203a6469
   80c88:	0d0a6425 	.word	0x0d0a6425
   80c8c:	00000000 	.word	0x00000000
   80c90:	7373656d 	.word	0x7373656d
   80c94:	20656761 	.word	0x20656761
   80c98:	61746164 	.word	0x61746164
   80c9c:	6e656c20 	.word	0x6e656c20
   80ca0:	3a687467 	.word	0x3a687467
   80ca4:	0a642520 	.word	0x0a642520
   80ca8:	0000000d 	.word	0x0000000d
   80cac:	00206425 	.word	0x00206425
   80cb0:	726f6353 	.word	0x726f6353
   80cb4:	00203a65 	.word	0x00203a65
   80cb8:	0d206425 	.word	0x0d206425
   80cbc:	00000a20 	.word	0x00000a20
   80cc0:	6c756e28 	.word	0x6c756e28
   80cc4:	0000296c 	.word	0x0000296c
   80cc8:	3a525245 	.word	0x3a525245
   80ccc:	52415520 	.word	0x52415520
   80cd0:	58522054 	.word	0x58522054
   80cd4:	66756220 	.word	0x66756220
   80cd8:	20726566 	.word	0x20726566
   80cdc:	66207369 	.word	0x66207369
   80ce0:	0a6c6c75 	.word	0x0a6c6c75
   80ce4:	0000000d 	.word	0x0000000d

00080ce8 <_global_impure_ptr>:
   80ce8:	20000010                                ... 

00080cec <_init>:
   80cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80cee:	bf00      	nop
   80cf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   80cf2:	bc08      	pop	{r3}
   80cf4:	469e      	mov	lr, r3
   80cf6:	4770      	bx	lr

00080cf8 <__init_array_start>:
   80cf8:	00080b31 	.word	0x00080b31

00080cfc <__frame_dummy_init_array_entry>:
   80cfc:	00080119                                ....

00080d00 <_fini>:
   80d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80d02:	bf00      	nop
   80d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
   80d06:	bc08      	pop	{r3}
   80d08:	469e      	mov	lr, r3
   80d0a:	4770      	bx	lr

00080d0c <__fini_array_start>:
   80d0c:	000800f5 	.word	0x000800f5
