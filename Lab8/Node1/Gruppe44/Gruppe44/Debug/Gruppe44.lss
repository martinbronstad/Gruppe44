
Gruppe44.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000066  00800100  00001d82  00001e16  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001d82  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000c3  00800166  00800166  00001e7c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001e7c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001eac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002a0  00000000  00000000  00001ee8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000049d9  00000000  00000000  00002188  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001208  00000000  00000000  00006b61  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001c24  00000000  00000000  00007d69  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000069c  00000000  00000000  00009990  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000bfb  00000000  00000000  0000a02c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001836  00000000  00000000  0000ac27  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000210  00000000  00000000  0000c45d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 22 02 	jmp	0x444	; 0x444 <__ctors_end>
       4:	0c 94 c4 05 	jmp	0xb88	; 0xb88 <__vector_1>
       8:	0c 94 ed 05 	jmp	0xbda	; 0xbda <__vector_2>
       c:	0c 94 37 06 	jmp	0xc6e	; 0xc6e <__vector_3>
      10:	0c 94 3f 02 	jmp	0x47e	; 0x47e <__bad_interrupt>
      14:	0c 94 3f 02 	jmp	0x47e	; 0x47e <__bad_interrupt>
      18:	0c 94 3f 02 	jmp	0x47e	; 0x47e <__bad_interrupt>
      1c:	0c 94 3f 02 	jmp	0x47e	; 0x47e <__bad_interrupt>
      20:	0c 94 3f 02 	jmp	0x47e	; 0x47e <__bad_interrupt>
      24:	0c 94 3f 02 	jmp	0x47e	; 0x47e <__bad_interrupt>
      28:	0c 94 3f 02 	jmp	0x47e	; 0x47e <__bad_interrupt>
      2c:	0c 94 3f 02 	jmp	0x47e	; 0x47e <__bad_interrupt>
      30:	0c 94 3f 02 	jmp	0x47e	; 0x47e <__bad_interrupt>
      34:	0c 94 3f 02 	jmp	0x47e	; 0x47e <__bad_interrupt>
      38:	0c 94 3f 02 	jmp	0x47e	; 0x47e <__bad_interrupt>
      3c:	0c 94 3f 02 	jmp	0x47e	; 0x47e <__bad_interrupt>
      40:	0c 94 3f 02 	jmp	0x47e	; 0x47e <__bad_interrupt>
      44:	0c 94 3f 02 	jmp	0x47e	; 0x47e <__bad_interrupt>
      48:	0c 94 3f 02 	jmp	0x47e	; 0x47e <__bad_interrupt>
      4c:	0c 94 3f 02 	jmp	0x47e	; 0x47e <__bad_interrupt>
      50:	0c 94 3f 02 	jmp	0x47e	; 0x47e <__bad_interrupt>
      54:	0c 94 3f 02 	jmp	0x47e	; 0x47e <__bad_interrupt>
      58:	0c 94 3f 02 	jmp	0x47e	; 0x47e <__bad_interrupt>
      5c:	0c 94 3f 02 	jmp	0x47e	; 0x47e <__bad_interrupt>
      60:	0c 94 3f 02 	jmp	0x47e	; 0x47e <__bad_interrupt>
      64:	0c 94 3f 02 	jmp	0x47e	; 0x47e <__bad_interrupt>
      68:	0c 94 3f 02 	jmp	0x47e	; 0x47e <__bad_interrupt>
      6c:	0c 94 3f 02 	jmp	0x47e	; 0x47e <__bad_interrupt>

00000070 <__trampolines_end>:
      70:	49 01       	movw	r8, r18
      72:	44 01       	movw	r8, r8
      74:	38 01       	movw	r6, r16
      76:	33 01       	movw	r6, r6
      78:	26 01       	movw	r4, r12
      7a:	1a 01       	movw	r2, r20
      7c:	0e 01       	movw	r0, r28
      7e:	00 01       	movw	r0, r0
      80:	f7 00       	.word	0x00f7	; ????
      82:	ef 00       	.word	0x00ef	; ????
      84:	e2 00       	.word	0x00e2	; ????
      86:	dd 00       	.word	0x00dd	; ????
      88:	d6 00       	.word	0x00d6	; ????
      8a:	d1 00       	.word	0x00d1	; ????
      8c:	c3 00       	.word	0x00c3	; ????
      8e:	b7 00       	.word	0x00b7	; ????
      90:	b1 00       	.word	0x00b1	; ????
      92:	a3 00       	.word	0x00a3	; ????
      94:	96 00       	.word	0x0096	; ????

00000096 <string_menu_object_19>:
      96:	45 78 69 74 20 74 6f 20 6d 65 6e 75 00              Exit to menu.

000000a3 <string_menu_object_18>:
      a3:	20 2d 47 41 4d 45 20 4f 56 45 52 2d 20 00            -GAME OVER- .

000000b1 <string_menu_object_17>:
      b1:	53 63 6f 72 65 00                                   Score.

000000b7 <string_menu_object_16>:
      b7:	41 52 43 41 44 45 20 4d 4f 44 45 00                 ARCADE MODE.

000000c3 <string_menu_object_15>:
      c3:	53 54 41 4e 44 41 52 44 20 4d 4f 44 45 00           STANDARD MODE.

000000d1 <string_menu_object_14>:
      d1:	48 61 72 64 00                                      Hard.

000000d6 <string_menu_object_13>:
      d6:	4e 6f 72 6d 61 6c 00                                Normal.

000000dd <string_menu_object_12>:
      dd:	45 61 73 79 00                                      Easy.

000000e2 <string_menu_object_11>:
      e2:	2d 44 49 46 46 49 43 55 4c 54 59 2d 00              -DIFFICULTY-.

000000ef <string_menu_object_10>:
      ef:	53 6c 69 64 65 72 73 00                             Sliders.

000000f7 <string_menu_object_9>:
      f7:	4a 6f 79 73 74 69 63 6b 00                          Joystick.

00000100 <string_menu_object_8>:
     100:	2d 43 4f 4e 54 52 4f 4c 4c 45 52 3a 2d 00           -CONTROLLER:-.

0000010e <string_menu_object_7>:
     10e:	41 72 63 61 64 65 20 6d 6f 64 65 00                 Arcade mode.

0000011a <string_menu_object_6>:
     11a:	4e 6f 72 6d 61 6c 20 6d 6f 64 65 00                 Normal mode.

00000126 <string_menu_object_5>:
     126:	2d 47 41 4d 45 20 4d 4f 44 45 53 2d 00              -GAME MODES-.

00000133 <string_menu_object_4>:
     133:	50 4c 41 59 00                                      PLAY.

00000138 <string_menu_object_3>:
     138:	2d 4d 41 49 4e 20 4d 45 4e 55 2d 00                 -MAIN MENU-.

00000144 <string_menu_object_2>:
     144:	42 61 63 6b 00                                      Back.

00000149 <string_menu_object_1>:
     149:	20 00                                                .

0000014b <font8>:
	...
     153:	00 06 5f 5f 06 00 00 00 00 07 07 00 07 07 00 00     ..__............
     163:	14 7f 7f 14 7f 7f 14 00 24 2e 6b 6b 3a 12 00 00     ........$.kk:...
     173:	46 66 30 18 0c 66 62 00 30 7a 4f 5d 37 7a 48 00     Ff0..fb.0zO]7zH.
     183:	04 07 03 00 00 00 00 00 00 1c 3e 63 41 00 00 00     ..........>cA...
     193:	00 41 63 3e 1c 00 00 00 08 2a 3e 1c 1c 3e 2a 08     .Ac>.....*>..>*.
     1a3:	08 08 3e 3e 08 08 00 00 00 a0 e0 60 00 00 00 00     ..>>.......`....
     1b3:	08 08 08 08 08 08 00 00 00 00 60 60 00 00 00 00     ..........``....
     1c3:	60 30 18 0c 06 03 01 00 3e 7f 59 4d 7f 3e 00 00     `0......>.YM.>..
     1d3:	42 42 7f 7f 40 40 00 00 62 73 59 49 6f 66 00 00     BB..@@..bsYIof..
     1e3:	22 63 49 49 7f 36 00 00 18 1c 16 13 7f 7f 10 00     "cII.6..........
     1f3:	27 67 45 45 7d 39 00 00 3c 7e 4b 49 79 30 00 00     'gEE}9..<~KIy0..
     203:	03 63 71 19 0f 07 00 00 36 7f 49 49 7f 36 00 00     .cq.....6.II.6..
     213:	06 4f 49 69 3f 1e 00 00 00 00 6c 6c 00 00 00 00     .OIi?.....ll....
     223:	00 a0 ec 6c 00 00 00 00 08 1c 36 63 41 00 00 00     ...l......6cA...
     233:	14 14 14 14 14 14 00 00 00 41 63 36 1c 08 00 00     .........Ac6....
     243:	02 03 51 59 0f 06 00 00 3e 7f 41 5d 5d 1f 1e 00     ..QY....>.A]]...
     253:	7c 7e 13 13 7e 7c 00 00 41 7f 7f 49 49 7f 36 00     |~..~|..A..II.6.
     263:	1c 3e 63 41 41 63 22 00 41 7f 7f 41 63 7f 1c 00     .>cAAc".A..Ac...
     273:	41 7f 7f 49 5d 41 63 00 41 7f 7f 49 1d 01 03 00     A..I]Ac.A..I....
     283:	1c 3e 63 41 51 73 72 00 7f 7f 08 08 7f 7f 00 00     .>cAQsr.........
     293:	00 41 7f 7f 41 00 00 00 30 70 40 41 7f 3f 01 00     .A..A...0p@A.?..
     2a3:	41 7f 7f 08 1c 77 63 00 41 7f 7f 41 40 60 70 00     A....wc.A..A@`p.
     2b3:	7f 7f 06 0c 06 7f 7f 00 7f 7f 06 0c 18 7f 7f 00     ................
     2c3:	1c 3e 63 41 63 3e 1c 00 41 7f 7f 49 09 0f 06 00     .>cAc>..A..I....
     2d3:	1e 3f 21 71 7f 5e 00 00 41 7f 7f 19 39 6f 46 00     .?!q.^..A...9oF.
     2e3:	26 67 4d 59 7b 32 00 00 03 41 7f 7f 41 03 00 00     &gMY{2...A..A...
     2f3:	7f 7f 40 40 7f 7f 00 00 1f 3f 60 60 3f 1f 00 00     ..@@.....?``?...
     303:	7f 7f 30 18 30 7f 7f 00 63 77 1c 08 1c 77 63 00     ..0.0...cw...wc.
     313:	07 4f 78 78 4f 07 00 00 67 73 59 4d 47 63 71 00     .OxxO...gsYMGcq.
     323:	00 7f 7f 41 41 00 00 00 01 03 06 0c 18 30 60 00     ...AA........0`.
     333:	00 41 41 7f 7f 00 00 00 08 0c 06 03 06 0c 08 00     .AA.............
     343:	80 80 80 80 80 80 80 80 00 00 03 07 04 00 00 00     ................
     353:	20 74 54 54 3c 78 40 00 41 3f 7f 44 44 7c 38 00      tTT<x@.A?.DD|8.
     363:	38 7c 44 44 6c 28 00 00 30 78 48 49 3f 7f 40 00     8|DDl(..0xHI?.@.
     373:	38 7c 54 54 5c 18 00 00 48 7e 7f 49 03 02 00 00     8|TT\...H~.I....
     383:	98 bc a4 a4 f8 7c 04 00 41 7f 7f 08 04 7c 78 00     .....|..A....|x.
     393:	00 44 7d 7d 40 00 00 00 40 c4 84 fd 7d 00 00 00     .D}}@...@...}...
     3a3:	41 7f 7f 10 38 6c 44 00 00 41 7f 7f 40 00 00 00     A...8lD..A..@...
     3b3:	7c 7c 0c 18 0c 7c 78 00 7c 7c 04 04 7c 78 00 00     ||...|x.||..|x..
     3c3:	38 7c 44 44 7c 38 00 00 84 fc f8 a4 24 3c 18 00     8|DD|8......$<..
     3d3:	18 3c 24 a4 f8 fc 84 00 44 7c 78 44 1c 18 00 00     .<$.....D|xD....
     3e3:	48 5c 54 54 74 24 00 00 00 04 3e 7f 44 24 00 00     H\TTt$....>.D$..
     3f3:	3c 7c 40 40 3c 7c 40 00 1c 3c 60 60 3c 1c 00 00     <|@@<|@..<``<...
     403:	3c 7c 60 30 60 7c 3c 00 44 6c 38 10 38 6c 44 00     <|`0`|<.Dl8.8lD.
     413:	9c bc a0 a0 fc 7c 00 00 4c 64 74 5c 4c 64 00 00     .....|..Ldt\Ld..
     423:	08 08 3e 77 41 41 00 00 00 00 00 77 77 00 00 00     ..>wAA.....ww...
     433:	41 41 77 3e 08 08 00 00 02 03 01 03 02 03 01 00     AAw>............
	...

00000444 <__ctors_end>:
     444:	11 24       	eor	r1, r1
     446:	1f be       	out	0x3f, r1	; 63
     448:	cf ef       	ldi	r28, 0xFF	; 255
     44a:	d4 e0       	ldi	r29, 0x04	; 4
     44c:	de bf       	out	0x3e, r29	; 62
     44e:	cd bf       	out	0x3d, r28	; 61

00000450 <__do_copy_data>:
     450:	11 e0       	ldi	r17, 0x01	; 1
     452:	a0 e0       	ldi	r26, 0x00	; 0
     454:	b1 e0       	ldi	r27, 0x01	; 1
     456:	e2 e8       	ldi	r30, 0x82	; 130
     458:	fd e1       	ldi	r31, 0x1D	; 29
     45a:	02 c0       	rjmp	.+4      	; 0x460 <__do_copy_data+0x10>
     45c:	05 90       	lpm	r0, Z+
     45e:	0d 92       	st	X+, r0
     460:	a6 36       	cpi	r26, 0x66	; 102
     462:	b1 07       	cpc	r27, r17
     464:	d9 f7       	brne	.-10     	; 0x45c <__do_copy_data+0xc>

00000466 <__do_clear_bss>:
     466:	22 e0       	ldi	r18, 0x02	; 2
     468:	a6 e6       	ldi	r26, 0x66	; 102
     46a:	b1 e0       	ldi	r27, 0x01	; 1
     46c:	01 c0       	rjmp	.+2      	; 0x470 <.do_clear_bss_start>

0000046e <.do_clear_bss_loop>:
     46e:	1d 92       	st	X+, r1

00000470 <.do_clear_bss_start>:
     470:	a9 32       	cpi	r26, 0x29	; 41
     472:	b2 07       	cpc	r27, r18
     474:	e1 f7       	brne	.-8      	; 0x46e <.do_clear_bss_loop>
     476:	0e 94 a0 06 	call	0xd40	; 0xd40 <main>
     47a:	0c 94 bf 0e 	jmp	0x1d7e	; 0x1d7e <_exit>

0000047e <__bad_interrupt>:
     47e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000482 <adc_init>:
#include <math.h>
#include "CAN.h"

void adc_init (void){
	
	DDRD |= (1 << PD5); // Set port PD5 to 1
     482:	81 b3       	in	r24, 0x11	; 17
     484:	80 62       	ori	r24, 0x20	; 32
     486:	81 bb       	out	0x11, r24	; 17
	TCCR1A |= (1 << COM1A0)|(1 << COM1B0); // Timer/Counter1 Control Register A (TCCR1A): Setting bit 6 and 4 to 1 - "Toggle OCnA/OCnB on Compare Match."
     488:	8f b5       	in	r24, 0x2f	; 47
     48a:	80 65       	ori	r24, 0x50	; 80
     48c:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1 << WGM12)|(1 << CS10); // Timer/Counter1 Control Register B (TCCR1B): Setting bit 3 to 1 - "CTC-mode", and bit 0 to 1 "clkI/O/1 (No prescaling)"
     48e:	8e b5       	in	r24, 0x2e	; 46
     490:	89 60       	ori	r24, 0x09	; 9
     492:	8e bd       	out	0x2e, r24	; 46
	OCR1A = 0x1; // Setting Compare Match bit - which bit the counter triggers on
     494:	81 e0       	ldi	r24, 0x01	; 1
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	9b bd       	out	0x2b, r25	; 43
     49a:	8a bd       	out	0x2a, r24	; 42
     49c:	08 95       	ret

0000049e <adc_read>:
}

void adc_read(void){
	// SEND TO ADC
	volatile char * adc = ( char *) 0x1400; // Set pointer at starting memory of ADC
	adc [0] = 0xff; // Send random value to initiate
     49e:	8f ef       	ldi	r24, 0xFF	; 255
     4a0:	80 93 00 14 	sts	0x1400, r24	; 0x801400 <__bss_end+0x11d7>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4a4:	84 e1       	ldi	r24, 0x14	; 20
     4a6:	8a 95       	dec	r24
     4a8:	f1 f7       	brne	.-4      	; 0x4a6 <adc_read+0x8>
	
	// WAIT
	_delay_us(60); // Is this one necessary?
	
	// READ FROM ADC
	for (int i=0;i<4;i++) // Need to read 4 values - analog input 0 to 3
     4aa:	80 e0       	ldi	r24, 0x00	; 0
     4ac:	90 e0       	ldi	r25, 0x00	; 0
     4ae:	0b c0       	rjmp	.+22     	; 0x4c6 <adc_read+0x28>
	{
		uint8_t number = adc [0]; // Read the ADC value and store it in variable
     4b0:	20 91 00 14 	lds	r18, 0x1400	; 0x801400 <__bss_end+0x11d7>
		ADC_states[i] = number;
     4b4:	fc 01       	movw	r30, r24
     4b6:	ee 0f       	add	r30, r30
     4b8:	ff 1f       	adc	r31, r31
     4ba:	e3 57       	subi	r30, 0x73	; 115
     4bc:	fe 4f       	sbci	r31, 0xFE	; 254
     4be:	30 e0       	ldi	r19, 0x00	; 0
     4c0:	31 83       	std	Z+1, r19	; 0x01
     4c2:	20 83       	st	Z, r18
	
	// WAIT
	_delay_us(60); // Is this one necessary?
	
	// READ FROM ADC
	for (int i=0;i<4;i++) // Need to read 4 values - analog input 0 to 3
     4c4:	01 96       	adiw	r24, 0x01	; 1
     4c6:	84 30       	cpi	r24, 0x04	; 4
     4c8:	91 05       	cpc	r25, r1
     4ca:	94 f3       	brlt	.-28     	; 0x4b0 <adc_read+0x12>
		ADC_states[i] = number;
		//if (i == 0){
		//printf( "%d ", number); // Print analog input i TODO: Change this from debugging later
		//}
	}
}
     4cc:	08 95       	ret

000004ce <adc_calibrate>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4ce:	87 ea       	ldi	r24, 0xA7	; 167
     4d0:	91 e6       	ldi	r25, 0x61	; 97
     4d2:	01 97       	sbiw	r24, 0x01	; 1
     4d4:	f1 f7       	brne	.-4      	; 0x4d2 <adc_calibrate+0x4>
     4d6:	00 c0       	rjmp	.+0      	; 0x4d8 <adc_calibrate+0xa>
     4d8:	00 00       	nop

void adc_calibrate(void){
	_delay_ms(100); // Added a delay to ensure the states has settled before calibrating
	adc_read();
     4da:	0e 94 4f 02 	call	0x49e	; 0x49e <adc_read>
	X_neutral = ADC_states[0];
     4de:	ed e8       	ldi	r30, 0x8D	; 141
     4e0:	f1 e0       	ldi	r31, 0x01	; 1
     4e2:	20 81       	ld	r18, Z
     4e4:	31 81       	ldd	r19, Z+1	; 0x01
     4e6:	30 93 7a 01 	sts	0x017A, r19	; 0x80017a <X_neutral+0x1>
     4ea:	20 93 79 01 	sts	0x0179, r18	; 0x800179 <X_neutral>
	Y_neutral = ADC_states[1];
     4ee:	82 81       	ldd	r24, Z+2	; 0x02
     4f0:	93 81       	ldd	r25, Z+3	; 0x03
     4f2:	90 93 6a 01 	sts	0x016A, r25	; 0x80016a <Y_neutral+0x1>
     4f6:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <Y_neutral>
	
	previous_x = ADC_states[0];
     4fa:	30 93 76 01 	sts	0x0176, r19	; 0x800176 <previous_x+0x1>
     4fe:	20 93 75 01 	sts	0x0175, r18	; 0x800175 <previous_x>
	previous_y = ADC_states[1];
     502:	90 93 8c 01 	sts	0x018C, r25	; 0x80018c <previous_y+0x1>
     506:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <previous_y>
	previous_right = ADC_states[2];
     50a:	84 81       	ldd	r24, Z+4	; 0x04
     50c:	95 81       	ldd	r25, Z+5	; 0x05
     50e:	90 93 78 01 	sts	0x0178, r25	; 0x800178 <previous_right+0x1>
     512:	80 93 77 01 	sts	0x0177, r24	; 0x800177 <previous_right>
	previous_left = ADC_states[3];
     516:	86 81       	ldd	r24, Z+6	; 0x06
     518:	97 81       	ldd	r25, Z+7	; 0x07
     51a:	90 93 74 01 	sts	0x0174, r25	; 0x800174 <previous_left+0x1>
     51e:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <previous_left>
     522:	08 95       	ret

00000524 <get_stick_state>:
}

void get_stick_state(void){ //Transform the stickstates from 0 <-> 255 to -100 <-> 100
	adc_read();
     524:	0e 94 4f 02 	call	0x49e	; 0x49e <adc_read>
	uint8_t raw_x = ADC_states[0];
     528:	ed e8       	ldi	r30, 0x8D	; 141
     52a:	f1 e0       	ldi	r31, 0x01	; 1
     52c:	80 81       	ld	r24, Z
     52e:	91 81       	ldd	r25, Z+1	; 0x01
	uint8_t raw_y = ADC_states[1];
     530:	22 81       	ldd	r18, Z+2	; 0x02
     532:	33 81       	ldd	r19, Z+3	; 0x03
     534:	99 27       	eor	r25, r25
	//printf("%d ", raw_y);
	//uint8_t b = 51;
	if (raw_x > X_neutral){
     536:	60 91 79 01 	lds	r22, 0x0179	; 0x800179 <X_neutral>
     53a:	70 91 7a 01 	lds	r23, 0x017A	; 0x80017a <X_neutral+0x1>
     53e:	68 17       	cp	r22, r24
     540:	79 07       	cpc	r23, r25
     542:	b4 f4       	brge	.+44     	; 0x570 <get_stick_state+0x4c>
		stick_state.X_state = (((raw_x-X_neutral) * 100 )/ (255 - X_neutral));
     544:	ac 01       	movw	r20, r24
     546:	46 1b       	sub	r20, r22
     548:	57 0b       	sbc	r21, r23
     54a:	e4 e6       	ldi	r30, 0x64	; 100
     54c:	e4 9f       	mul	r30, r20
     54e:	c0 01       	movw	r24, r0
     550:	e5 9f       	mul	r30, r21
     552:	90 0d       	add	r25, r0
     554:	11 24       	eor	r1, r1
     556:	4f ef       	ldi	r20, 0xFF	; 255
     558:	50 e0       	ldi	r21, 0x00	; 0
     55a:	fa 01       	movw	r30, r20
     55c:	e6 1b       	sub	r30, r22
     55e:	f7 0b       	sbc	r31, r23
     560:	bf 01       	movw	r22, r30
     562:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <__divmodhi4>
     566:	70 93 84 01 	sts	0x0184, r23	; 0x800184 <stick_state+0x1>
     56a:	60 93 83 01 	sts	0x0183, r22	; 0x800183 <stick_state>
     56e:	0f c0       	rjmp	.+30     	; 0x58e <get_stick_state+0x6a>
		//moving_average_filter_x();
	}
	else {
		stick_state.X_state = (((raw_x-X_neutral) * 100) / (X_neutral));
     570:	ac 01       	movw	r20, r24
     572:	46 1b       	sub	r20, r22
     574:	57 0b       	sbc	r21, r23
     576:	e4 e6       	ldi	r30, 0x64	; 100
     578:	e4 9f       	mul	r30, r20
     57a:	c0 01       	movw	r24, r0
     57c:	e5 9f       	mul	r30, r21
     57e:	90 0d       	add	r25, r0
     580:	11 24       	eor	r1, r1
     582:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <__divmodhi4>
     586:	70 93 84 01 	sts	0x0184, r23	; 0x800184 <stick_state+0x1>
     58a:	60 93 83 01 	sts	0x0183, r22	; 0x800183 <stick_state>
     58e:	c9 01       	movw	r24, r18
     590:	99 27       	eor	r25, r25
		//moving_average_filter_x();
	}
	
	if (raw_y > Y_neutral){
     592:	60 91 69 01 	lds	r22, 0x0169	; 0x800169 <Y_neutral>
     596:	70 91 6a 01 	lds	r23, 0x016A	; 0x80016a <Y_neutral+0x1>
     59a:	68 17       	cp	r22, r24
     59c:	79 07       	cpc	r23, r25
     59e:	b4 f4       	brge	.+44     	; 0x5cc <get_stick_state+0xa8>
		stick_state.Y_state = (((raw_y-Y_neutral) * 100 )/ (255 - Y_neutral));
     5a0:	9c 01       	movw	r18, r24
     5a2:	26 1b       	sub	r18, r22
     5a4:	37 0b       	sbc	r19, r23
     5a6:	44 e6       	ldi	r20, 0x64	; 100
     5a8:	42 9f       	mul	r20, r18
     5aa:	c0 01       	movw	r24, r0
     5ac:	43 9f       	mul	r20, r19
     5ae:	90 0d       	add	r25, r0
     5b0:	11 24       	eor	r1, r1
     5b2:	2f ef       	ldi	r18, 0xFF	; 255
     5b4:	30 e0       	ldi	r19, 0x00	; 0
     5b6:	a9 01       	movw	r20, r18
     5b8:	46 1b       	sub	r20, r22
     5ba:	57 0b       	sbc	r21, r23
     5bc:	ba 01       	movw	r22, r20
     5be:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <__divmodhi4>
     5c2:	70 93 86 01 	sts	0x0186, r23	; 0x800186 <stick_state+0x3>
     5c6:	60 93 85 01 	sts	0x0185, r22	; 0x800185 <stick_state+0x2>
     5ca:	08 95       	ret
	}
	else {
		stick_state.Y_state = (((raw_y-Y_neutral) * 100) / (Y_neutral));
     5cc:	9c 01       	movw	r18, r24
     5ce:	26 1b       	sub	r18, r22
     5d0:	37 0b       	sbc	r19, r23
     5d2:	44 e6       	ldi	r20, 0x64	; 100
     5d4:	42 9f       	mul	r20, r18
     5d6:	c0 01       	movw	r24, r0
     5d8:	43 9f       	mul	r20, r19
     5da:	90 0d       	add	r25, r0
     5dc:	11 24       	eor	r1, r1
     5de:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <__divmodhi4>
     5e2:	70 93 86 01 	sts	0x0186, r23	; 0x800186 <stick_state+0x3>
     5e6:	60 93 85 01 	sts	0x0185, r22	; 0x800185 <stick_state+0x2>
     5ea:	08 95       	ret

000005ec <get_stick_direction>:
	}
	
}

void get_stick_direction(void){ //Checks if the output is saturated, if it is the direction is defined in an enum (0-4)
	get_stick_state();
     5ec:	0e 94 92 02 	call	0x524	; 0x524 <get_stick_state>
	//printf(" %d",stick_state.Y_state);
	//uint8_t raw_x = ADC_states[0];
	//uint8_t raw_y = ADC_states[1];
	short x_value = stick_state.X_state;
     5f0:	e3 e8       	ldi	r30, 0x83	; 131
     5f2:	f1 e0       	ldi	r31, 0x01	; 1
     5f4:	20 81       	ld	r18, Z
     5f6:	31 81       	ldd	r19, Z+1	; 0x01
	short y_value = stick_state.Y_state;
     5f8:	82 81       	ldd	r24, Z+2	; 0x02
     5fa:	93 81       	ldd	r25, Z+3	; 0x03
	if (x_value > 50) {
     5fc:	23 33       	cpi	r18, 0x33	; 51
     5fe:	31 05       	cpc	r19, r1
     600:	3c f0       	brlt	.+14     	; 0x610 <get_stick_direction+0x24>
		stick_state.X_direction = RIGHT;
     602:	23 e0       	ldi	r18, 0x03	; 3
     604:	30 e0       	ldi	r19, 0x00	; 0
     606:	30 93 88 01 	sts	0x0188, r19	; 0x800188 <stick_state+0x5>
     60a:	20 93 87 01 	sts	0x0187, r18	; 0x800187 <stick_state+0x4>
     60e:	0e c0       	rjmp	.+28     	; 0x62c <get_stick_direction+0x40>
	}
	
	else if (x_value < -50) {
     610:	2e 3c       	cpi	r18, 0xCE	; 206
     612:	3f 4f       	sbci	r19, 0xFF	; 255
     614:	3c f4       	brge	.+14     	; 0x624 <get_stick_direction+0x38>
		stick_state.X_direction = LEFT;
     616:	22 e0       	ldi	r18, 0x02	; 2
     618:	30 e0       	ldi	r19, 0x00	; 0
     61a:	30 93 88 01 	sts	0x0188, r19	; 0x800188 <stick_state+0x5>
     61e:	20 93 87 01 	sts	0x0187, r18	; 0x800187 <stick_state+0x4>
     622:	04 c0       	rjmp	.+8      	; 0x62c <get_stick_direction+0x40>
	}
	
	else {
		stick_state.X_direction = NEUTRAL;		
     624:	10 92 88 01 	sts	0x0188, r1	; 0x800188 <stick_state+0x5>
     628:	10 92 87 01 	sts	0x0187, r1	; 0x800187 <stick_state+0x4>
	}
	if (y_value > 50) {
     62c:	83 33       	cpi	r24, 0x33	; 51
     62e:	91 05       	cpc	r25, r1
     630:	3c f0       	brlt	.+14     	; 0x640 <get_stick_direction+0x54>
		stick_state.Y_direction = UP;
     632:	81 e0       	ldi	r24, 0x01	; 1
     634:	90 e0       	ldi	r25, 0x00	; 0
     636:	90 93 8a 01 	sts	0x018A, r25	; 0x80018a <stick_state+0x7>
     63a:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <stick_state+0x6>
     63e:	08 95       	ret
	}
	
	else if (y_value < -50) {
     640:	8e 3c       	cpi	r24, 0xCE	; 206
     642:	9f 4f       	sbci	r25, 0xFF	; 255
     644:	3c f4       	brge	.+14     	; 0x654 <get_stick_direction+0x68>
		stick_state.Y_direction = DOWN;
     646:	84 e0       	ldi	r24, 0x04	; 4
     648:	90 e0       	ldi	r25, 0x00	; 0
     64a:	90 93 8a 01 	sts	0x018A, r25	; 0x80018a <stick_state+0x7>
     64e:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <stick_state+0x6>
     652:	08 95       	ret
	}
	
	else {
		stick_state.Y_direction = NEUTRAL;
     654:	10 92 8a 01 	sts	0x018A, r1	; 0x80018a <stick_state+0x7>
     658:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <stick_state+0x6>
     65c:	08 95       	ret

0000065e <poll_new_readings>:
	}
}



void poll_new_readings(){
     65e:	0f 93       	push	r16
     660:	1f 93       	push	r17
     662:	cf 93       	push	r28
     664:	df 93       	push	r29
     666:	cd b7       	in	r28, 0x3d	; 61
     668:	de b7       	in	r29, 0x3e	; 62
     66a:	2a 97       	sbiw	r28, 0x0a	; 10
     66c:	0f b6       	in	r0, 0x3f	; 63
     66e:	f8 94       	cli
     670:	de bf       	out	0x3e, r29	; 62
     672:	0f be       	out	0x3f, r0	; 63
     674:	cd bf       	out	0x3d, r28	; 61
	get_stick_state();
     676:	0e 94 92 02 	call	0x524	; 0x524 <get_stick_state>
	if(previous_x != stick_state.X_state || previous_y != stick_state.Y_state || previous_right != ADC_states[2] || previous_left != ADC_states[3]){
     67a:	20 91 83 01 	lds	r18, 0x0183	; 0x800183 <stick_state>
     67e:	30 91 84 01 	lds	r19, 0x0184	; 0x800184 <stick_state+0x1>
     682:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <previous_x>
     686:	90 91 76 01 	lds	r25, 0x0176	; 0x800176 <previous_x+0x1>
     68a:	28 17       	cp	r18, r24
     68c:	39 07       	cpc	r19, r25
     68e:	09 f5       	brne	.+66     	; 0x6d2 <poll_new_readings+0x74>
     690:	40 91 85 01 	lds	r20, 0x0185	; 0x800185 <stick_state+0x2>
     694:	50 91 86 01 	lds	r21, 0x0186	; 0x800186 <stick_state+0x3>
     698:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <previous_y>
     69c:	90 91 8c 01 	lds	r25, 0x018C	; 0x80018c <previous_y+0x1>
     6a0:	48 17       	cp	r20, r24
     6a2:	59 07       	cpc	r21, r25
     6a4:	b1 f4       	brne	.+44     	; 0x6d2 <poll_new_readings+0x74>
     6a6:	40 91 91 01 	lds	r20, 0x0191	; 0x800191 <ADC_states+0x4>
     6aa:	50 91 92 01 	lds	r21, 0x0192	; 0x800192 <ADC_states+0x5>
     6ae:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <previous_right>
     6b2:	90 91 78 01 	lds	r25, 0x0178	; 0x800178 <previous_right+0x1>
     6b6:	48 17       	cp	r20, r24
     6b8:	59 07       	cpc	r21, r25
     6ba:	59 f4       	brne	.+22     	; 0x6d2 <poll_new_readings+0x74>
     6bc:	40 91 93 01 	lds	r20, 0x0193	; 0x800193 <ADC_states+0x6>
     6c0:	50 91 94 01 	lds	r21, 0x0194	; 0x800194 <ADC_states+0x7>
     6c4:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <previous_left>
     6c8:	90 91 74 01 	lds	r25, 0x0174	; 0x800174 <previous_left+0x1>
     6cc:	48 17       	cp	r20, r24
     6ce:	59 07       	cpc	r21, r25
     6d0:	f1 f0       	breq	.+60     	; 0x70e <poll_new_readings+0xb0>
		struct Can_Message can_message;
		
		can_message.id = 1;
     6d2:	81 e0       	ldi	r24, 0x01	; 1
     6d4:	89 83       	std	Y+1, r24	; 0x01
		can_message.length = 4;
     6d6:	84 e0       	ldi	r24, 0x04	; 4
     6d8:	8a 83       	std	Y+2, r24	; 0x02
		
		can_message.data[0] = stick_state.X_state + 100;
     6da:	2c 59       	subi	r18, 0x9C	; 156
     6dc:	2b 83       	std	Y+3, r18	; 0x03
		can_message.data[1] = stick_state.Y_state + 100;
     6de:	30 91 85 01 	lds	r19, 0x0185	; 0x800185 <stick_state+0x2>
     6e2:	3c 59       	subi	r19, 0x9C	; 156
     6e4:	3c 83       	std	Y+4, r19	; 0x04
		can_message.data[2] = ADC_states[2];
     6e6:	ed e8       	ldi	r30, 0x8D	; 141
     6e8:	f1 e0       	ldi	r31, 0x01	; 1
     6ea:	44 81       	ldd	r20, Z+4	; 0x04
     6ec:	4d 83       	std	Y+5, r20	; 0x05
		can_message.data[3] = ADC_states[3];
     6ee:	56 81       	ldd	r21, Z+6	; 0x06
     6f0:	5e 83       	std	Y+6, r21	; 0x06
		// CAN TEST TO NODE 2:
		CAN_write_message(can_message);
     6f2:	01 e0       	ldi	r16, 0x01	; 1
     6f4:	14 e0       	ldi	r17, 0x04	; 4
     6f6:	6f 81       	ldd	r22, Y+7	; 0x07
     6f8:	78 85       	ldd	r23, Y+8	; 0x08
     6fa:	89 85       	ldd	r24, Y+9	; 0x09
     6fc:	9a 85       	ldd	r25, Y+10	; 0x0a
     6fe:	0e 94 42 04 	call	0x884	; 0x884 <CAN_write_message>
     702:	87 ea       	ldi	r24, 0xA7	; 167
     704:	91 e6       	ldi	r25, 0x61	; 97
     706:	01 97       	sbiw	r24, 0x01	; 1
     708:	f1 f7       	brne	.-4      	; 0x706 <poll_new_readings+0xa8>
     70a:	00 c0       	rjmp	.+0      	; 0x70c <poll_new_readings+0xae>
     70c:	00 00       	nop
		_delay_ms(100);
	}
	previous_x = stick_state.X_state;
     70e:	e3 e8       	ldi	r30, 0x83	; 131
     710:	f1 e0       	ldi	r31, 0x01	; 1
     712:	80 81       	ld	r24, Z
     714:	91 81       	ldd	r25, Z+1	; 0x01
     716:	90 93 76 01 	sts	0x0176, r25	; 0x800176 <previous_x+0x1>
     71a:	80 93 75 01 	sts	0x0175, r24	; 0x800175 <previous_x>
	previous_y = stick_state.Y_state;
     71e:	82 81       	ldd	r24, Z+2	; 0x02
     720:	93 81       	ldd	r25, Z+3	; 0x03
     722:	90 93 8c 01 	sts	0x018C, r25	; 0x80018c <previous_y+0x1>
     726:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <previous_y>
	previous_right = ADC_states[2];
     72a:	ed e8       	ldi	r30, 0x8D	; 141
     72c:	f1 e0       	ldi	r31, 0x01	; 1
     72e:	84 81       	ldd	r24, Z+4	; 0x04
     730:	95 81       	ldd	r25, Z+5	; 0x05
     732:	90 93 78 01 	sts	0x0178, r25	; 0x800178 <previous_right+0x1>
     736:	80 93 77 01 	sts	0x0177, r24	; 0x800177 <previous_right>
	previous_left = ADC_states[3];
     73a:	86 81       	ldd	r24, Z+6	; 0x06
     73c:	97 81       	ldd	r25, Z+7	; 0x07
     73e:	90 93 74 01 	sts	0x0174, r25	; 0x800174 <previous_left+0x1>
     742:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <previous_left>
     746:	2a 96       	adiw	r28, 0x0a	; 10
     748:	0f b6       	in	r0, 0x3f	; 63
     74a:	f8 94       	cli
     74c:	de bf       	out	0x3e, r29	; 62
     74e:	0f be       	out	0x3f, r0	; 63
     750:	cd bf       	out	0x3d, r28	; 61
     752:	df 91       	pop	r29
     754:	cf 91       	pop	r28
     756:	1f 91       	pop	r17
     758:	0f 91       	pop	r16
     75a:	08 95       	ret

0000075c <CAN_read>:
CAN_read_status(){
	uint8_t received;
	PORTB &= ~(1 << CAN_CS ); // Select CAN - controller
	SPI_transmit( MCP_CANSTAT ); // Read status
	received = SPI_transmit(0xff);
	PORTB |= (1 << CAN_CS ); // Deselect CAN - controller
     75c:	cf 93       	push	r28
     75e:	c8 2f       	mov	r28, r24
     760:	88 b3       	in	r24, 0x18	; 24
     762:	8f 7e       	andi	r24, 0xEF	; 239
     764:	88 bb       	out	0x18, r24	; 24
     766:	83 e0       	ldi	r24, 0x03	; 3
     768:	90 e0       	ldi	r25, 0x00	; 0
     76a:	0e 94 c7 0c 	call	0x198e	; 0x198e <SPI_write>
     76e:	8c 2f       	mov	r24, r28
     770:	90 e0       	ldi	r25, 0x00	; 0
     772:	0e 94 c7 0c 	call	0x198e	; 0x198e <SPI_write>
     776:	0e 94 cb 0c 	call	0x1996	; 0x1996 <SPI_read>
     77a:	98 b3       	in	r25, 0x18	; 24
     77c:	90 61       	ori	r25, 0x10	; 16
     77e:	98 bb       	out	0x18, r25	; 24
     780:	cf 91       	pop	r28
     782:	08 95       	ret

00000784 <CAN_write>:
     784:	cf 93       	push	r28
     786:	df 93       	push	r29
     788:	d8 2f       	mov	r29, r24
     78a:	c6 2f       	mov	r28, r22
     78c:	88 b3       	in	r24, 0x18	; 24
     78e:	8f 7e       	andi	r24, 0xEF	; 239
     790:	88 bb       	out	0x18, r24	; 24
     792:	82 e0       	ldi	r24, 0x02	; 2
     794:	90 e0       	ldi	r25, 0x00	; 0
     796:	0e 94 c7 0c 	call	0x198e	; 0x198e <SPI_write>
     79a:	8d 2f       	mov	r24, r29
     79c:	90 e0       	ldi	r25, 0x00	; 0
     79e:	0e 94 c7 0c 	call	0x198e	; 0x198e <SPI_write>
     7a2:	8c 2f       	mov	r24, r28
     7a4:	90 e0       	ldi	r25, 0x00	; 0
     7a6:	0e 94 c7 0c 	call	0x198e	; 0x198e <SPI_write>
     7aa:	88 b3       	in	r24, 0x18	; 24
     7ac:	80 61       	ori	r24, 0x10	; 16
     7ae:	88 bb       	out	0x18, r24	; 24
     7b0:	df 91       	pop	r29
     7b2:	cf 91       	pop	r28
     7b4:	08 95       	ret

000007b6 <CAN_request_to_send>:
     7b6:	87 70       	andi	r24, 0x07	; 7
     7b8:	98 b3       	in	r25, 0x18	; 24
     7ba:	9f 7e       	andi	r25, 0xEF	; 239
     7bc:	98 bb       	out	0x18, r25	; 24
     7be:	80 68       	ori	r24, 0x80	; 128
     7c0:	90 e0       	ldi	r25, 0x00	; 0
     7c2:	0e 94 c7 0c 	call	0x198e	; 0x198e <SPI_write>
     7c6:	88 b3       	in	r24, 0x18	; 24
     7c8:	80 61       	ori	r24, 0x10	; 16
     7ca:	88 bb       	out	0x18, r24	; 24
     7cc:	08 95       	ret

000007ce <CAN_bit_modify>:
     7ce:	1f 93       	push	r17
     7d0:	cf 93       	push	r28
     7d2:	df 93       	push	r29
     7d4:	18 2f       	mov	r17, r24
     7d6:	d6 2f       	mov	r29, r22
     7d8:	c4 2f       	mov	r28, r20
     7da:	88 b3       	in	r24, 0x18	; 24
     7dc:	8f 7e       	andi	r24, 0xEF	; 239
     7de:	88 bb       	out	0x18, r24	; 24
     7e0:	85 e0       	ldi	r24, 0x05	; 5
     7e2:	90 e0       	ldi	r25, 0x00	; 0
     7e4:	0e 94 c7 0c 	call	0x198e	; 0x198e <SPI_write>
     7e8:	81 2f       	mov	r24, r17
     7ea:	90 e0       	ldi	r25, 0x00	; 0
     7ec:	0e 94 c7 0c 	call	0x198e	; 0x198e <SPI_write>
     7f0:	8d 2f       	mov	r24, r29
     7f2:	90 e0       	ldi	r25, 0x00	; 0
     7f4:	0e 94 c7 0c 	call	0x198e	; 0x198e <SPI_write>
     7f8:	8c 2f       	mov	r24, r28
     7fa:	90 e0       	ldi	r25, 0x00	; 0
     7fc:	0e 94 c7 0c 	call	0x198e	; 0x198e <SPI_write>
     800:	88 b3       	in	r24, 0x18	; 24
     802:	80 61       	ori	r24, 0x10	; 16
     804:	88 bb       	out	0x18, r24	; 24
     806:	df 91       	pop	r29
     808:	cf 91       	pop	r28
     80a:	1f 91       	pop	r17
     80c:	08 95       	ret

0000080e <CAN_reset>:
     80e:	88 b3       	in	r24, 0x18	; 24
     810:	8f 7e       	andi	r24, 0xEF	; 239
     812:	88 bb       	out	0x18, r24	; 24
     814:	80 ec       	ldi	r24, 0xC0	; 192
     816:	90 e0       	ldi	r25, 0x00	; 0
     818:	0e 94 c7 0c 	call	0x198e	; 0x198e <SPI_write>
     81c:	88 b3       	in	r24, 0x18	; 24
     81e:	80 61       	ori	r24, 0x10	; 16
     820:	88 bb       	out	0x18, r24	; 24
     822:	08 95       	ret

00000824 <CAN_init>:
     824:	0e 94 bd 0c 	call	0x197a	; 0x197a <SPI_init>
     828:	0e 94 07 04 	call	0x80e	; 0x80e <CAN_reset>
     82c:	8e e0       	ldi	r24, 0x0E	; 14
     82e:	0e 94 ae 03 	call	0x75c	; 0x75c <CAN_read>
     832:	80 7e       	andi	r24, 0xE0	; 224
     834:	80 38       	cpi	r24, 0x80	; 128
     836:	31 f0       	breq	.+12     	; 0x844 <CAN_init+0x20>
     838:	86 e0       	ldi	r24, 0x06	; 6
     83a:	91 e0       	ldi	r25, 0x01	; 1
     83c:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <puts>
     840:	81 e0       	ldi	r24, 0x01	; 1
     842:	08 95       	ret
     844:	43 e8       	ldi	r20, 0x83	; 131
     846:	6f ef       	ldi	r22, 0xFF	; 255
     848:	8a e2       	ldi	r24, 0x2A	; 42
     84a:	0e 94 e7 03 	call	0x7ce	; 0x7ce <CAN_bit_modify>
     84e:	49 ef       	ldi	r20, 0xF9	; 249
     850:	6f ef       	ldi	r22, 0xFF	; 255
     852:	89 e2       	ldi	r24, 0x29	; 41
     854:	0e 94 e7 03 	call	0x7ce	; 0x7ce <CAN_bit_modify>
     858:	47 e0       	ldi	r20, 0x07	; 7
     85a:	67 ec       	ldi	r22, 0xC7	; 199
     85c:	88 e2       	ldi	r24, 0x28	; 40
     85e:	0e 94 e7 03 	call	0x7ce	; 0x7ce <CAN_bit_modify>
     862:	40 e2       	ldi	r20, 0x20	; 32
     864:	60 e6       	ldi	r22, 0x60	; 96
     866:	80 e6       	ldi	r24, 0x60	; 96
     868:	0e 94 e7 03 	call	0x7ce	; 0x7ce <CAN_bit_modify>
     86c:	41 e0       	ldi	r20, 0x01	; 1
     86e:	61 e0       	ldi	r22, 0x01	; 1
     870:	8b e2       	ldi	r24, 0x2B	; 43
     872:	0e 94 e7 03 	call	0x7ce	; 0x7ce <CAN_bit_modify>
     876:	40 e0       	ldi	r20, 0x00	; 0
     878:	60 ee       	ldi	r22, 0xE0	; 224
     87a:	8f e0       	ldi	r24, 0x0F	; 15
     87c:	0e 94 e7 03 	call	0x7ce	; 0x7ce <CAN_bit_modify>
     880:	80 e0       	ldi	r24, 0x00	; 0
     882:	08 95       	ret

00000884 <CAN_write_message>:
	return received;
}

CAN_write_message(struct Can_Message message){
     884:	ff 92       	push	r15
     886:	0f 93       	push	r16
     888:	1f 93       	push	r17
     88a:	cf 93       	push	r28
     88c:	df 93       	push	r29
     88e:	cd b7       	in	r28, 0x3d	; 61
     890:	de b7       	in	r29, 0x3e	; 62
     892:	2a 97       	sbiw	r28, 0x0a	; 10
     894:	0f b6       	in	r0, 0x3f	; 63
     896:	f8 94       	cli
     898:	de bf       	out	0x3e, r29	; 62
     89a:	0f be       	out	0x3f, r0	; 63
     89c:	cd bf       	out	0x3d, r28	; 61
     89e:	09 83       	std	Y+1, r16	; 0x01
     8a0:	1a 83       	std	Y+2, r17	; 0x02
     8a2:	2b 83       	std	Y+3, r18	; 0x03
     8a4:	3c 83       	std	Y+4, r19	; 0x04
     8a6:	4d 83       	std	Y+5, r20	; 0x05
     8a8:	5e 83       	std	Y+6, r21	; 0x06
     8aa:	6f 83       	std	Y+7, r22	; 0x07
     8ac:	78 87       	std	Y+8, r23	; 0x08
     8ae:	89 87       	std	Y+9, r24	; 0x09
     8b0:	9a 87       	std	Y+10, r25	; 0x0a
	
	while ((CAN_read(MCP_TXB0CTRL) & (1<<3))){}
     8b2:	80 e3       	ldi	r24, 0x30	; 48
     8b4:	0e 94 ae 03 	call	0x75c	; 0x75c <CAN_read>
     8b8:	83 fd       	sbrc	r24, 3
     8ba:	fb cf       	rjmp	.-10     	; 0x8b2 <CAN_write_message+0x2e>
	//TODO: Send id to two register, len to one, then data, then request to send.
	CAN_write(MCP_TXB0_ID_LOW, (message.id & 0x07) << 5);
     8bc:	19 81       	ldd	r17, Y+1	; 0x01
     8be:	80 e2       	ldi	r24, 0x20	; 32
     8c0:	18 9f       	mul	r17, r24
     8c2:	b0 01       	movw	r22, r0
     8c4:	11 24       	eor	r1, r1
     8c6:	82 e3       	ldi	r24, 0x32	; 50
     8c8:	0e 94 c2 03 	call	0x784	; 0x784 <CAN_write>
	
	CAN_write(MCP_TXB0_ID_HIGH, (message.id >> 3) & 0xFF );
     8cc:	61 2f       	mov	r22, r17
     8ce:	66 95       	lsr	r22
     8d0:	66 95       	lsr	r22
     8d2:	66 95       	lsr	r22
     8d4:	81 e3       	ldi	r24, 0x31	; 49
     8d6:	0e 94 c2 03 	call	0x784	; 0x784 <CAN_write>
	
	
	//printf("%hd \r \n", (message.id << 5) & 0xFF);
	//printf("%hd \r \n", message.id >> 3);
	//printf("message length: %i \r \n", message.length);
	CAN_write(MCP_TXB0_LEN, message.length);
     8da:	fa 80       	ldd	r15, Y+2	; 0x02
     8dc:	6f 2d       	mov	r22, r15
     8de:	85 e3       	ldi	r24, 0x35	; 53
     8e0:	0e 94 c2 03 	call	0x784	; 0x784 <CAN_write>
	
	for (int i = 0; i<message.length; i++){
     8e4:	00 e0       	ldi	r16, 0x00	; 0
     8e6:	10 e0       	ldi	r17, 0x00	; 0
     8e8:	13 c0       	rjmp	.+38     	; 0x910 <CAN_write_message+0x8c>
		CAN_write(MCP_TXB0_DATA + i, message.data[i]);
     8ea:	e3 e0       	ldi	r30, 0x03	; 3
     8ec:	f0 e0       	ldi	r31, 0x00	; 0
     8ee:	ec 0f       	add	r30, r28
     8f0:	fd 1f       	adc	r31, r29
     8f2:	e0 0f       	add	r30, r16
     8f4:	f1 1f       	adc	r31, r17
     8f6:	60 81       	ld	r22, Z
     8f8:	86 e3       	ldi	r24, 0x36	; 54
     8fa:	80 0f       	add	r24, r16
     8fc:	0e 94 c2 03 	call	0x784	; 0x784 <CAN_write>
     900:	83 ec       	ldi	r24, 0xC3	; 195
     902:	99 e0       	ldi	r25, 0x09	; 9
     904:	01 97       	sbiw	r24, 0x01	; 1
     906:	f1 f7       	brne	.-4      	; 0x904 <CAN_write_message+0x80>
     908:	00 c0       	rjmp	.+0      	; 0x90a <CAN_write_message+0x86>
     90a:	00 00       	nop
	//printf("%hd \r \n", (message.id << 5) & 0xFF);
	//printf("%hd \r \n", message.id >> 3);
	//printf("message length: %i \r \n", message.length);
	CAN_write(MCP_TXB0_LEN, message.length);
	
	for (int i = 0; i<message.length; i++){
     90c:	0f 5f       	subi	r16, 0xFF	; 255
     90e:	1f 4f       	sbci	r17, 0xFF	; 255
     910:	8f 2d       	mov	r24, r15
     912:	90 e0       	ldi	r25, 0x00	; 0
     914:	08 17       	cp	r16, r24
     916:	19 07       	cpc	r17, r25
     918:	44 f3       	brlt	.-48     	; 0x8ea <CAN_write_message+0x66>
		CAN_write(MCP_TXB0_DATA + i, message.data[i]);
		_delay_ms(10);
	}
	CAN_request_to_send(0x1);
     91a:	81 e0       	ldi	r24, 0x01	; 1
     91c:	0e 94 db 03 	call	0x7b6	; 0x7b6 <CAN_request_to_send>
	
}
     920:	2a 96       	adiw	r28, 0x0a	; 10
     922:	0f b6       	in	r0, 0x3f	; 63
     924:	f8 94       	cli
     926:	de bf       	out	0x3e, r29	; 62
     928:	0f be       	out	0x3f, r0	; 63
     92a:	cd bf       	out	0x3d, r28	; 61
     92c:	df 91       	pop	r29
     92e:	cf 91       	pop	r28
     930:	1f 91       	pop	r17
     932:	0f 91       	pop	r16
     934:	ff 90       	pop	r15
     936:	08 95       	ret

00000938 <CAN_read_message>:

struct Can_Message CAN_read_message(){
     938:	ff 92       	push	r15
     93a:	0f 93       	push	r16
     93c:	1f 93       	push	r17
     93e:	cf 93       	push	r28
     940:	df 93       	push	r29
     942:	8c 01       	movw	r16, r24
     944:	83 ec       	ldi	r24, 0xC3	; 195
     946:	99 e0       	ldi	r25, 0x09	; 9
     948:	01 97       	sbiw	r24, 0x01	; 1
     94a:	f1 f7       	brne	.-4      	; 0x948 <CAN_read_message+0x10>
     94c:	00 c0       	rjmp	.+0      	; 0x94e <CAN_read_message+0x16>
     94e:	00 00       	nop
	
	
	struct Can_Message recieved_message;
	
	_delay_ms(10);
	recieved_message.length = CAN_read(MCP_RXB0_LEN) & 0x0F ;
     950:	85 e6       	ldi	r24, 0x65	; 101
     952:	0e 94 ae 03 	call	0x75c	; 0x75c <CAN_read>
     956:	8f 70       	andi	r24, 0x0F	; 15
     958:	f8 2e       	mov	r15, r24
     95a:	f8 01       	movw	r30, r16
     95c:	81 83       	std	Z+1, r24	; 0x01
     95e:	83 ec       	ldi	r24, 0xC3	; 195
     960:	99 e0       	ldi	r25, 0x09	; 9
     962:	01 97       	sbiw	r24, 0x01	; 1
     964:	f1 f7       	brne	.-4      	; 0x962 <CAN_read_message+0x2a>
     966:	00 c0       	rjmp	.+0      	; 0x968 <CAN_read_message+0x30>
     968:	00 00       	nop
	//recieved_message.length = CAN_read(MCP_RXB0_LEN) & 0x0F;
	
	_delay_ms(10);
	recieved_message.id = ((CAN_read(MCP_RXB0_ID_HIGH) << 3) | (CAN_read(MCP_RXB0_ID_LOW) >> 5)) & 0xFF;
     96a:	81 e6       	ldi	r24, 0x61	; 97
     96c:	0e 94 ae 03 	call	0x75c	; 0x75c <CAN_read>
     970:	c8 2f       	mov	r28, r24
     972:	d0 e0       	ldi	r29, 0x00	; 0
     974:	cc 0f       	add	r28, r28
     976:	dd 1f       	adc	r29, r29
     978:	cc 0f       	add	r28, r28
     97a:	dd 1f       	adc	r29, r29
     97c:	cc 0f       	add	r28, r28
     97e:	dd 1f       	adc	r29, r29
     980:	82 e6       	ldi	r24, 0x62	; 98
     982:	0e 94 ae 03 	call	0x75c	; 0x75c <CAN_read>
     986:	82 95       	swap	r24
     988:	86 95       	lsr	r24
     98a:	87 70       	andi	r24, 0x07	; 7
     98c:	c8 2b       	or	r28, r24
     98e:	f8 01       	movw	r30, r16
     990:	c0 83       	st	Z, r28
	//printf("received length: %x \n", recieved_message.length);
	
	for (int i = 0; i<recieved_message.length; i++){
     992:	c0 e0       	ldi	r28, 0x00	; 0
     994:	d0 e0       	ldi	r29, 0x00	; 0
     996:	0f c0       	rjmp	.+30     	; 0x9b6 <CAN_read_message+0x7e>
		recieved_message.data[i] = CAN_read(MCP_RXB0_DATA + i);
     998:	8c 2f       	mov	r24, r28
     99a:	8a 59       	subi	r24, 0x9A	; 154
     99c:	0e 94 ae 03 	call	0x75c	; 0x75c <CAN_read>
     9a0:	f8 01       	movw	r30, r16
     9a2:	ec 0f       	add	r30, r28
     9a4:	fd 1f       	adc	r31, r29
     9a6:	82 83       	std	Z+2, r24	; 0x02
     9a8:	83 ec       	ldi	r24, 0xC3	; 195
     9aa:	99 e0       	ldi	r25, 0x09	; 9
     9ac:	01 97       	sbiw	r24, 0x01	; 1
     9ae:	f1 f7       	brne	.-4      	; 0x9ac <CAN_read_message+0x74>
     9b0:	00 c0       	rjmp	.+0      	; 0x9b2 <CAN_read_message+0x7a>
     9b2:	00 00       	nop
	
	_delay_ms(10);
	recieved_message.id = ((CAN_read(MCP_RXB0_ID_HIGH) << 3) | (CAN_read(MCP_RXB0_ID_LOW) >> 5)) & 0xFF;
	//printf("received length: %x \n", recieved_message.length);
	
	for (int i = 0; i<recieved_message.length; i++){
     9b4:	21 96       	adiw	r28, 0x01	; 1
     9b6:	8f 2d       	mov	r24, r15
     9b8:	90 e0       	ldi	r25, 0x00	; 0
     9ba:	c8 17       	cp	r28, r24
     9bc:	d9 07       	cpc	r29, r25
     9be:	64 f3       	brlt	.-40     	; 0x998 <CAN_read_message+0x60>
		recieved_message.data[i] = CAN_read(MCP_RXB0_DATA + i);
		_delay_ms(10);
	}
	
	CAN_bit_modify(MCP_CANINTF, 0x01, 0x00);
     9c0:	40 e0       	ldi	r20, 0x00	; 0
     9c2:	61 e0       	ldi	r22, 0x01	; 1
     9c4:	8c e2       	ldi	r24, 0x2C	; 44
     9c6:	0e 94 e7 03 	call	0x7ce	; 0x7ce <CAN_bit_modify>

	
	return recieved_message;
     9ca:	c8 01       	movw	r24, r16
     9cc:	df 91       	pop	r29
     9ce:	cf 91       	pop	r28
     9d0:	1f 91       	pop	r17
     9d2:	0f 91       	pop	r16
     9d4:	ff 90       	pop	r15
     9d6:	08 95       	ret

000009d8 <USART_Init>:
     9d8:	9c bf       	out	0x3c, r25	; 60
     9da:	80 b9       	out	0x00, r24	; 0
     9dc:	88 e1       	ldi	r24, 0x18	; 24
     9de:	81 b9       	out	0x01, r24	; 1
     9e0:	8e e8       	ldi	r24, 0x8E	; 142
     9e2:	8c bf       	out	0x3c, r24	; 60
     9e4:	08 95       	ret

000009e6 <USART_Transmit>:
     9e6:	15 9b       	sbis	0x02, 5	; 2
     9e8:	fe cf       	rjmp	.-4      	; 0x9e6 <USART_Transmit>
     9ea:	83 b9       	out	0x03, r24	; 3
     9ec:	08 95       	ret

000009ee <USART_Receive>:
     9ee:	17 9b       	sbis	0x02, 7	; 2
     9f0:	fe cf       	rjmp	.-4      	; 0x9ee <USART_Receive>
     9f2:	83 b1       	in	r24, 0x03	; 3
     9f4:	08 95       	ret

000009f6 <start_game>:

#include "ADC.h"
#include "Game.h"
//#include "Menu.h"

void start_game(){
     9f6:	0f 93       	push	r16
     9f8:	1f 93       	push	r17
     9fa:	cf 93       	push	r28
     9fc:	df 93       	push	r29
     9fe:	cd b7       	in	r28, 0x3d	; 61
     a00:	de b7       	in	r29, 0x3e	; 62
     a02:	2a 97       	sbiw	r28, 0x0a	; 10
     a04:	0f b6       	in	r0, 0x3f	; 63
     a06:	f8 94       	cli
     a08:	de bf       	out	0x3e, r29	; 62
     a0a:	0f be       	out	0x3f, r0	; 63
     a0c:	cd bf       	out	0x3d, r28	; 61
	
	score1 = 0;
     a0e:	10 92 96 01 	sts	0x0196, r1	; 0x800196 <score1>
	game_time = 0;
     a12:	10 92 95 01 	sts	0x0195, r1	; 0x800195 <game_time>
	struct Can_Message Game_start_message;
	Game_start_message.data[0] = game_mode1;
     a16:	20 91 9a 01 	lds	r18, 0x019A	; 0x80019a <game_mode1>
	Game_start_message.data[1] = controller_setting;
     a1a:	30 91 97 01 	lds	r19, 0x0197	; 0x800197 <controller_setting>
	Game_start_message.data[2] = difficulty;
     a1e:	40 91 99 01 	lds	r20, 0x0199	; 0x800199 <difficulty>
	Game_start_message.length = 3;
	Game_start_message.id = 3;
	CAN_write_message(Game_start_message);
     a22:	03 e0       	ldi	r16, 0x03	; 3
     a24:	13 e0       	ldi	r17, 0x03	; 3
     a26:	5e 81       	ldd	r21, Y+6	; 0x06
     a28:	6f 81       	ldd	r22, Y+7	; 0x07
     a2a:	78 85       	ldd	r23, Y+8	; 0x08
     a2c:	89 85       	ldd	r24, Y+9	; 0x09
     a2e:	9a 85       	ldd	r25, Y+10	; 0x0a
     a30:	0e 94 42 04 	call	0x884	; 0x884 <CAN_write_message>
	//printf("%d ", game_mode1);
	//printf("%d ", controller_setting);
	//printf("%d ", difficulty);
	
	if (game_mode1 == 0){
     a34:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <game_mode1>
     a38:	81 11       	cpse	r24, r1
     a3a:	03 c0       	rjmp	.+6      	; 0xa42 <start_game+0x4c>
		Standard_mode_Menu();
     a3c:	0e 94 a7 0a 	call	0x154e	; 0x154e <Standard_mode_Menu>
     a40:	02 c0       	rjmp	.+4      	; 0xa46 <start_game+0x50>
	}
	else{
		Arcade_mode_Menu();
     a42:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <Arcade_mode_Menu>
	}
}
     a46:	2a 96       	adiw	r28, 0x0a	; 10
     a48:	0f b6       	in	r0, 0x3f	; 63
     a4a:	f8 94       	cli
     a4c:	de bf       	out	0x3e, r29	; 62
     a4e:	0f be       	out	0x3f, r0	; 63
     a50:	cd bf       	out	0x3d, r28	; 61
     a52:	df 91       	pop	r29
     a54:	cf 91       	pop	r28
     a56:	1f 91       	pop	r17
     a58:	0f 91       	pop	r16
     a5a:	08 95       	ret

00000a5c <game_loss>:


void game_loss(){
     a5c:	0f 93       	push	r16
     a5e:	1f 93       	push	r17
     a60:	cf 93       	push	r28
     a62:	df 93       	push	r29
     a64:	cd b7       	in	r28, 0x3d	; 61
     a66:	de b7       	in	r29, 0x3e	; 62
     a68:	2a 97       	sbiw	r28, 0x0a	; 10
     a6a:	0f b6       	in	r0, 0x3f	; 63
     a6c:	f8 94       	cli
     a6e:	de bf       	out	0x3e, r29	; 62
     a70:	0f be       	out	0x3f, r0	; 63
     a72:	cd bf       	out	0x3d, r28	; 61
	struct Can_Message Game_stop_message;
	Game_stop_message.id = 4;
	Game_stop_message.length = 1;
	Game_stop_message.data[0] = 0;
	CAN_write_message(Game_stop_message);	
     a74:	04 e0       	ldi	r16, 0x04	; 4
     a76:	11 e0       	ldi	r17, 0x01	; 1
     a78:	20 e0       	ldi	r18, 0x00	; 0
     a7a:	3c 81       	ldd	r19, Y+4	; 0x04
     a7c:	4d 81       	ldd	r20, Y+5	; 0x05
     a7e:	5e 81       	ldd	r21, Y+6	; 0x06
     a80:	6f 81       	ldd	r22, Y+7	; 0x07
     a82:	78 85       	ldd	r23, Y+8	; 0x08
     a84:	89 85       	ldd	r24, Y+9	; 0x09
     a86:	9a 85       	ldd	r25, Y+10	; 0x0a
     a88:	0e 94 42 04 	call	0x884	; 0x884 <CAN_write_message>
}
     a8c:	2a 96       	adiw	r28, 0x0a	; 10
     a8e:	0f b6       	in	r0, 0x3f	; 63
     a90:	f8 94       	cli
     a92:	de bf       	out	0x3e, r29	; 62
     a94:	0f be       	out	0x3f, r0	; 63
     a96:	cd bf       	out	0x3d, r28	; 61
     a98:	df 91       	pop	r29
     a9a:	cf 91       	pop	r28
     a9c:	1f 91       	pop	r17
     a9e:	0f 91       	pop	r16
     aa0:	08 95       	ret

00000aa2 <game_stop>:

void game_stop(uint8_t mode, uint8_t score){
     aa2:	cf 93       	push	r28
     aa4:	c6 2f       	mov	r28, r22
	
	in_game = 0;
     aa6:	10 92 98 01 	sts	0x0198, r1	; 0x800198 <in_game>
	Game_Over_Menu();
     aaa:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <Game_Over_Menu>
	
	if (game_mode1 == 0){
     aae:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <game_mode1>
     ab2:	81 11       	cpse	r24, r1
     ab4:	10 c0       	rjmp	.+32     	; 0xad6 <game_stop+0x34>
		//printf("LOST GAME1");
		OLED_go_to_pos(2, 0);
     ab6:	60 e0       	ldi	r22, 0x00	; 0
     ab8:	70 e0       	ldi	r23, 0x00	; 0
     aba:	82 e0       	ldi	r24, 0x02	; 2
     abc:	90 e0       	ldi	r25, 0x00	; 0
     abe:	0e 94 01 0c 	call	0x1802	; 0x1802 <OLED_go_to_pos>
		OLED_printf( "Score:");
     ac2:	8a e3       	ldi	r24, 0x3A	; 58
     ac4:	91 e0       	ldi	r25, 0x01	; 1
     ac6:	0e 94 45 0c 	call	0x188a	; 0x188a <OLED_printf>
		OLED_print_num(score-2);
     aca:	8c 2f       	mov	r24, r28
     acc:	90 e0       	ldi	r25, 0x00	; 0
     ace:	02 97       	sbiw	r24, 0x02	; 2
     ad0:	0e 94 2a 0c 	call	0x1854	; 0x1854 <OLED_print_num>
     ad4:	0e c0       	rjmp	.+28     	; 0xaf2 <game_stop+0x50>
	}
	else{
		//PRINT TIMER
		//printf("LOST GAME2");
		//printf("%d ", mode);
		OLED_go_to_pos(2, 0);
     ad6:	60 e0       	ldi	r22, 0x00	; 0
     ad8:	70 e0       	ldi	r23, 0x00	; 0
     ada:	82 e0       	ldi	r24, 0x02	; 2
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	0e 94 01 0c 	call	0x1802	; 0x1802 <OLED_go_to_pos>
		OLED_printf( "Time:");
     ae2:	81 e4       	ldi	r24, 0x41	; 65
     ae4:	91 e0       	ldi	r25, 0x01	; 1
     ae6:	0e 94 45 0c 	call	0x188a	; 0x188a <OLED_printf>
		OLED_print_c('?');
     aea:	8f e3       	ldi	r24, 0x3F	; 63
     aec:	90 e0       	ldi	r25, 0x00	; 0
     aee:	0e 94 0f 0c 	call	0x181e	; 0x181e <OLED_print_c>
	}
}
     af2:	cf 91       	pop	r28
     af4:	08 95       	ret

00000af6 <update_game_score>:
void update_game_score(uint8_t score){
     af6:	cf 93       	push	r28
     af8:	c8 2f       	mov	r28, r24
	
	//printf("%d \r \n", score);
	if (game_mode1 == 0) {
     afa:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <game_mode1>
     afe:	81 11       	cpse	r24, r1
     b00:	10 c0       	rjmp	.+32     	; 0xb22 <update_game_score+0x2c>
		if (score < 9) {
     b02:	c9 30       	cpi	r28, 0x09	; 9
     b04:	60 f4       	brcc	.+24     	; 0xb1e <update_game_score+0x28>
		OLED_go_to_pos(2, 50);
     b06:	62 e3       	ldi	r22, 0x32	; 50
     b08:	70 e0       	ldi	r23, 0x00	; 0
     b0a:	82 e0       	ldi	r24, 0x02	; 2
     b0c:	90 e0       	ldi	r25, 0x00	; 0
     b0e:	0e 94 01 0c 	call	0x1802	; 0x1802 <OLED_go_to_pos>
		OLED_print_num(score-2);
     b12:	8c 2f       	mov	r24, r28
     b14:	90 e0       	ldi	r25, 0x00	; 0
     b16:	02 97       	sbiw	r24, 0x02	; 2
     b18:	0e 94 2a 0c 	call	0x1854	; 0x1854 <OLED_print_num>
     b1c:	02 c0       	rjmp	.+4      	; 0xb22 <update_game_score+0x2c>
		}
		else{
		game_loss();
     b1e:	0e 94 2e 05 	call	0xa5c	; 0xa5c <game_loss>
		}
	}
	if (game_mode1 == 1) {
     b22:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <game_mode1>
     b26:	81 30       	cpi	r24, 0x01	; 1
     b28:	11 f4       	brne	.+4      	; 0xb2e <update_game_score+0x38>
		
		game_loss();
     b2a:	0e 94 2e 05 	call	0xa5c	; 0xa5c <game_loss>
	}
     b2e:	cf 91       	pop	r28
     b30:	08 95       	ret

00000b32 <interrupt_init>:
#include <stdio.h>
#include <avr/interrupt.h>

void interrupt_init(void){
	
	cli();
     b32:	f8 94       	cli
	
	DDRD &= ~(1 << PIND)|(1 << PIND); //Set port to input
     b34:	20 b3       	in	r18, 0x10	; 16
     b36:	81 e0       	ldi	r24, 0x01	; 1
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	ac 01       	movw	r20, r24
     b3c:	02 c0       	rjmp	.+4      	; 0xb42 <interrupt_init+0x10>
     b3e:	44 0f       	add	r20, r20
     b40:	55 1f       	adc	r21, r21
     b42:	2a 95       	dec	r18
     b44:	e2 f7       	brpl	.-8      	; 0xb3e <interrupt_init+0xc>
     b46:	9a 01       	movw	r18, r20
     b48:	20 95       	com	r18
     b4a:	30 95       	com	r19
     b4c:	40 b3       	in	r20, 0x10	; 16
     b4e:	02 c0       	rjmp	.+4      	; 0xb54 <interrupt_init+0x22>
     b50:	88 0f       	add	r24, r24
     b52:	99 1f       	adc	r25, r25
     b54:	4a 95       	dec	r20
     b56:	e2 f7       	brpl	.-8      	; 0xb50 <interrupt_init+0x1e>
     b58:	82 2b       	or	r24, r18
     b5a:	93 2b       	or	r25, r19
     b5c:	91 b3       	in	r25, 0x11	; 17
     b5e:	89 23       	and	r24, r25
     b60:	81 bb       	out	0x11, r24	; 17
	DDRE &= ~(1 << PINE0);
     b62:	86 b1       	in	r24, 0x06	; 6
     b64:	8e 7f       	andi	r24, 0xFE	; 254
     b66:	86 b9       	out	0x06, r24	; 6
	PORTE |= (1 << PINE0); // Internal pull up
     b68:	87 b1       	in	r24, 0x07	; 7
     b6a:	81 60       	ori	r24, 0x01	; 1
     b6c:	87 b9       	out	0x07, r24	; 7
	
	MCUCR |= (1 << SRE ); // enable XMEM
     b6e:	85 b7       	in	r24, 0x35	; 53
     b70:	80 68       	ori	r24, 0x80	; 128
     b72:	85 bf       	out	0x35, r24	; 53
	MCUCR |= (1 << ISC11)|(1 << ISC10)|(1 << ISC01)|(1 << ISC00); //Sets the interrupt at positive flank
     b74:	85 b7       	in	r24, 0x35	; 53
     b76:	8f 60       	ori	r24, 0x0F	; 15
     b78:	85 bf       	out	0x35, r24	; 53
	EMCUCR |= (0 << ISC2); // Rising edge on INT2
     b7a:	86 b7       	in	r24, 0x36	; 54
     b7c:	86 bf       	out	0x36, r24	; 54
	GICR |= (1 << INT0)|(1 << INT1)|(1 << INT2); //Enables the interrupt
     b7e:	8b b7       	in	r24, 0x3b	; 59
     b80:	80 6e       	ori	r24, 0xE0	; 224
     b82:	8b bf       	out	0x3b, r24	; 59
	
	
	sei();
     b84:	78 94       	sei
     b86:	08 95       	ret

00000b88 <__vector_1>:
// #define different id values

struct Can_Message can_message_buttons;


ISR(INT0_vect){
     b88:	1f 92       	push	r1
     b8a:	0f 92       	push	r0
     b8c:	0f b6       	in	r0, 0x3f	; 63
     b8e:	0f 92       	push	r0
     b90:	11 24       	eor	r1, r1
     b92:	2f 93       	push	r18
     b94:	3f 93       	push	r19
     b96:	4f 93       	push	r20
     b98:	5f 93       	push	r21
     b9a:	6f 93       	push	r22
     b9c:	7f 93       	push	r23
     b9e:	8f 93       	push	r24
     ba0:	9f 93       	push	r25
     ba2:	af 93       	push	r26
     ba4:	bf 93       	push	r27
     ba6:	ef 93       	push	r30
     ba8:	ff 93       	push	r31
	printf("\r\nRight button\r\n");
     baa:	87 e4       	ldi	r24, 0x47	; 71
     bac:	91 e0       	ldi	r25, 0x01	; 1
     bae:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <puts>

	right_button = 1;
     bb2:	81 e0       	ldi	r24, 0x01	; 1
     bb4:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <right_button>
	
	//Change_page();
	//OLED_reset();
	//Game_Modes_Menu();
	//_delay_ms(100);
}
     bb8:	ff 91       	pop	r31
     bba:	ef 91       	pop	r30
     bbc:	bf 91       	pop	r27
     bbe:	af 91       	pop	r26
     bc0:	9f 91       	pop	r25
     bc2:	8f 91       	pop	r24
     bc4:	7f 91       	pop	r23
     bc6:	6f 91       	pop	r22
     bc8:	5f 91       	pop	r21
     bca:	4f 91       	pop	r20
     bcc:	3f 91       	pop	r19
     bce:	2f 91       	pop	r18
     bd0:	0f 90       	pop	r0
     bd2:	0f be       	out	0x3f, r0	; 63
     bd4:	0f 90       	pop	r0
     bd6:	1f 90       	pop	r1
     bd8:	18 95       	reti

00000bda <__vector_2>:
ISR(INT1_vect){
     bda:	1f 92       	push	r1
     bdc:	0f 92       	push	r0
     bde:	0f b6       	in	r0, 0x3f	; 63
     be0:	0f 92       	push	r0
     be2:	11 24       	eor	r1, r1
     be4:	0f 93       	push	r16
     be6:	1f 93       	push	r17
     be8:	2f 93       	push	r18
     bea:	3f 93       	push	r19
     bec:	4f 93       	push	r20
     bee:	5f 93       	push	r21
     bf0:	6f 93       	push	r22
     bf2:	7f 93       	push	r23
     bf4:	8f 93       	push	r24
     bf6:	9f 93       	push	r25
     bf8:	af 93       	push	r26
     bfa:	bf 93       	push	r27
     bfc:	ef 93       	push	r30
     bfe:	ff 93       	push	r31
	printf("\r\nLeft button\r\n");
     c00:	87 e5       	ldi	r24, 0x57	; 87
     c02:	91 e0       	ldi	r25, 0x01	; 1
     c04:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <puts>
	if(in_game){
     c08:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <in_game>
     c0c:	88 23       	and	r24, r24
     c0e:	c9 f0       	breq	.+50     	; 0xc42 <__vector_2+0x68>
		can_message_buttons.data[0] = 1;
     c10:	81 e0       	ldi	r24, 0x01	; 1
     c12:	28 2f       	mov	r18, r24
     c14:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <can_message_buttons+0x2>
		CAN_write_message(can_message_buttons);
     c18:	00 91 9b 01 	lds	r16, 0x019B	; 0x80019b <can_message_buttons>
     c1c:	10 91 9c 01 	lds	r17, 0x019C	; 0x80019c <can_message_buttons+0x1>
     c20:	30 91 9e 01 	lds	r19, 0x019E	; 0x80019e <can_message_buttons+0x3>
     c24:	40 91 9f 01 	lds	r20, 0x019F	; 0x80019f <can_message_buttons+0x4>
     c28:	50 91 a0 01 	lds	r21, 0x01A0	; 0x8001a0 <can_message_buttons+0x5>
     c2c:	60 91 a1 01 	lds	r22, 0x01A1	; 0x8001a1 <can_message_buttons+0x6>
     c30:	70 91 a2 01 	lds	r23, 0x01A2	; 0x8001a2 <can_message_buttons+0x7>
     c34:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <can_message_buttons+0x8>
     c38:	90 91 a4 01 	lds	r25, 0x01A4	; 0x8001a4 <can_message_buttons+0x9>
     c3c:	0e 94 42 04 	call	0x884	; 0x884 <CAN_write_message>
     c40:	03 c0       	rjmp	.+6      	; 0xc48 <__vector_2+0x6e>
	}
	else{
		left_button = 1;
     c42:	81 e0       	ldi	r24, 0x01	; 1
     c44:	80 93 67 01 	sts	0x0167, r24	; 0x800167 <left_button>
	}
}
     c48:	ff 91       	pop	r31
     c4a:	ef 91       	pop	r30
     c4c:	bf 91       	pop	r27
     c4e:	af 91       	pop	r26
     c50:	9f 91       	pop	r25
     c52:	8f 91       	pop	r24
     c54:	7f 91       	pop	r23
     c56:	6f 91       	pop	r22
     c58:	5f 91       	pop	r21
     c5a:	4f 91       	pop	r20
     c5c:	3f 91       	pop	r19
     c5e:	2f 91       	pop	r18
     c60:	1f 91       	pop	r17
     c62:	0f 91       	pop	r16
     c64:	0f 90       	pop	r0
     c66:	0f be       	out	0x3f, r0	; 63
     c68:	0f 90       	pop	r0
     c6a:	1f 90       	pop	r1
     c6c:	18 95       	reti

00000c6e <__vector_3>:
ISR(INT2_vect){
     c6e:	1f 92       	push	r1
     c70:	0f 92       	push	r0
     c72:	0f b6       	in	r0, 0x3f	; 63
     c74:	0f 92       	push	r0
     c76:	11 24       	eor	r1, r1
     c78:	ff 92       	push	r15
     c7a:	0f 93       	push	r16
     c7c:	1f 93       	push	r17
     c7e:	2f 93       	push	r18
     c80:	3f 93       	push	r19
     c82:	4f 93       	push	r20
     c84:	5f 93       	push	r21
     c86:	6f 93       	push	r22
     c88:	7f 93       	push	r23
     c8a:	8f 93       	push	r24
     c8c:	9f 93       	push	r25
     c8e:	af 93       	push	r26
     c90:	bf 93       	push	r27
     c92:	ef 93       	push	r30
     c94:	ff 93       	push	r31
     c96:	cf 93       	push	r28
     c98:	df 93       	push	r29
     c9a:	cd b7       	in	r28, 0x3d	; 61
     c9c:	de b7       	in	r29, 0x3e	; 62
     c9e:	2a 97       	sbiw	r28, 0x0a	; 10
     ca0:	de bf       	out	0x3e, r29	; 62
     ca2:	cd bf       	out	0x3d, r28	; 61
     ca4:	87 ea       	ldi	r24, 0xA7	; 167
     ca6:	91 e6       	ldi	r25, 0x61	; 97
     ca8:	01 97       	sbiw	r24, 0x01	; 1
     caa:	f1 f7       	brne	.-4      	; 0xca8 <__vector_3+0x3a>
     cac:	00 c0       	rjmp	.+0      	; 0xcae <__vector_3+0x40>
     cae:	00 00       	nop
	//printf("\r\n Element %u", OLED_contents.menu_index);
	
	_delay_ms(100);
	struct Can_Message rec_message = CAN_read_message();
     cb0:	ce 01       	movw	r24, r28
     cb2:	01 96       	adiw	r24, 0x01	; 1
     cb4:	0e 94 9c 04 	call	0x938	; 0x938 <CAN_read_message>
			//printf("DATA: %i \r \n", rec_message.data[i]);
	//		_delay_ms(10);
	//	}
	//}
	
	if ((rec_message.id == 4) & (rec_message.data[0] == 1)){
     cb8:	09 81       	ldd	r16, Y+1	; 0x01
     cba:	fb 80       	ldd	r15, Y+3	; 0x03
     cbc:	91 e0       	ldi	r25, 0x01	; 1
     cbe:	04 30       	cpi	r16, 0x04	; 4
     cc0:	09 f0       	breq	.+2      	; 0xcc4 <__vector_3+0x56>
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	81 e0       	ldi	r24, 0x01	; 1
     cc6:	f8 12       	cpse	r15, r24
     cc8:	80 e0       	ldi	r24, 0x00	; 0
     cca:	89 23       	and	r24, r25
     ccc:	19 f0       	breq	.+6      	; 0xcd4 <__vector_3+0x66>
		in_game = 1;
     cce:	81 e0       	ldi	r24, 0x01	; 1
     cd0:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <in_game>
	}
	if ((rec_message.id == 5) & (rec_message.length > 0)){
     cd4:	8a 81       	ldd	r24, Y+2	; 0x02
     cd6:	11 e0       	ldi	r17, 0x01	; 1
     cd8:	81 11       	cpse	r24, r1
     cda:	01 c0       	rjmp	.+2      	; 0xcde <__vector_3+0x70>
     cdc:	10 e0       	ldi	r17, 0x00	; 0
     cde:	81 e0       	ldi	r24, 0x01	; 1
     ce0:	05 30       	cpi	r16, 0x05	; 5
     ce2:	09 f0       	breq	.+2      	; 0xce6 <__vector_3+0x78>
     ce4:	80 e0       	ldi	r24, 0x00	; 0
     ce6:	81 23       	and	r24, r17
     ce8:	19 f0       	breq	.+6      	; 0xcf0 <__vector_3+0x82>
		update_game_score(rec_message.data[0]);
     cea:	8f 2d       	mov	r24, r15
     cec:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <update_game_score>
	}
	if ((rec_message.id == 6) & (rec_message.length > 0)){
     cf0:	81 e0       	ldi	r24, 0x01	; 1
     cf2:	06 30       	cpi	r16, 0x06	; 6
     cf4:	09 f0       	breq	.+2      	; 0xcf8 <__vector_3+0x8a>
     cf6:	80 e0       	ldi	r24, 0x00	; 0
     cf8:	18 23       	and	r17, r24
     cfa:	31 f0       	breq	.+12     	; 0xd08 <__vector_3+0x9a>
		
		game_stop(rec_message.data[0], rec_message.data[1]);
     cfc:	6c 81       	ldd	r22, Y+4	; 0x04
     cfe:	70 e0       	ldi	r23, 0x00	; 0
     d00:	8f 2d       	mov	r24, r15
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	0e 94 51 05 	call	0xaa2	; 0xaa2 <game_stop>
	}
	
}
     d08:	2a 96       	adiw	r28, 0x0a	; 10
     d0a:	0f b6       	in	r0, 0x3f	; 63
     d0c:	f8 94       	cli
     d0e:	de bf       	out	0x3e, r29	; 62
     d10:	0f be       	out	0x3f, r0	; 63
     d12:	cd bf       	out	0x3d, r28	; 61
     d14:	df 91       	pop	r29
     d16:	cf 91       	pop	r28
     d18:	ff 91       	pop	r31
     d1a:	ef 91       	pop	r30
     d1c:	bf 91       	pop	r27
     d1e:	af 91       	pop	r26
     d20:	9f 91       	pop	r25
     d22:	8f 91       	pop	r24
     d24:	7f 91       	pop	r23
     d26:	6f 91       	pop	r22
     d28:	5f 91       	pop	r21
     d2a:	4f 91       	pop	r20
     d2c:	3f 91       	pop	r19
     d2e:	2f 91       	pop	r18
     d30:	1f 91       	pop	r17
     d32:	0f 91       	pop	r16
     d34:	ff 90       	pop	r15
     d36:	0f 90       	pop	r0
     d38:	0f be       	out	0x3f, r0	; 63
     d3a:	0f 90       	pop	r0
     d3c:	1f 90       	pop	r1
     d3e:	18 95       	reti

00000d40 <main>:


int main(void)
{

	USART_Init(31);
     d40:	8f e1       	ldi	r24, 0x1F	; 31
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <USART_Init>
	fdevopen(USART_Transmit, USART_Receive);
     d48:	67 ef       	ldi	r22, 0xF7	; 247
     d4a:	74 e0       	ldi	r23, 0x04	; 4
     d4c:	83 ef       	ldi	r24, 0xF3	; 243
     d4e:	94 e0       	ldi	r25, 0x04	; 4
     d50:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <fdevopen>
	adc_init();
     d54:	0e 94 41 02 	call	0x482	; 0x482 <adc_init>
	interrupt_init();
     d58:	0e 94 99 05 	call	0xb32	; 0xb32 <interrupt_init>
	
	SFIOR |= (1 << XMM0 ); // mask unused bits for DATABUS
     d5c:	80 b7       	in	r24, 0x30	; 48
     d5e:	88 60       	ori	r24, 0x08	; 8
     d60:	80 bf       	out	0x30, r24	; 48
	
	adc_calibrate();
     d62:	0e 94 67 02 	call	0x4ce	; 0x4ce <adc_calibrate>
	OLED_init();
     d66:	0e 94 aa 0b 	call	0x1754	; 0x1754 <OLED_init>
	OLED_reset();
     d6a:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <OLED_reset>
	
	CAN_init();
     d6e:	0e 94 12 04 	call	0x824	; 0x824 <CAN_init>
	
	flag_init();
     d72:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <flag_init>
	
	
	Main_menu();
     d76:	0e 94 78 09 	call	0x12f0	; 0x12f0 <Main_menu>

	in_game = 0;
     d7a:	10 92 98 01 	sts	0x0198, r1	; 0x800198 <in_game>
	struct Can_Message can_message; //DEBUG TEST MESSAGE
	can_message.id = id_joystick_slider;
	can_message.length = lenght_joystick_slider;
	
	can_message_buttons.id = id_buttons;
     d7e:	eb e9       	ldi	r30, 0x9B	; 155
     d80:	f1 e0       	ldi	r31, 0x01	; 1
     d82:	82 e0       	ldi	r24, 0x02	; 2
     d84:	80 83       	st	Z, r24
	can_message_buttons.length = length_buttons;
     d86:	81 e0       	ldi	r24, 0x01	; 1
     d88:	81 83       	std	Z+1, r24	; 0x01
	
	while (1)
	{
		
		
		if (in_game == 1){ //TODO: Check if this works or if it needs to be in_game = 1;
     d8a:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <in_game>
     d8e:	81 30       	cpi	r24, 0x01	; 1
     d90:	19 f4       	brne	.+6      	; 0xd98 <main+0x58>
			poll_new_readings();
     d92:	0e 94 2f 03 	call	0x65e	; 0x65e <poll_new_readings>
     d96:	f9 cf       	rjmp	.-14     	; 0xd8a <main+0x4a>
			// Update OLED while in game
			//printf("%d \r\n",Game_status.in_game);
		}
		else {
			get_stick_direction();
     d98:	0e 94 f6 02 	call	0x5ec	; 0x5ec <get_stick_direction>
			if (right_button){
     d9c:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <right_button>
     da0:	88 23       	and	r24, r24
     da2:	21 f0       	breq	.+8      	; 0xdac <main+0x6c>
				Change_page();
     da4:	0e 94 0d 0b 	call	0x161a	; 0x161a <Change_page>
				right_button = 0;
     da8:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <right_button>
			}
			
			if (stick_state.Y_direction == NEUTRAL){
     dac:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <stick_state+0x6>
     db0:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <stick_state+0x7>
     db4:	00 97       	sbiw	r24, 0x00	; 0
     db6:	19 f4       	brne	.+6      	; 0xdbe <main+0x7e>
				neutral_check = 1;
     db8:	21 e0       	ldi	r18, 0x01	; 1
     dba:	20 93 66 01 	sts	0x0166, r18	; 0x800166 <__data_end>
			}
			
			if (neutral_check == 1){
     dbe:	20 91 66 01 	lds	r18, 0x0166	; 0x800166 <__data_end>
     dc2:	21 30       	cpi	r18, 0x01	; 1
     dc4:	11 f7       	brne	.-60     	; 0xd8a <main+0x4a>
				if (stick_state.Y_direction != NEUTRAL){
     dc6:	89 2b       	or	r24, r25
     dc8:	01 f3       	breq	.-64     	; 0xd8a <main+0x4a>
					//printf("Refresh");
					Arrow_refresh();
     dca:	0e 94 2f 07 	call	0xe5e	; 0xe5e <Arrow_refresh>
					neutral_check = 0;
     dce:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <__data_end>
     dd2:	db cf       	rjmp	.-74     	; 0xd8a <main+0x4a>

00000dd4 <flag_init>:

#include "Menu.h"


void flag_init(){
	Menu_contents.current_menu = 0;
     dd4:	10 92 a6 01 	sts	0x01A6, r1	; 0x8001a6 <Menu_contents+0x1>
     dd8:	08 95       	ret

00000dda <Menu_print_arrow>:
	Menu_print();
}


void Menu_print_arrow(){
	OLED_write_d(0b00000000);
     dda:	80 e0       	ldi	r24, 0x00	; 0
     ddc:	90 e0       	ldi	r25, 0x00	; 0
     dde:	0e 94 ed 0b 	call	0x17da	; 0x17da <OLED_write_d>
	OLED_write_d(0b00011000);
     de2:	88 e1       	ldi	r24, 0x18	; 24
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	0e 94 ed 0b 	call	0x17da	; 0x17da <OLED_write_d>
	OLED_write_d(0b00011000);
     dea:	88 e1       	ldi	r24, 0x18	; 24
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	0e 94 ed 0b 	call	0x17da	; 0x17da <OLED_write_d>
	OLED_write_d(0b00011000);
     df2:	88 e1       	ldi	r24, 0x18	; 24
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	0e 94 ed 0b 	call	0x17da	; 0x17da <OLED_write_d>
	OLED_write_d(0b01111110);
     dfa:	8e e7       	ldi	r24, 0x7E	; 126
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	0e 94 ed 0b 	call	0x17da	; 0x17da <OLED_write_d>
	OLED_write_d(0b00111100);
     e02:	8c e3       	ldi	r24, 0x3C	; 60
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	0e 94 ed 0b 	call	0x17da	; 0x17da <OLED_write_d>
	OLED_write_d(0b00011000);
     e0a:	88 e1       	ldi	r24, 0x18	; 24
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	0e 94 ed 0b 	call	0x17da	; 0x17da <OLED_write_d>
	OLED_write_d(0b00000000);
     e12:	80 e0       	ldi	r24, 0x00	; 0
     e14:	90 e0       	ldi	r25, 0x00	; 0
     e16:	0e 94 ed 0b 	call	0x17da	; 0x17da <OLED_write_d>
     e1a:	08 95       	ret

00000e1c <Menu_no_arrow>:
}

void Menu_no_arrow(){
	OLED_write_d(0b00000000);
     e1c:	80 e0       	ldi	r24, 0x00	; 0
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	0e 94 ed 0b 	call	0x17da	; 0x17da <OLED_write_d>
	OLED_write_d(0b00000000);
     e24:	80 e0       	ldi	r24, 0x00	; 0
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	0e 94 ed 0b 	call	0x17da	; 0x17da <OLED_write_d>
	OLED_write_d(0b00000000);
     e2c:	80 e0       	ldi	r24, 0x00	; 0
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	0e 94 ed 0b 	call	0x17da	; 0x17da <OLED_write_d>
	OLED_write_d(0b00000000);
     e34:	80 e0       	ldi	r24, 0x00	; 0
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	0e 94 ed 0b 	call	0x17da	; 0x17da <OLED_write_d>
	OLED_write_d(0b00000000);
     e3c:	80 e0       	ldi	r24, 0x00	; 0
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	0e 94 ed 0b 	call	0x17da	; 0x17da <OLED_write_d>
	OLED_write_d(0b00000000);
     e44:	80 e0       	ldi	r24, 0x00	; 0
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	0e 94 ed 0b 	call	0x17da	; 0x17da <OLED_write_d>
	OLED_write_d(0b00000000);
     e4c:	80 e0       	ldi	r24, 0x00	; 0
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	0e 94 ed 0b 	call	0x17da	; 0x17da <OLED_write_d>
	OLED_write_d(0b00000000);
     e54:	80 e0       	ldi	r24, 0x00	; 0
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	0e 94 ed 0b 	call	0x17da	; 0x17da <OLED_write_d>
     e5c:	08 95       	ret

00000e5e <Arrow_refresh>:
}



void Arrow_refresh(){
     e5e:	cf 93       	push	r28
     e60:	df 93       	push	r29
	get_stick_direction();
     e62:	0e 94 f6 02 	call	0x5ec	; 0x5ec <get_stick_direction>
	int prev_menu_index = Menu_contents.menu_index;
     e66:	e5 ea       	ldi	r30, 0xA5	; 165
     e68:	f1 e0       	ldi	r31, 0x01	; 1
     e6a:	80 81       	ld	r24, Z
     e6c:	c8 2f       	mov	r28, r24
     e6e:	d0 e0       	ldi	r29, 0x00	; 0
	
	// MAIN MENU LOGIC:
	if(Menu_contents.current_menu == 0){
     e70:	91 81       	ldd	r25, Z+1	; 0x01
	}
	
	// GAME MODES MENU LOGIC:
	if (Menu_contents.current_menu == 1){
     e72:	91 81       	ldd	r25, Z+1	; 0x01
     e74:	91 30       	cpi	r25, 0x01	; 1
     e76:	09 f0       	breq	.+2      	; 0xe7a <Arrow_refresh+0x1c>
     e78:	9a c0       	rjmp	.+308    	; 0xfae <Arrow_refresh+0x150>
		
		if (prev_menu_index == 2){
     e7a:	c2 30       	cpi	r28, 0x02	; 2
     e7c:	d1 05       	cpc	r29, r1
     e7e:	81 f5       	brne	.+96     	; 0xee0 <Arrow_refresh+0x82>
			if (stick_state.Y_direction == DOWN){
     e80:	20 91 89 01 	lds	r18, 0x0189	; 0x800189 <stick_state+0x6>
     e84:	30 91 8a 01 	lds	r19, 0x018A	; 0x80018a <stick_state+0x7>
     e88:	24 30       	cpi	r18, 0x04	; 4
     e8a:	31 05       	cpc	r19, r1
     e8c:	89 f4       	brne	.+34     	; 0xeb0 <Arrow_refresh+0x52>
				Menu_contents.menu_index++;
     e8e:	8f 5f       	subi	r24, 0xFF	; 255
     e90:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <Menu_contents>
				OLED_go_to_pos(Menu_contents.menu_index, 0);
     e94:	60 e0       	ldi	r22, 0x00	; 0
     e96:	70 e0       	ldi	r23, 0x00	; 0
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	0e 94 01 0c 	call	0x1802	; 0x1802 <OLED_go_to_pos>
				Menu_print_arrow();
     e9e:	0e 94 ed 06 	call	0xdda	; 0xdda <Menu_print_arrow>
				OLED_go_to_pos(prev_menu_index, 0);
     ea2:	60 e0       	ldi	r22, 0x00	; 0
     ea4:	70 e0       	ldi	r23, 0x00	; 0
     ea6:	ce 01       	movw	r24, r28
     ea8:	0e 94 01 0c 	call	0x1802	; 0x1802 <OLED_go_to_pos>
				Menu_no_arrow();
     eac:	0e 94 0e 07 	call	0xe1c	; 0xe1c <Menu_no_arrow>
			}
			if (stick_state.Y_direction == UP){
     eb0:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <stick_state+0x6>
     eb4:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <stick_state+0x7>
     eb8:	01 97       	sbiw	r24, 0x01	; 1
     eba:	91 f4       	brne	.+36     	; 0xee0 <Arrow_refresh+0x82>
				Menu_contents.menu_index = 7;
     ebc:	87 e0       	ldi	r24, 0x07	; 7
     ebe:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <Menu_contents>
				OLED_go_to_pos(Menu_contents.menu_index, 0);
     ec2:	60 e0       	ldi	r22, 0x00	; 0
     ec4:	70 e0       	ldi	r23, 0x00	; 0
     ec6:	87 e0       	ldi	r24, 0x07	; 7
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	0e 94 01 0c 	call	0x1802	; 0x1802 <OLED_go_to_pos>
				Menu_print_arrow();
     ece:	0e 94 ed 06 	call	0xdda	; 0xdda <Menu_print_arrow>
				OLED_go_to_pos(prev_menu_index, 0);
     ed2:	60 e0       	ldi	r22, 0x00	; 0
     ed4:	70 e0       	ldi	r23, 0x00	; 0
     ed6:	ce 01       	movw	r24, r28
     ed8:	0e 94 01 0c 	call	0x1802	; 0x1802 <OLED_go_to_pos>
				Menu_no_arrow();
     edc:	0e 94 0e 07 	call	0xe1c	; 0xe1c <Menu_no_arrow>
			}
		}
		
		if (prev_menu_index == 3){
     ee0:	c3 30       	cpi	r28, 0x03	; 3
     ee2:	d1 05       	cpc	r29, r1
     ee4:	89 f5       	brne	.+98     	; 0xf48 <Arrow_refresh+0xea>
			if (stick_state.Y_direction == UP){
     ee6:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <stick_state+0x6>
     eea:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <stick_state+0x7>
     eee:	01 97       	sbiw	r24, 0x01	; 1
     ef0:	99 f4       	brne	.+38     	; 0xf18 <Arrow_refresh+0xba>
				Menu_contents.menu_index--;
     ef2:	e5 ea       	ldi	r30, 0xA5	; 165
     ef4:	f1 e0       	ldi	r31, 0x01	; 1
     ef6:	80 81       	ld	r24, Z
     ef8:	81 50       	subi	r24, 0x01	; 1
     efa:	80 83       	st	Z, r24
				OLED_go_to_pos(Menu_contents.menu_index, 0);
     efc:	60 e0       	ldi	r22, 0x00	; 0
     efe:	70 e0       	ldi	r23, 0x00	; 0
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	0e 94 01 0c 	call	0x1802	; 0x1802 <OLED_go_to_pos>
				Menu_print_arrow();
     f06:	0e 94 ed 06 	call	0xdda	; 0xdda <Menu_print_arrow>
				OLED_go_to_pos(prev_menu_index, 0);
     f0a:	60 e0       	ldi	r22, 0x00	; 0
     f0c:	70 e0       	ldi	r23, 0x00	; 0
     f0e:	ce 01       	movw	r24, r28
     f10:	0e 94 01 0c 	call	0x1802	; 0x1802 <OLED_go_to_pos>
				Menu_no_arrow();
     f14:	0e 94 0e 07 	call	0xe1c	; 0xe1c <Menu_no_arrow>
			}
			if (stick_state.Y_direction == DOWN){
     f18:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <stick_state+0x6>
     f1c:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <stick_state+0x7>
     f20:	04 97       	sbiw	r24, 0x04	; 4
     f22:	91 f4       	brne	.+36     	; 0xf48 <Arrow_refresh+0xea>
				Menu_contents.menu_index = 7;
     f24:	87 e0       	ldi	r24, 0x07	; 7
     f26:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <Menu_contents>
				OLED_go_to_pos(Menu_contents.menu_index, 0);
     f2a:	60 e0       	ldi	r22, 0x00	; 0
     f2c:	70 e0       	ldi	r23, 0x00	; 0
     f2e:	87 e0       	ldi	r24, 0x07	; 7
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	0e 94 01 0c 	call	0x1802	; 0x1802 <OLED_go_to_pos>
				Menu_print_arrow();
     f36:	0e 94 ed 06 	call	0xdda	; 0xdda <Menu_print_arrow>
				OLED_go_to_pos(prev_menu_index, 0);
     f3a:	60 e0       	ldi	r22, 0x00	; 0
     f3c:	70 e0       	ldi	r23, 0x00	; 0
     f3e:	ce 01       	movw	r24, r28
     f40:	0e 94 01 0c 	call	0x1802	; 0x1802 <OLED_go_to_pos>
				Menu_no_arrow();
     f44:	0e 94 0e 07 	call	0xe1c	; 0xe1c <Menu_no_arrow>
			}
		}
		
		if (prev_menu_index == 7){
     f48:	c7 30       	cpi	r28, 0x07	; 7
     f4a:	d1 05       	cpc	r29, r1
     f4c:	81 f5       	brne	.+96     	; 0xfae <Arrow_refresh+0x150>
			if (stick_state.Y_direction == UP){
     f4e:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <stick_state+0x6>
     f52:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <stick_state+0x7>
     f56:	01 97       	sbiw	r24, 0x01	; 1
     f58:	91 f4       	brne	.+36     	; 0xf7e <Arrow_refresh+0x120>
				Menu_contents.menu_index = 3;
     f5a:	83 e0       	ldi	r24, 0x03	; 3
     f5c:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <Menu_contents>
				OLED_go_to_pos(Menu_contents.menu_index, 0);
     f60:	60 e0       	ldi	r22, 0x00	; 0
     f62:	70 e0       	ldi	r23, 0x00	; 0
     f64:	83 e0       	ldi	r24, 0x03	; 3
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	0e 94 01 0c 	call	0x1802	; 0x1802 <OLED_go_to_pos>
				Menu_print_arrow();
     f6c:	0e 94 ed 06 	call	0xdda	; 0xdda <Menu_print_arrow>
				OLED_go_to_pos(prev_menu_index, 0);
     f70:	60 e0       	ldi	r22, 0x00	; 0
     f72:	70 e0       	ldi	r23, 0x00	; 0
     f74:	ce 01       	movw	r24, r28
     f76:	0e 94 01 0c 	call	0x1802	; 0x1802 <OLED_go_to_pos>
				Menu_no_arrow();
     f7a:	0e 94 0e 07 	call	0xe1c	; 0xe1c <Menu_no_arrow>
			}
			if (stick_state.Y_direction == DOWN){
     f7e:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <stick_state+0x6>
     f82:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <stick_state+0x7>
     f86:	04 97       	sbiw	r24, 0x04	; 4
     f88:	91 f4       	brne	.+36     	; 0xfae <Arrow_refresh+0x150>
				Menu_contents.menu_index = 2;
     f8a:	82 e0       	ldi	r24, 0x02	; 2
     f8c:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <Menu_contents>
				OLED_go_to_pos(Menu_contents.menu_index, 0);
     f90:	60 e0       	ldi	r22, 0x00	; 0
     f92:	70 e0       	ldi	r23, 0x00	; 0
     f94:	82 e0       	ldi	r24, 0x02	; 2
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	0e 94 01 0c 	call	0x1802	; 0x1802 <OLED_go_to_pos>
				Menu_print_arrow();
     f9c:	0e 94 ed 06 	call	0xdda	; 0xdda <Menu_print_arrow>
				OLED_go_to_pos(prev_menu_index, 0);
     fa0:	60 e0       	ldi	r22, 0x00	; 0
     fa2:	70 e0       	ldi	r23, 0x00	; 0
     fa4:	ce 01       	movw	r24, r28
     fa6:	0e 94 01 0c 	call	0x1802	; 0x1802 <OLED_go_to_pos>
				Menu_no_arrow();
     faa:	0e 94 0e 07 	call	0xe1c	; 0xe1c <Menu_no_arrow>
		}
		
	}
	
	// GAME MODES MENU LOGIC:
	if (Menu_contents.current_menu == 2){
     fae:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <Menu_contents+0x1>
     fb2:	82 30       	cpi	r24, 0x02	; 2
     fb4:	09 f0       	breq	.+2      	; 0xfb8 <Arrow_refresh+0x15a>
     fb6:	9b c0       	rjmp	.+310    	; 0x10ee <Arrow_refresh+0x290>
		
		if (prev_menu_index == 2){
     fb8:	c2 30       	cpi	r28, 0x02	; 2
     fba:	d1 05       	cpc	r29, r1
     fbc:	89 f5       	brne	.+98     	; 0x1020 <Arrow_refresh+0x1c2>
			if (stick_state.Y_direction == DOWN){
     fbe:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <stick_state+0x6>
     fc2:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <stick_state+0x7>
     fc6:	04 97       	sbiw	r24, 0x04	; 4
     fc8:	99 f4       	brne	.+38     	; 0xff0 <Arrow_refresh+0x192>
				Menu_contents.menu_index++;
     fca:	e5 ea       	ldi	r30, 0xA5	; 165
     fcc:	f1 e0       	ldi	r31, 0x01	; 1
     fce:	80 81       	ld	r24, Z
     fd0:	8f 5f       	subi	r24, 0xFF	; 255
     fd2:	80 83       	st	Z, r24
				OLED_go_to_pos(Menu_contents.menu_index, 0);
     fd4:	60 e0       	ldi	r22, 0x00	; 0
     fd6:	70 e0       	ldi	r23, 0x00	; 0
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	0e 94 01 0c 	call	0x1802	; 0x1802 <OLED_go_to_pos>
				Menu_print_arrow();
     fde:	0e 94 ed 06 	call	0xdda	; 0xdda <Menu_print_arrow>
				OLED_go_to_pos(prev_menu_index, 0);
     fe2:	60 e0       	ldi	r22, 0x00	; 0
     fe4:	70 e0       	ldi	r23, 0x00	; 0
     fe6:	ce 01       	movw	r24, r28
     fe8:	0e 94 01 0c 	call	0x1802	; 0x1802 <OLED_go_to_pos>
				Menu_no_arrow();
     fec:	0e 94 0e 07 	call	0xe1c	; 0xe1c <Menu_no_arrow>
			}
			if (stick_state.Y_direction == UP){
     ff0:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <stick_state+0x6>
     ff4:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <stick_state+0x7>
     ff8:	01 97       	sbiw	r24, 0x01	; 1
     ffa:	91 f4       	brne	.+36     	; 0x1020 <Arrow_refresh+0x1c2>
				Menu_contents.menu_index = 7;
     ffc:	87 e0       	ldi	r24, 0x07	; 7
     ffe:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <Menu_contents>
				OLED_go_to_pos(Menu_contents.menu_index, 0);
    1002:	60 e0       	ldi	r22, 0x00	; 0
    1004:	70 e0       	ldi	r23, 0x00	; 0
    1006:	87 e0       	ldi	r24, 0x07	; 7
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	0e 94 01 0c 	call	0x1802	; 0x1802 <OLED_go_to_pos>
				Menu_print_arrow();
    100e:	0e 94 ed 06 	call	0xdda	; 0xdda <Menu_print_arrow>
				OLED_go_to_pos(prev_menu_index, 0);
    1012:	60 e0       	ldi	r22, 0x00	; 0
    1014:	70 e0       	ldi	r23, 0x00	; 0
    1016:	ce 01       	movw	r24, r28
    1018:	0e 94 01 0c 	call	0x1802	; 0x1802 <OLED_go_to_pos>
				Menu_no_arrow();
    101c:	0e 94 0e 07 	call	0xe1c	; 0xe1c <Menu_no_arrow>
			}
		}
		
		if (prev_menu_index == 3){
    1020:	c3 30       	cpi	r28, 0x03	; 3
    1022:	d1 05       	cpc	r29, r1
    1024:	89 f5       	brne	.+98     	; 0x1088 <Arrow_refresh+0x22a>
			if (stick_state.Y_direction == UP){
    1026:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <stick_state+0x6>
    102a:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <stick_state+0x7>
    102e:	01 97       	sbiw	r24, 0x01	; 1
    1030:	99 f4       	brne	.+38     	; 0x1058 <Arrow_refresh+0x1fa>
				Menu_contents.menu_index--;
    1032:	e5 ea       	ldi	r30, 0xA5	; 165
    1034:	f1 e0       	ldi	r31, 0x01	; 1
    1036:	80 81       	ld	r24, Z
    1038:	81 50       	subi	r24, 0x01	; 1
    103a:	80 83       	st	Z, r24
				OLED_go_to_pos(Menu_contents.menu_index, 0);
    103c:	60 e0       	ldi	r22, 0x00	; 0
    103e:	70 e0       	ldi	r23, 0x00	; 0
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	0e 94 01 0c 	call	0x1802	; 0x1802 <OLED_go_to_pos>
				Menu_print_arrow();
    1046:	0e 94 ed 06 	call	0xdda	; 0xdda <Menu_print_arrow>
				OLED_go_to_pos(prev_menu_index, 0);
    104a:	60 e0       	ldi	r22, 0x00	; 0
    104c:	70 e0       	ldi	r23, 0x00	; 0
    104e:	ce 01       	movw	r24, r28
    1050:	0e 94 01 0c 	call	0x1802	; 0x1802 <OLED_go_to_pos>
				Menu_no_arrow();
    1054:	0e 94 0e 07 	call	0xe1c	; 0xe1c <Menu_no_arrow>
			}
			if (stick_state.Y_direction == DOWN){
    1058:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <stick_state+0x6>
    105c:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <stick_state+0x7>
    1060:	04 97       	sbiw	r24, 0x04	; 4
    1062:	91 f4       	brne	.+36     	; 0x1088 <Arrow_refresh+0x22a>
				Menu_contents.menu_index = 7;
    1064:	87 e0       	ldi	r24, 0x07	; 7
    1066:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <Menu_contents>
				OLED_go_to_pos(Menu_contents.menu_index, 0);
    106a:	60 e0       	ldi	r22, 0x00	; 0
    106c:	70 e0       	ldi	r23, 0x00	; 0
    106e:	87 e0       	ldi	r24, 0x07	; 7
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	0e 94 01 0c 	call	0x1802	; 0x1802 <OLED_go_to_pos>
				Menu_print_arrow();
    1076:	0e 94 ed 06 	call	0xdda	; 0xdda <Menu_print_arrow>
				OLED_go_to_pos(prev_menu_index, 0);
    107a:	60 e0       	ldi	r22, 0x00	; 0
    107c:	70 e0       	ldi	r23, 0x00	; 0
    107e:	ce 01       	movw	r24, r28
    1080:	0e 94 01 0c 	call	0x1802	; 0x1802 <OLED_go_to_pos>
				Menu_no_arrow();
    1084:	0e 94 0e 07 	call	0xe1c	; 0xe1c <Menu_no_arrow>
			}
		}
		
		if (prev_menu_index == 7){
    1088:	c7 30       	cpi	r28, 0x07	; 7
    108a:	d1 05       	cpc	r29, r1
    108c:	81 f5       	brne	.+96     	; 0x10ee <Arrow_refresh+0x290>
			if (stick_state.Y_direction == UP){
    108e:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <stick_state+0x6>
    1092:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <stick_state+0x7>
    1096:	01 97       	sbiw	r24, 0x01	; 1
    1098:	91 f4       	brne	.+36     	; 0x10be <Arrow_refresh+0x260>
				Menu_contents.menu_index = 3;
    109a:	83 e0       	ldi	r24, 0x03	; 3
    109c:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <Menu_contents>
				OLED_go_to_pos(Menu_contents.menu_index, 0);
    10a0:	60 e0       	ldi	r22, 0x00	; 0
    10a2:	70 e0       	ldi	r23, 0x00	; 0
    10a4:	83 e0       	ldi	r24, 0x03	; 3
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	0e 94 01 0c 	call	0x1802	; 0x1802 <OLED_go_to_pos>
				Menu_print_arrow();
    10ac:	0e 94 ed 06 	call	0xdda	; 0xdda <Menu_print_arrow>
				OLED_go_to_pos(prev_menu_index, 0);
    10b0:	60 e0       	ldi	r22, 0x00	; 0
    10b2:	70 e0       	ldi	r23, 0x00	; 0
    10b4:	ce 01       	movw	r24, r28
    10b6:	0e 94 01 0c 	call	0x1802	; 0x1802 <OLED_go_to_pos>
				Menu_no_arrow();
    10ba:	0e 94 0e 07 	call	0xe1c	; 0xe1c <Menu_no_arrow>
			}
			if (stick_state.Y_direction == DOWN){
    10be:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <stick_state+0x6>
    10c2:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <stick_state+0x7>
    10c6:	04 97       	sbiw	r24, 0x04	; 4
    10c8:	91 f4       	brne	.+36     	; 0x10ee <Arrow_refresh+0x290>
				Menu_contents.menu_index = 2;
    10ca:	82 e0       	ldi	r24, 0x02	; 2
    10cc:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <Menu_contents>
				OLED_go_to_pos(Menu_contents.menu_index, 0);
    10d0:	60 e0       	ldi	r22, 0x00	; 0
    10d2:	70 e0       	ldi	r23, 0x00	; 0
    10d4:	82 e0       	ldi	r24, 0x02	; 2
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	0e 94 01 0c 	call	0x1802	; 0x1802 <OLED_go_to_pos>
				Menu_print_arrow();
    10dc:	0e 94 ed 06 	call	0xdda	; 0xdda <Menu_print_arrow>
				OLED_go_to_pos(prev_menu_index, 0);
    10e0:	60 e0       	ldi	r22, 0x00	; 0
    10e2:	70 e0       	ldi	r23, 0x00	; 0
    10e4:	ce 01       	movw	r24, r28
    10e6:	0e 94 01 0c 	call	0x1802	; 0x1802 <OLED_go_to_pos>
				Menu_no_arrow();
    10ea:	0e 94 0e 07 	call	0xe1c	; 0xe1c <Menu_no_arrow>
		}
		
	}
	
	// DIFFICULTY MENU LOGIC:
	if (Menu_contents.current_menu == 3){
    10ee:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <Menu_contents+0x1>
    10f2:	83 30       	cpi	r24, 0x03	; 3
    10f4:	09 f0       	breq	.+2      	; 0x10f8 <Arrow_refresh+0x29a>
    10f6:	cf c0       	rjmp	.+414    	; 0x1296 <Arrow_refresh+0x438>
		if (prev_menu_index == 2){
    10f8:	c2 30       	cpi	r28, 0x02	; 2
    10fa:	d1 05       	cpc	r29, r1
    10fc:	89 f5       	brne	.+98     	; 0x1160 <Arrow_refresh+0x302>
			if (stick_state.Y_direction == UP){
    10fe:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <stick_state+0x6>
    1102:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <stick_state+0x7>
    1106:	01 97       	sbiw	r24, 0x01	; 1
    1108:	91 f4       	brne	.+36     	; 0x112e <Arrow_refresh+0x2d0>
				Menu_contents.menu_index = 7;
    110a:	87 e0       	ldi	r24, 0x07	; 7
    110c:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <Menu_contents>
				OLED_go_to_pos(Menu_contents.menu_index, 0);
    1110:	60 e0       	ldi	r22, 0x00	; 0
    1112:	70 e0       	ldi	r23, 0x00	; 0
    1114:	87 e0       	ldi	r24, 0x07	; 7
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	0e 94 01 0c 	call	0x1802	; 0x1802 <OLED_go_to_pos>
				Menu_print_arrow();
    111c:	0e 94 ed 06 	call	0xdda	; 0xdda <Menu_print_arrow>
				OLED_go_to_pos(prev_menu_index, 0);
    1120:	60 e0       	ldi	r22, 0x00	; 0
    1122:	70 e0       	ldi	r23, 0x00	; 0
    1124:	ce 01       	movw	r24, r28
    1126:	0e 94 01 0c 	call	0x1802	; 0x1802 <OLED_go_to_pos>
				Menu_no_arrow();
    112a:	0e 94 0e 07 	call	0xe1c	; 0xe1c <Menu_no_arrow>
			}
			if (stick_state.Y_direction == DOWN){
    112e:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <stick_state+0x6>
    1132:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <stick_state+0x7>
    1136:	04 97       	sbiw	r24, 0x04	; 4
    1138:	99 f4       	brne	.+38     	; 0x1160 <Arrow_refresh+0x302>
				Menu_contents.menu_index++;
    113a:	e5 ea       	ldi	r30, 0xA5	; 165
    113c:	f1 e0       	ldi	r31, 0x01	; 1
    113e:	80 81       	ld	r24, Z
    1140:	8f 5f       	subi	r24, 0xFF	; 255
    1142:	80 83       	st	Z, r24
				OLED_go_to_pos(Menu_contents.menu_index, 0);
    1144:	60 e0       	ldi	r22, 0x00	; 0
    1146:	70 e0       	ldi	r23, 0x00	; 0
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	0e 94 01 0c 	call	0x1802	; 0x1802 <OLED_go_to_pos>
				Menu_print_arrow();
    114e:	0e 94 ed 06 	call	0xdda	; 0xdda <Menu_print_arrow>
				OLED_go_to_pos(prev_menu_index, 0);
    1152:	60 e0       	ldi	r22, 0x00	; 0
    1154:	70 e0       	ldi	r23, 0x00	; 0
    1156:	ce 01       	movw	r24, r28
    1158:	0e 94 01 0c 	call	0x1802	; 0x1802 <OLED_go_to_pos>
				Menu_no_arrow();
    115c:	0e 94 0e 07 	call	0xe1c	; 0xe1c <Menu_no_arrow>
			}
		}
		
		if (prev_menu_index == 3){
    1160:	c3 30       	cpi	r28, 0x03	; 3
    1162:	d1 05       	cpc	r29, r1
    1164:	91 f5       	brne	.+100    	; 0x11ca <Arrow_refresh+0x36c>
			if (stick_state.Y_direction == DOWN){
    1166:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <stick_state+0x6>
    116a:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <stick_state+0x7>
    116e:	04 97       	sbiw	r24, 0x04	; 4
    1170:	99 f4       	brne	.+38     	; 0x1198 <Arrow_refresh+0x33a>
				Menu_contents.menu_index++;
    1172:	e5 ea       	ldi	r30, 0xA5	; 165
    1174:	f1 e0       	ldi	r31, 0x01	; 1
    1176:	80 81       	ld	r24, Z
    1178:	8f 5f       	subi	r24, 0xFF	; 255
    117a:	80 83       	st	Z, r24
				OLED_go_to_pos(Menu_contents.menu_index, 0);
    117c:	60 e0       	ldi	r22, 0x00	; 0
    117e:	70 e0       	ldi	r23, 0x00	; 0
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	0e 94 01 0c 	call	0x1802	; 0x1802 <OLED_go_to_pos>
				Menu_print_arrow();
    1186:	0e 94 ed 06 	call	0xdda	; 0xdda <Menu_print_arrow>
				OLED_go_to_pos(prev_menu_index, 0);
    118a:	60 e0       	ldi	r22, 0x00	; 0
    118c:	70 e0       	ldi	r23, 0x00	; 0
    118e:	ce 01       	movw	r24, r28
    1190:	0e 94 01 0c 	call	0x1802	; 0x1802 <OLED_go_to_pos>
				Menu_no_arrow();
    1194:	0e 94 0e 07 	call	0xe1c	; 0xe1c <Menu_no_arrow>
			}
			if (stick_state.Y_direction == UP){
    1198:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <stick_state+0x6>
    119c:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <stick_state+0x7>
    11a0:	01 97       	sbiw	r24, 0x01	; 1
    11a2:	99 f4       	brne	.+38     	; 0x11ca <Arrow_refresh+0x36c>
				Menu_contents.menu_index--;
    11a4:	e5 ea       	ldi	r30, 0xA5	; 165
    11a6:	f1 e0       	ldi	r31, 0x01	; 1
    11a8:	80 81       	ld	r24, Z
    11aa:	81 50       	subi	r24, 0x01	; 1
    11ac:	80 83       	st	Z, r24
				OLED_go_to_pos(Menu_contents.menu_index, 0);
    11ae:	60 e0       	ldi	r22, 0x00	; 0
    11b0:	70 e0       	ldi	r23, 0x00	; 0
    11b2:	90 e0       	ldi	r25, 0x00	; 0
    11b4:	0e 94 01 0c 	call	0x1802	; 0x1802 <OLED_go_to_pos>
				Menu_print_arrow();
    11b8:	0e 94 ed 06 	call	0xdda	; 0xdda <Menu_print_arrow>
				OLED_go_to_pos(prev_menu_index, 0);
    11bc:	60 e0       	ldi	r22, 0x00	; 0
    11be:	70 e0       	ldi	r23, 0x00	; 0
    11c0:	ce 01       	movw	r24, r28
    11c2:	0e 94 01 0c 	call	0x1802	; 0x1802 <OLED_go_to_pos>
				Menu_no_arrow();
    11c6:	0e 94 0e 07 	call	0xe1c	; 0xe1c <Menu_no_arrow>
			}
		}
		
		
		if (prev_menu_index == 4){
    11ca:	c4 30       	cpi	r28, 0x04	; 4
    11cc:	d1 05       	cpc	r29, r1
    11ce:	81 f5       	brne	.+96     	; 0x1230 <Arrow_refresh+0x3d2>
			if (stick_state.Y_direction == UP){
    11d0:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <stick_state+0x6>
    11d4:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <stick_state+0x7>
    11d8:	01 97       	sbiw	r24, 0x01	; 1
    11da:	91 f4       	brne	.+36     	; 0x1200 <Arrow_refresh+0x3a2>
				Menu_contents.menu_index = 3;
    11dc:	83 e0       	ldi	r24, 0x03	; 3
    11de:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <Menu_contents>
				OLED_go_to_pos(Menu_contents.menu_index, 0);
    11e2:	60 e0       	ldi	r22, 0x00	; 0
    11e4:	70 e0       	ldi	r23, 0x00	; 0
    11e6:	83 e0       	ldi	r24, 0x03	; 3
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	0e 94 01 0c 	call	0x1802	; 0x1802 <OLED_go_to_pos>
				Menu_print_arrow();
    11ee:	0e 94 ed 06 	call	0xdda	; 0xdda <Menu_print_arrow>
				OLED_go_to_pos(prev_menu_index, 0);
    11f2:	60 e0       	ldi	r22, 0x00	; 0
    11f4:	70 e0       	ldi	r23, 0x00	; 0
    11f6:	ce 01       	movw	r24, r28
    11f8:	0e 94 01 0c 	call	0x1802	; 0x1802 <OLED_go_to_pos>
				Menu_no_arrow();
    11fc:	0e 94 0e 07 	call	0xe1c	; 0xe1c <Menu_no_arrow>
			}
			if (stick_state.Y_direction == DOWN){
    1200:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <stick_state+0x6>
    1204:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <stick_state+0x7>
    1208:	04 97       	sbiw	r24, 0x04	; 4
    120a:	91 f4       	brne	.+36     	; 0x1230 <Arrow_refresh+0x3d2>
				Menu_contents.menu_index = 7;
    120c:	87 e0       	ldi	r24, 0x07	; 7
    120e:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <Menu_contents>
				OLED_go_to_pos(Menu_contents.menu_index, 0);
    1212:	60 e0       	ldi	r22, 0x00	; 0
    1214:	70 e0       	ldi	r23, 0x00	; 0
    1216:	87 e0       	ldi	r24, 0x07	; 7
    1218:	90 e0       	ldi	r25, 0x00	; 0
    121a:	0e 94 01 0c 	call	0x1802	; 0x1802 <OLED_go_to_pos>
				Menu_print_arrow();
    121e:	0e 94 ed 06 	call	0xdda	; 0xdda <Menu_print_arrow>
				OLED_go_to_pos(prev_menu_index, 0);
    1222:	60 e0       	ldi	r22, 0x00	; 0
    1224:	70 e0       	ldi	r23, 0x00	; 0
    1226:	ce 01       	movw	r24, r28
    1228:	0e 94 01 0c 	call	0x1802	; 0x1802 <OLED_go_to_pos>
				Menu_no_arrow();
    122c:	0e 94 0e 07 	call	0xe1c	; 0xe1c <Menu_no_arrow>
			}
		}
		
		if (prev_menu_index == 7){
    1230:	c7 30       	cpi	r28, 0x07	; 7
    1232:	d1 05       	cpc	r29, r1
    1234:	81 f5       	brne	.+96     	; 0x1296 <Arrow_refresh+0x438>
			if (stick_state.Y_direction == UP){
    1236:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <stick_state+0x6>
    123a:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <stick_state+0x7>
    123e:	01 97       	sbiw	r24, 0x01	; 1
    1240:	91 f4       	brne	.+36     	; 0x1266 <Arrow_refresh+0x408>
				Menu_contents.menu_index = 4;
    1242:	84 e0       	ldi	r24, 0x04	; 4
    1244:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <Menu_contents>
				OLED_go_to_pos(Menu_contents.menu_index, 0);
    1248:	60 e0       	ldi	r22, 0x00	; 0
    124a:	70 e0       	ldi	r23, 0x00	; 0
    124c:	84 e0       	ldi	r24, 0x04	; 4
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	0e 94 01 0c 	call	0x1802	; 0x1802 <OLED_go_to_pos>
				Menu_print_arrow();
    1254:	0e 94 ed 06 	call	0xdda	; 0xdda <Menu_print_arrow>
				OLED_go_to_pos(prev_menu_index, 0);
    1258:	60 e0       	ldi	r22, 0x00	; 0
    125a:	70 e0       	ldi	r23, 0x00	; 0
    125c:	ce 01       	movw	r24, r28
    125e:	0e 94 01 0c 	call	0x1802	; 0x1802 <OLED_go_to_pos>
				Menu_no_arrow();
    1262:	0e 94 0e 07 	call	0xe1c	; 0xe1c <Menu_no_arrow>
			}
			if (stick_state.Y_direction == DOWN){
    1266:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <stick_state+0x6>
    126a:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <stick_state+0x7>
    126e:	04 97       	sbiw	r24, 0x04	; 4
    1270:	91 f4       	brne	.+36     	; 0x1296 <Arrow_refresh+0x438>
				Menu_contents.menu_index = 2;
    1272:	82 e0       	ldi	r24, 0x02	; 2
    1274:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <Menu_contents>
				OLED_go_to_pos(Menu_contents.menu_index, 0);
    1278:	60 e0       	ldi	r22, 0x00	; 0
    127a:	70 e0       	ldi	r23, 0x00	; 0
    127c:	82 e0       	ldi	r24, 0x02	; 2
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	0e 94 01 0c 	call	0x1802	; 0x1802 <OLED_go_to_pos>
				Menu_print_arrow();
    1284:	0e 94 ed 06 	call	0xdda	; 0xdda <Menu_print_arrow>
				OLED_go_to_pos(prev_menu_index, 0);
    1288:	60 e0       	ldi	r22, 0x00	; 0
    128a:	70 e0       	ldi	r23, 0x00	; 0
    128c:	ce 01       	movw	r24, r28
    128e:	0e 94 01 0c 	call	0x1802	; 0x1802 <OLED_go_to_pos>
				Menu_no_arrow();
    1292:	0e 94 0e 07 	call	0xe1c	; 0xe1c <Menu_no_arrow>
			}
		}
		
	}
	
}
    1296:	df 91       	pop	r29
    1298:	cf 91       	pop	r28
    129a:	08 95       	ret

0000129c <Menu_print>:

void Menu_print(){
    129c:	cf 93       	push	r28
    129e:	df 93       	push	r29
	
	OLED_home();
    12a0:	0e 94 0a 0c 	call	0x1814	; 0x1814 <OLED_home>
	OLED_printf(Menu_contents.linedata[1]);
    12a4:	86 eb       	ldi	r24, 0xB6	; 182
    12a6:	91 e0       	ldi	r25, 0x01	; 1
    12a8:	0e 94 45 0c 	call	0x188a	; 0x188a <OLED_printf>
	for (int i = 1; i < 8; i++){
    12ac:	c1 e0       	ldi	r28, 0x01	; 1
    12ae:	d0 e0       	ldi	r29, 0x00	; 0
    12b0:	10 c0       	rjmp	.+32     	; 0x12d2 <Menu_print+0x36>
		OLED_go_to_pos(i, 10);
    12b2:	6a e0       	ldi	r22, 0x0A	; 10
    12b4:	70 e0       	ldi	r23, 0x00	; 0
    12b6:	ce 01       	movw	r24, r28
    12b8:	0e 94 01 0c 	call	0x1802	; 0x1802 <OLED_go_to_pos>
		OLED_printf(Menu_contents.linedata[i+1]);
    12bc:	21 96       	adiw	r28, 0x01	; 1
    12be:	2f e0       	ldi	r18, 0x0F	; 15
    12c0:	2c 9f       	mul	r18, r28
    12c2:	c0 01       	movw	r24, r0
    12c4:	2d 9f       	mul	r18, r29
    12c6:	90 0d       	add	r25, r0
    12c8:	11 24       	eor	r1, r1
    12ca:	89 55       	subi	r24, 0x59	; 89
    12cc:	9e 4f       	sbci	r25, 0xFE	; 254
    12ce:	0e 94 45 0c 	call	0x188a	; 0x188a <OLED_printf>

void Menu_print(){
	
	OLED_home();
	OLED_printf(Menu_contents.linedata[1]);
	for (int i = 1; i < 8; i++){
    12d2:	c8 30       	cpi	r28, 0x08	; 8
    12d4:	d1 05       	cpc	r29, r1
    12d6:	6c f3       	brlt	.-38     	; 0x12b2 <Menu_print+0x16>
		OLED_go_to_pos(i, 10);
		OLED_printf(Menu_contents.linedata[i+1]);
	}
	OLED_go_to_pos(Menu_contents.menu_index, 0);
    12d8:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <Menu_contents>
    12dc:	60 e0       	ldi	r22, 0x00	; 0
    12de:	70 e0       	ldi	r23, 0x00	; 0
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	0e 94 01 0c 	call	0x1802	; 0x1802 <OLED_go_to_pos>
	Menu_print_arrow();
    12e6:	0e 94 ed 06 	call	0xdda	; 0xdda <Menu_print_arrow>
}
    12ea:	df 91       	pop	r29
    12ec:	cf 91       	pop	r28
    12ee:	08 95       	ret

000012f0 <Main_menu>:

void flag_init(){
	Menu_contents.current_menu = 0;
}

void Main_menu(){
    12f0:	cf 93       	push	r28
    12f2:	df 93       	push	r29
	strcpy_P(Menu_contents.linedata[1], (PGM_P)pgm_read_word(&(menu_string_table[2])));
    12f4:	e4 e7       	ldi	r30, 0x74	; 116
    12f6:	f0 e0       	ldi	r31, 0x00	; 0
    12f8:	65 91       	lpm	r22, Z+
    12fa:	74 91       	lpm	r23, Z
    12fc:	86 eb       	ldi	r24, 0xB6	; 182
    12fe:	91 e0       	ldi	r25, 0x01	; 1
    1300:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <strcpy_P>
	strcpy_P(Menu_contents.linedata[2], (PGM_P)pgm_read_word(&(menu_string_table[0])));
    1304:	c0 e7       	ldi	r28, 0x70	; 112
    1306:	d0 e0       	ldi	r29, 0x00	; 0
    1308:	fe 01       	movw	r30, r28
    130a:	65 91       	lpm	r22, Z+
    130c:	74 91       	lpm	r23, Z
    130e:	85 ec       	ldi	r24, 0xC5	; 197
    1310:	91 e0       	ldi	r25, 0x01	; 1
    1312:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <strcpy_P>
	strcpy_P(Menu_contents.linedata[3], (PGM_P)pgm_read_word(&(menu_string_table[3])));
    1316:	e6 e7       	ldi	r30, 0x76	; 118
    1318:	f0 e0       	ldi	r31, 0x00	; 0
    131a:	65 91       	lpm	r22, Z+
    131c:	74 91       	lpm	r23, Z
    131e:	84 ed       	ldi	r24, 0xD4	; 212
    1320:	91 e0       	ldi	r25, 0x01	; 1
    1322:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <strcpy_P>
	strcpy_P(Menu_contents.linedata[4], (PGM_P)pgm_read_word(&(menu_string_table[0])));
    1326:	fe 01       	movw	r30, r28
    1328:	65 91       	lpm	r22, Z+
    132a:	74 91       	lpm	r23, Z
    132c:	83 ee       	ldi	r24, 0xE3	; 227
    132e:	91 e0       	ldi	r25, 0x01	; 1
    1330:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <strcpy_P>
	strcpy_P(Menu_contents.linedata[5], (PGM_P)pgm_read_word(&(menu_string_table[0])));
    1334:	fe 01       	movw	r30, r28
    1336:	65 91       	lpm	r22, Z+
    1338:	74 91       	lpm	r23, Z
    133a:	82 ef       	ldi	r24, 0xF2	; 242
    133c:	91 e0       	ldi	r25, 0x01	; 1
    133e:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <strcpy_P>
	strcpy_P(Menu_contents.linedata[6], (PGM_P)pgm_read_word(&(menu_string_table[0])));
    1342:	fe 01       	movw	r30, r28
    1344:	65 91       	lpm	r22, Z+
    1346:	74 91       	lpm	r23, Z
    1348:	81 e0       	ldi	r24, 0x01	; 1
    134a:	92 e0       	ldi	r25, 0x02	; 2
    134c:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <strcpy_P>
	strcpy_P(Menu_contents.linedata[7], (PGM_P)pgm_read_word(&(menu_string_table[0])));
    1350:	fe 01       	movw	r30, r28
    1352:	65 91       	lpm	r22, Z+
    1354:	74 91       	lpm	r23, Z
    1356:	80 e1       	ldi	r24, 0x10	; 16
    1358:	92 e0       	ldi	r25, 0x02	; 2
    135a:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <strcpy_P>
	strcpy_P(Menu_contents.linedata[8], (PGM_P)pgm_read_word(&(menu_string_table[0])));
    135e:	fe 01       	movw	r30, r28
    1360:	65 91       	lpm	r22, Z+
    1362:	74 91       	lpm	r23, Z
    1364:	8f e1       	ldi	r24, 0x1F	; 31
    1366:	92 e0       	ldi	r25, 0x02	; 2
    1368:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <strcpy_P>
	Menu_contents.menu_index = 2;
    136c:	e5 ea       	ldi	r30, 0xA5	; 165
    136e:	f1 e0       	ldi	r31, 0x01	; 1
    1370:	82 e0       	ldi	r24, 0x02	; 2
    1372:	80 83       	st	Z, r24
	Menu_contents.current_menu = 0;
    1374:	11 82       	std	Z+1, r1	; 0x01
	Menu_print();
    1376:	0e 94 4e 09 	call	0x129c	; 0x129c <Menu_print>
}
    137a:	df 91       	pop	r29
    137c:	cf 91       	pop	r28
    137e:	08 95       	ret

00001380 <Game_Modes_Menu>:

void Game_Modes_Menu(){
	strcpy_P(Menu_contents.linedata[1], (PGM_P)pgm_read_word(&(menu_string_table[4])));
    1380:	e8 e7       	ldi	r30, 0x78	; 120
    1382:	f0 e0       	ldi	r31, 0x00	; 0
    1384:	65 91       	lpm	r22, Z+
    1386:	74 91       	lpm	r23, Z
    1388:	86 eb       	ldi	r24, 0xB6	; 182
    138a:	91 e0       	ldi	r25, 0x01	; 1
    138c:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <strcpy_P>
	strcpy_P(Menu_contents.linedata[3], (PGM_P)pgm_read_word(&(menu_string_table[5])));
    1390:	ea e7       	ldi	r30, 0x7A	; 122
    1392:	f0 e0       	ldi	r31, 0x00	; 0
    1394:	65 91       	lpm	r22, Z+
    1396:	74 91       	lpm	r23, Z
    1398:	84 ed       	ldi	r24, 0xD4	; 212
    139a:	91 e0       	ldi	r25, 0x01	; 1
    139c:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <strcpy_P>
	strcpy_P(Menu_contents.linedata[4], (PGM_P)pgm_read_word(&(menu_string_table[6])));
    13a0:	ec e7       	ldi	r30, 0x7C	; 124
    13a2:	f0 e0       	ldi	r31, 0x00	; 0
    13a4:	65 91       	lpm	r22, Z+
    13a6:	74 91       	lpm	r23, Z
    13a8:	83 ee       	ldi	r24, 0xE3	; 227
    13aa:	91 e0       	ldi	r25, 0x01	; 1
    13ac:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <strcpy_P>
	strcpy_P(Menu_contents.linedata[5], (PGM_P)pgm_read_word(&(menu_string_table[0])));
    13b0:	e0 e7       	ldi	r30, 0x70	; 112
    13b2:	f0 e0       	ldi	r31, 0x00	; 0
    13b4:	65 91       	lpm	r22, Z+
    13b6:	74 91       	lpm	r23, Z
    13b8:	82 ef       	ldi	r24, 0xF2	; 242
    13ba:	91 e0       	ldi	r25, 0x01	; 1
    13bc:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <strcpy_P>
	strcpy_P(Menu_contents.linedata[8], (PGM_P)pgm_read_word(&(menu_string_table[1])));
    13c0:	e2 e7       	ldi	r30, 0x72	; 114
    13c2:	f0 e0       	ldi	r31, 0x00	; 0
    13c4:	65 91       	lpm	r22, Z+
    13c6:	74 91       	lpm	r23, Z
    13c8:	8f e1       	ldi	r24, 0x1F	; 31
    13ca:	92 e0       	ldi	r25, 0x02	; 2
    13cc:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <strcpy_P>
	Menu_contents.menu_index = 2;
    13d0:	e5 ea       	ldi	r30, 0xA5	; 165
    13d2:	f1 e0       	ldi	r31, 0x01	; 1
    13d4:	82 e0       	ldi	r24, 0x02	; 2
    13d6:	80 83       	st	Z, r24
	Menu_contents.current_menu = 1;
    13d8:	81 e0       	ldi	r24, 0x01	; 1
    13da:	81 83       	std	Z+1, r24	; 0x01
	Menu_print();
    13dc:	0e 94 4e 09 	call	0x129c	; 0x129c <Menu_print>
    13e0:	08 95       	ret

000013e2 <Controller_Menu>:
}

void Controller_Menu(){
	strcpy_P(Menu_contents.linedata[1], (PGM_P)pgm_read_word(&(menu_string_table[7])));
    13e2:	ee e7       	ldi	r30, 0x7E	; 126
    13e4:	f0 e0       	ldi	r31, 0x00	; 0
    13e6:	65 91       	lpm	r22, Z+
    13e8:	74 91       	lpm	r23, Z
    13ea:	86 eb       	ldi	r24, 0xB6	; 182
    13ec:	91 e0       	ldi	r25, 0x01	; 1
    13ee:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <strcpy_P>
	strcpy_P(Menu_contents.linedata[3], (PGM_P)pgm_read_word(&(menu_string_table[8])));
    13f2:	e0 e8       	ldi	r30, 0x80	; 128
    13f4:	f0 e0       	ldi	r31, 0x00	; 0
    13f6:	65 91       	lpm	r22, Z+
    13f8:	74 91       	lpm	r23, Z
    13fa:	84 ed       	ldi	r24, 0xD4	; 212
    13fc:	91 e0       	ldi	r25, 0x01	; 1
    13fe:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <strcpy_P>
	strcpy_P(Menu_contents.linedata[4], (PGM_P)pgm_read_word(&(menu_string_table[9])));
    1402:	e2 e8       	ldi	r30, 0x82	; 130
    1404:	f0 e0       	ldi	r31, 0x00	; 0
    1406:	65 91       	lpm	r22, Z+
    1408:	74 91       	lpm	r23, Z
    140a:	83 ee       	ldi	r24, 0xE3	; 227
    140c:	91 e0       	ldi	r25, 0x01	; 1
    140e:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <strcpy_P>
	strcpy_P(Menu_contents.linedata[5], (PGM_P)pgm_read_word(&(menu_string_table[0])));
    1412:	e0 e7       	ldi	r30, 0x70	; 112
    1414:	f0 e0       	ldi	r31, 0x00	; 0
    1416:	65 91       	lpm	r22, Z+
    1418:	74 91       	lpm	r23, Z
    141a:	82 ef       	ldi	r24, 0xF2	; 242
    141c:	91 e0       	ldi	r25, 0x01	; 1
    141e:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <strcpy_P>
	strcpy_P(Menu_contents.linedata[8], (PGM_P)pgm_read_word(&(menu_string_table[1])));
    1422:	e2 e7       	ldi	r30, 0x72	; 114
    1424:	f0 e0       	ldi	r31, 0x00	; 0
    1426:	65 91       	lpm	r22, Z+
    1428:	74 91       	lpm	r23, Z
    142a:	8f e1       	ldi	r24, 0x1F	; 31
    142c:	92 e0       	ldi	r25, 0x02	; 2
    142e:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <strcpy_P>
	Menu_contents.menu_index = 2;
    1432:	e5 ea       	ldi	r30, 0xA5	; 165
    1434:	f1 e0       	ldi	r31, 0x01	; 1
    1436:	82 e0       	ldi	r24, 0x02	; 2
    1438:	80 83       	st	Z, r24
	Menu_contents.current_menu = 2;
    143a:	81 83       	std	Z+1, r24	; 0x01
	Menu_print();
    143c:	0e 94 4e 09 	call	0x129c	; 0x129c <Menu_print>
    1440:	08 95       	ret

00001442 <Difficulty_Menu>:
}

void Difficulty_Menu(){
	strcpy_P(Menu_contents.linedata[1], (PGM_P)pgm_read_word(&(menu_string_table[10])));
    1442:	e4 e8       	ldi	r30, 0x84	; 132
    1444:	f0 e0       	ldi	r31, 0x00	; 0
    1446:	65 91       	lpm	r22, Z+
    1448:	74 91       	lpm	r23, Z
    144a:	86 eb       	ldi	r24, 0xB6	; 182
    144c:	91 e0       	ldi	r25, 0x01	; 1
    144e:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <strcpy_P>
	strcpy_P(Menu_contents.linedata[3], (PGM_P)pgm_read_word(&(menu_string_table[11])));
    1452:	e6 e8       	ldi	r30, 0x86	; 134
    1454:	f0 e0       	ldi	r31, 0x00	; 0
    1456:	65 91       	lpm	r22, Z+
    1458:	74 91       	lpm	r23, Z
    145a:	84 ed       	ldi	r24, 0xD4	; 212
    145c:	91 e0       	ldi	r25, 0x01	; 1
    145e:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <strcpy_P>
	strcpy_P(Menu_contents.linedata[4], (PGM_P)pgm_read_word(&(menu_string_table[12])));
    1462:	e8 e8       	ldi	r30, 0x88	; 136
    1464:	f0 e0       	ldi	r31, 0x00	; 0
    1466:	65 91       	lpm	r22, Z+
    1468:	74 91       	lpm	r23, Z
    146a:	83 ee       	ldi	r24, 0xE3	; 227
    146c:	91 e0       	ldi	r25, 0x01	; 1
    146e:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <strcpy_P>
	strcpy_P(Menu_contents.linedata[5], (PGM_P)pgm_read_word(&(menu_string_table[13])));
    1472:	ea e8       	ldi	r30, 0x8A	; 138
    1474:	f0 e0       	ldi	r31, 0x00	; 0
    1476:	65 91       	lpm	r22, Z+
    1478:	74 91       	lpm	r23, Z
    147a:	82 ef       	ldi	r24, 0xF2	; 242
    147c:	91 e0       	ldi	r25, 0x01	; 1
    147e:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <strcpy_P>
	strcpy_P(Menu_contents.linedata[8], (PGM_P)pgm_read_word(&(menu_string_table[1])));
    1482:	e2 e7       	ldi	r30, 0x72	; 114
    1484:	f0 e0       	ldi	r31, 0x00	; 0
    1486:	65 91       	lpm	r22, Z+
    1488:	74 91       	lpm	r23, Z
    148a:	8f e1       	ldi	r24, 0x1F	; 31
    148c:	92 e0       	ldi	r25, 0x02	; 2
    148e:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <strcpy_P>
	Menu_contents.menu_index = 2;
    1492:	e5 ea       	ldi	r30, 0xA5	; 165
    1494:	f1 e0       	ldi	r31, 0x01	; 1
    1496:	82 e0       	ldi	r24, 0x02	; 2
    1498:	80 83       	st	Z, r24
	Menu_contents.current_menu = 3;
    149a:	83 e0       	ldi	r24, 0x03	; 3
    149c:	81 83       	std	Z+1, r24	; 0x01
	Menu_print();
    149e:	0e 94 4e 09 	call	0x129c	; 0x129c <Menu_print>
    14a2:	08 95       	ret

000014a4 <Game_Over_Menu>:
	Menu_contents.menu_index = 0;
	Menu_contents.current_menu = 4;
	Game_print();
}

void Game_Over_Menu(){
    14a4:	cf 93       	push	r28
    14a6:	df 93       	push	r29
	strcpy_P(Menu_contents.linedata[1], (PGM_P)pgm_read_word(&(menu_string_table[17])));
    14a8:	e2 e9       	ldi	r30, 0x92	; 146
    14aa:	f0 e0       	ldi	r31, 0x00	; 0
    14ac:	65 91       	lpm	r22, Z+
    14ae:	74 91       	lpm	r23, Z
    14b0:	86 eb       	ldi	r24, 0xB6	; 182
    14b2:	91 e0       	ldi	r25, 0x01	; 1
    14b4:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <strcpy_P>
	strcpy_P(Menu_contents.linedata[3], (PGM_P)pgm_read_word(&(menu_string_table[0])));
    14b8:	c0 e7       	ldi	r28, 0x70	; 112
    14ba:	d0 e0       	ldi	r29, 0x00	; 0
    14bc:	fe 01       	movw	r30, r28
    14be:	65 91       	lpm	r22, Z+
    14c0:	74 91       	lpm	r23, Z
    14c2:	84 ed       	ldi	r24, 0xD4	; 212
    14c4:	91 e0       	ldi	r25, 0x01	; 1
    14c6:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <strcpy_P>
	strcpy_P(Menu_contents.linedata[4], (PGM_P)pgm_read_word(&(menu_string_table[0])));
    14ca:	fe 01       	movw	r30, r28
    14cc:	65 91       	lpm	r22, Z+
    14ce:	74 91       	lpm	r23, Z
    14d0:	83 ee       	ldi	r24, 0xE3	; 227
    14d2:	91 e0       	ldi	r25, 0x01	; 1
    14d4:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <strcpy_P>
	strcpy_P(Menu_contents.linedata[5], (PGM_P)pgm_read_word(&(menu_string_table[0])));
    14d8:	fe 01       	movw	r30, r28
    14da:	65 91       	lpm	r22, Z+
    14dc:	74 91       	lpm	r23, Z
    14de:	82 ef       	ldi	r24, 0xF2	; 242
    14e0:	91 e0       	ldi	r25, 0x01	; 1
    14e2:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <strcpy_P>
	strcpy_P(Menu_contents.linedata[8], (PGM_P)pgm_read_word(&(menu_string_table[18])));
    14e6:	e4 e9       	ldi	r30, 0x94	; 148
    14e8:	f0 e0       	ldi	r31, 0x00	; 0
    14ea:	65 91       	lpm	r22, Z+
    14ec:	74 91       	lpm	r23, Z
    14ee:	8f e1       	ldi	r24, 0x1F	; 31
    14f0:	92 e0       	ldi	r25, 0x02	; 2
    14f2:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <strcpy_P>
	Menu_contents.current_menu = 5;
    14f6:	e5 ea       	ldi	r30, 0xA5	; 165
    14f8:	f1 e0       	ldi	r31, 0x01	; 1
    14fa:	85 e0       	ldi	r24, 0x05	; 5
    14fc:	81 83       	std	Z+1, r24	; 0x01
	Menu_contents.menu_index = 7;
    14fe:	87 e0       	ldi	r24, 0x07	; 7
    1500:	80 83       	st	Z, r24
	Menu_print();
    1502:	0e 94 4e 09 	call	0x129c	; 0x129c <Menu_print>
}
    1506:	df 91       	pop	r29
    1508:	cf 91       	pop	r28
    150a:	08 95       	ret

0000150c <Game_print>:
	}
	OLED_go_to_pos(Menu_contents.menu_index, 0);
	Menu_print_arrow();
}

void Game_print(){
    150c:	cf 93       	push	r28
    150e:	df 93       	push	r29
	OLED_home();
    1510:	0e 94 0a 0c 	call	0x1814	; 0x1814 <OLED_home>
	OLED_printf(Menu_contents.linedata[1]);
    1514:	86 eb       	ldi	r24, 0xB6	; 182
    1516:	91 e0       	ldi	r25, 0x01	; 1
    1518:	0e 94 45 0c 	call	0x188a	; 0x188a <OLED_printf>
	for (int i = 0; i < 8; i++){
    151c:	c0 e0       	ldi	r28, 0x00	; 0
    151e:	d0 e0       	ldi	r29, 0x00	; 0
    1520:	10 c0       	rjmp	.+32     	; 0x1542 <Game_print+0x36>
		OLED_go_to_pos(i, 0);
    1522:	60 e0       	ldi	r22, 0x00	; 0
    1524:	70 e0       	ldi	r23, 0x00	; 0
    1526:	ce 01       	movw	r24, r28
    1528:	0e 94 01 0c 	call	0x1802	; 0x1802 <OLED_go_to_pos>
		OLED_printf(Menu_contents.linedata[i+1]);
    152c:	21 96       	adiw	r28, 0x01	; 1
    152e:	2f e0       	ldi	r18, 0x0F	; 15
    1530:	2c 9f       	mul	r18, r28
    1532:	c0 01       	movw	r24, r0
    1534:	2d 9f       	mul	r18, r29
    1536:	90 0d       	add	r25, r0
    1538:	11 24       	eor	r1, r1
    153a:	89 55       	subi	r24, 0x59	; 89
    153c:	9e 4f       	sbci	r25, 0xFE	; 254
    153e:	0e 94 45 0c 	call	0x188a	; 0x188a <OLED_printf>
}

void Game_print(){
	OLED_home();
	OLED_printf(Menu_contents.linedata[1]);
	for (int i = 0; i < 8; i++){
    1542:	c8 30       	cpi	r28, 0x08	; 8
    1544:	d1 05       	cpc	r29, r1
    1546:	6c f3       	brlt	.-38     	; 0x1522 <Game_print+0x16>
		OLED_go_to_pos(i, 0);
		OLED_printf(Menu_contents.linedata[i+1]);
		}
}
    1548:	df 91       	pop	r29
    154a:	cf 91       	pop	r28
    154c:	08 95       	ret

0000154e <Standard_mode_Menu>:
	Menu_contents.menu_index = 2;
	Menu_contents.current_menu = 3;
	Menu_print();
}

void Standard_mode_Menu(){
    154e:	cf 93       	push	r28
    1550:	df 93       	push	r29
	strcpy_P(Menu_contents.linedata[1], (PGM_P)pgm_read_word(&(menu_string_table[14])));
    1552:	ec e8       	ldi	r30, 0x8C	; 140
    1554:	f0 e0       	ldi	r31, 0x00	; 0
    1556:	65 91       	lpm	r22, Z+
    1558:	74 91       	lpm	r23, Z
    155a:	86 eb       	ldi	r24, 0xB6	; 182
    155c:	91 e0       	ldi	r25, 0x01	; 1
    155e:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <strcpy_P>
	strcpy_P(Menu_contents.linedata[3], (PGM_P)pgm_read_word(&(menu_string_table[16])));
    1562:	e0 e9       	ldi	r30, 0x90	; 144
    1564:	f0 e0       	ldi	r31, 0x00	; 0
    1566:	65 91       	lpm	r22, Z+
    1568:	74 91       	lpm	r23, Z
    156a:	84 ed       	ldi	r24, 0xD4	; 212
    156c:	91 e0       	ldi	r25, 0x01	; 1
    156e:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <strcpy_P>
	strcpy_P(Menu_contents.linedata[4], (PGM_P)pgm_read_word(&(menu_string_table[0])));
    1572:	c0 e7       	ldi	r28, 0x70	; 112
    1574:	d0 e0       	ldi	r29, 0x00	; 0
    1576:	fe 01       	movw	r30, r28
    1578:	65 91       	lpm	r22, Z+
    157a:	74 91       	lpm	r23, Z
    157c:	83 ee       	ldi	r24, 0xE3	; 227
    157e:	91 e0       	ldi	r25, 0x01	; 1
    1580:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <strcpy_P>
	strcpy_P(Menu_contents.linedata[5], (PGM_P)pgm_read_word(&(menu_string_table[0])));
    1584:	fe 01       	movw	r30, r28
    1586:	65 91       	lpm	r22, Z+
    1588:	74 91       	lpm	r23, Z
    158a:	82 ef       	ldi	r24, 0xF2	; 242
    158c:	91 e0       	ldi	r25, 0x01	; 1
    158e:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <strcpy_P>
	strcpy_P(Menu_contents.linedata[8], (PGM_P)pgm_read_word(&(menu_string_table[0])));
    1592:	fe 01       	movw	r30, r28
    1594:	65 91       	lpm	r22, Z+
    1596:	74 91       	lpm	r23, Z
    1598:	8f e1       	ldi	r24, 0x1F	; 31
    159a:	92 e0       	ldi	r25, 0x02	; 2
    159c:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <strcpy_P>
	Menu_contents.menu_index = 0;
    15a0:	e5 ea       	ldi	r30, 0xA5	; 165
    15a2:	f1 e0       	ldi	r31, 0x01	; 1
    15a4:	10 82       	st	Z, r1
	Menu_contents.current_menu = 4;
    15a6:	84 e0       	ldi	r24, 0x04	; 4
    15a8:	81 83       	std	Z+1, r24	; 0x01
	Game_print();
    15aa:	0e 94 86 0a 	call	0x150c	; 0x150c <Game_print>
}
    15ae:	df 91       	pop	r29
    15b0:	cf 91       	pop	r28
    15b2:	08 95       	ret

000015b4 <Arcade_mode_Menu>:

void Arcade_mode_Menu(){
    15b4:	cf 93       	push	r28
    15b6:	df 93       	push	r29
	strcpy_P(Menu_contents.linedata[1], (PGM_P)pgm_read_word(&(menu_string_table[15])));
    15b8:	ee e8       	ldi	r30, 0x8E	; 142
    15ba:	f0 e0       	ldi	r31, 0x00	; 0
    15bc:	65 91       	lpm	r22, Z+
    15be:	74 91       	lpm	r23, Z
    15c0:	86 eb       	ldi	r24, 0xB6	; 182
    15c2:	91 e0       	ldi	r25, 0x01	; 1
    15c4:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <strcpy_P>
	strcpy_P(Menu_contents.linedata[3], (PGM_P)pgm_read_word(&(menu_string_table[16])));
    15c8:	e0 e9       	ldi	r30, 0x90	; 144
    15ca:	f0 e0       	ldi	r31, 0x00	; 0
    15cc:	65 91       	lpm	r22, Z+
    15ce:	74 91       	lpm	r23, Z
    15d0:	84 ed       	ldi	r24, 0xD4	; 212
    15d2:	91 e0       	ldi	r25, 0x01	; 1
    15d4:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <strcpy_P>
	strcpy_P(Menu_contents.linedata[4], (PGM_P)pgm_read_word(&(menu_string_table[0])));
    15d8:	c0 e7       	ldi	r28, 0x70	; 112
    15da:	d0 e0       	ldi	r29, 0x00	; 0
    15dc:	fe 01       	movw	r30, r28
    15de:	65 91       	lpm	r22, Z+
    15e0:	74 91       	lpm	r23, Z
    15e2:	83 ee       	ldi	r24, 0xE3	; 227
    15e4:	91 e0       	ldi	r25, 0x01	; 1
    15e6:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <strcpy_P>
	strcpy_P(Menu_contents.linedata[5], (PGM_P)pgm_read_word(&(menu_string_table[0])));
    15ea:	fe 01       	movw	r30, r28
    15ec:	65 91       	lpm	r22, Z+
    15ee:	74 91       	lpm	r23, Z
    15f0:	82 ef       	ldi	r24, 0xF2	; 242
    15f2:	91 e0       	ldi	r25, 0x01	; 1
    15f4:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <strcpy_P>
	strcpy_P(Menu_contents.linedata[8], (PGM_P)pgm_read_word(&(menu_string_table[0])));
    15f8:	fe 01       	movw	r30, r28
    15fa:	65 91       	lpm	r22, Z+
    15fc:	74 91       	lpm	r23, Z
    15fe:	8f e1       	ldi	r24, 0x1F	; 31
    1600:	92 e0       	ldi	r25, 0x02	; 2
    1602:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <strcpy_P>
	Menu_contents.menu_index = 0;
    1606:	e5 ea       	ldi	r30, 0xA5	; 165
    1608:	f1 e0       	ldi	r31, 0x01	; 1
    160a:	10 82       	st	Z, r1
	Menu_contents.current_menu = 4;
    160c:	84 e0       	ldi	r24, 0x04	; 4
    160e:	81 83       	std	Z+1, r24	; 0x01
	Game_print();
    1610:	0e 94 86 0a 	call	0x150c	; 0x150c <Game_print>
}
    1614:	df 91       	pop	r29
    1616:	cf 91       	pop	r28
    1618:	08 95       	ret

0000161a <Change_page>:
		OLED_printf(Menu_contents.linedata[i+1]);
		}
}

void Change_page(){
	int current_index = Menu_contents.menu_index;
    161a:	e5 ea       	ldi	r30, 0xA5	; 165
    161c:	f1 e0       	ldi	r31, 0x01	; 1
    161e:	80 81       	ld	r24, Z
    1620:	90 e0       	ldi	r25, 0x00	; 0
	
	//printf("%d\r\n",Menu_contents.current_menu);
	if (Menu_contents.current_menu == 0){
    1622:	21 81       	ldd	r18, Z+1	; 0x01
    1624:	21 11       	cpse	r18, r1
    1626:	0a c0       	rjmp	.+20     	; 0x163c <Change_page+0x22>
		if (current_index == 2){
    1628:	02 97       	sbiw	r24, 0x02	; 2
    162a:	09 f0       	breq	.+2      	; 0x162e <Change_page+0x14>
    162c:	8f c0       	rjmp	.+286    	; 0x174c <Change_page+0x132>
			//printf("%d\r\n",Menu_contents.current_menu);
			OLED_reset();
    162e:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <OLED_reset>
			Game_Modes_Menu();
    1632:	0e 94 c0 09 	call	0x1380	; 0x1380 <Game_Modes_Menu>
			Game_Modes_Menu();
    1636:	0e 94 c0 09 	call	0x1380	; 0x1380 <Game_Modes_Menu>
    163a:	08 95       	ret
		}
		return;
	}
	
	if (Menu_contents.current_menu == 1){
    163c:	20 91 a6 01 	lds	r18, 0x01A6	; 0x8001a6 <Menu_contents+0x1>
    1640:	21 30       	cpi	r18, 0x01	; 1
    1642:	19 f5       	brne	.+70     	; 0x168a <Change_page+0x70>

		if (current_index == 2){ // Normal mode
    1644:	82 30       	cpi	r24, 0x02	; 2
    1646:	91 05       	cpc	r25, r1
    1648:	49 f4       	brne	.+18     	; 0x165c <Change_page+0x42>
			OLED_reset();
    164a:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <OLED_reset>
			Controller_Menu();
    164e:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <Controller_Menu>
			Controller_Menu();
    1652:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <Controller_Menu>
			game_mode1 = 0; //NORMAL
    1656:	10 92 9a 01 	sts	0x019A, r1	; 0x80019a <game_mode1>
			return;
    165a:	08 95       	ret
		}
		
		if (current_index == 3){ // Arcade mode
    165c:	83 30       	cpi	r24, 0x03	; 3
    165e:	91 05       	cpc	r25, r1
    1660:	51 f4       	brne	.+20     	; 0x1676 <Change_page+0x5c>
			OLED_reset();
    1662:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <OLED_reset>
			Controller_Menu();
    1666:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <Controller_Menu>
			Controller_Menu();
    166a:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <Controller_Menu>
			game_mode1 = 1; //ARCADE
    166e:	81 e0       	ldi	r24, 0x01	; 1
    1670:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <game_mode1>
			return;
    1674:	08 95       	ret
		}
		
		if (current_index == 7){
    1676:	87 30       	cpi	r24, 0x07	; 7
    1678:	91 05       	cpc	r25, r1
    167a:	39 f4       	brne	.+14     	; 0x168a <Change_page+0x70>
			OLED_reset();
    167c:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <OLED_reset>
			Main_menu();
    1680:	0e 94 78 09 	call	0x12f0	; 0x12f0 <Main_menu>
			Main_menu();
    1684:	0e 94 78 09 	call	0x12f0	; 0x12f0 <Main_menu>
			return;
    1688:	08 95       	ret
		}
	}
	
	if (Menu_contents.current_menu == 2){
    168a:	20 91 a6 01 	lds	r18, 0x01A6	; 0x8001a6 <Menu_contents+0x1>
    168e:	22 30       	cpi	r18, 0x02	; 2
    1690:	19 f5       	brne	.+70     	; 0x16d8 <Change_page+0xbe>
		if (current_index == 2){ // Joystick
    1692:	82 30       	cpi	r24, 0x02	; 2
    1694:	91 05       	cpc	r25, r1
    1696:	49 f4       	brne	.+18     	; 0x16aa <Change_page+0x90>
			OLED_reset();
    1698:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <OLED_reset>
			Difficulty_Menu();
    169c:	0e 94 21 0a 	call	0x1442	; 0x1442 <Difficulty_Menu>
			Difficulty_Menu();
    16a0:	0e 94 21 0a 	call	0x1442	; 0x1442 <Difficulty_Menu>
			controller_setting = 0; //JOYSTICK
    16a4:	10 92 97 01 	sts	0x0197, r1	; 0x800197 <controller_setting>
			return;
    16a8:	08 95       	ret
		}
		
		if (current_index == 3){
    16aa:	83 30       	cpi	r24, 0x03	; 3
    16ac:	91 05       	cpc	r25, r1
    16ae:	51 f4       	brne	.+20     	; 0x16c4 <Change_page+0xaa>
			OLED_reset();
    16b0:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <OLED_reset>
			Difficulty_Menu();
    16b4:	0e 94 21 0a 	call	0x1442	; 0x1442 <Difficulty_Menu>
			Difficulty_Menu();
    16b8:	0e 94 21 0a 	call	0x1442	; 0x1442 <Difficulty_Menu>
			controller_setting = 1; //SLIDER
    16bc:	81 e0       	ldi	r24, 0x01	; 1
    16be:	80 93 97 01 	sts	0x0197, r24	; 0x800197 <controller_setting>
			return;
    16c2:	08 95       	ret
		}
		
		if (current_index == 7){
    16c4:	87 30       	cpi	r24, 0x07	; 7
    16c6:	91 05       	cpc	r25, r1
    16c8:	39 f4       	brne	.+14     	; 0x16d8 <Change_page+0xbe>
			OLED_reset();
    16ca:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <OLED_reset>
			Game_Modes_Menu();
    16ce:	0e 94 c0 09 	call	0x1380	; 0x1380 <Game_Modes_Menu>
			Game_Modes_Menu();
    16d2:	0e 94 c0 09 	call	0x1380	; 0x1380 <Game_Modes_Menu>
			return;
    16d6:	08 95       	ret
		}
	}
	
	if (Menu_contents.current_menu == 3){
    16d8:	20 91 a6 01 	lds	r18, 0x01A6	; 0x8001a6 <Menu_contents+0x1>
    16dc:	23 30       	cpi	r18, 0x03	; 3
    16de:	51 f5       	brne	.+84     	; 0x1734 <Change_page+0x11a>
		if (current_index == 2){ // EASY
    16e0:	82 30       	cpi	r24, 0x02	; 2
    16e2:	91 05       	cpc	r25, r1
    16e4:	39 f4       	brne	.+14     	; 0x16f4 <Change_page+0xda>
			OLED_reset();
    16e6:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <OLED_reset>
			difficulty = 0;
    16ea:	10 92 99 01 	sts	0x0199, r1	; 0x800199 <difficulty>
			//printf("%d \r\n",game_mode1);
			start_game();
    16ee:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <start_game>
			return;
    16f2:	08 95       	ret
		}
		
		if (current_index == 3){ // MEDIUM
    16f4:	83 30       	cpi	r24, 0x03	; 3
    16f6:	91 05       	cpc	r25, r1
    16f8:	41 f4       	brne	.+16     	; 0x170a <Change_page+0xf0>
			OLED_reset();
    16fa:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <OLED_reset>
			difficulty = 1;
    16fe:	81 e0       	ldi	r24, 0x01	; 1
    1700:	80 93 99 01 	sts	0x0199, r24	; 0x800199 <difficulty>
			start_game();
    1704:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <start_game>
			return;
    1708:	08 95       	ret
		}
		
		if (current_index == 4){ // HARD
    170a:	84 30       	cpi	r24, 0x04	; 4
    170c:	91 05       	cpc	r25, r1
    170e:	41 f4       	brne	.+16     	; 0x1720 <Change_page+0x106>
			OLED_reset();
    1710:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <OLED_reset>
			difficulty = 2;
    1714:	82 e0       	ldi	r24, 0x02	; 2
    1716:	80 93 99 01 	sts	0x0199, r24	; 0x800199 <difficulty>
			start_game();
    171a:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <start_game>
			return;
    171e:	08 95       	ret
		}
		
		if (current_index == 7){
    1720:	87 30       	cpi	r24, 0x07	; 7
    1722:	91 05       	cpc	r25, r1
    1724:	39 f4       	brne	.+14     	; 0x1734 <Change_page+0x11a>
			OLED_reset();
    1726:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <OLED_reset>
			Controller_Menu();
    172a:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <Controller_Menu>
			Controller_Menu();
    172e:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <Controller_Menu>
			return;
    1732:	08 95       	ret
	}
	
	
	
	
	if (Menu_contents.current_menu == 5){
    1734:	20 91 a6 01 	lds	r18, 0x01A6	; 0x8001a6 <Menu_contents+0x1>
    1738:	25 30       	cpi	r18, 0x05	; 5
    173a:	41 f4       	brne	.+16     	; 0x174c <Change_page+0x132>
		if (current_index == 7){
    173c:	07 97       	sbiw	r24, 0x07	; 7
    173e:	31 f4       	brne	.+12     	; 0x174c <Change_page+0x132>
			OLED_reset();
    1740:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <OLED_reset>
			Main_menu();
    1744:	0e 94 78 09 	call	0x12f0	; 0x12f0 <Main_menu>
			Main_menu();
    1748:	0e 94 78 09 	call	0x12f0	; 0x12f0 <Main_menu>
    174c:	08 95       	ret

0000174e <OLED_write_c>:
	 OLED_write_c(0xaf); // display on
 }

void OLED_write_c(uint8_t command){
	volatile char * oled = ( char *) 0x1000 ;
	oled [0]= command ;
    174e:	80 93 00 10 	sts	0x1000, r24	; 0x801000 <__bss_end+0xdd7>
    1752:	08 95       	ret

00001754 <OLED_init>:
#include "OLED.h"


void OLED_init() // Init function is taken from OLED LY190-128064.pdf, from blackboard
 {
	 OLED_write_c(0xae); // display off
    1754:	8e ea       	ldi	r24, 0xAE	; 174
    1756:	0e 94 a7 0b 	call	0x174e	; 0x174e <OLED_write_c>
	 OLED_write_c(0xa1); //segment remap
    175a:	81 ea       	ldi	r24, 0xA1	; 161
    175c:	0e 94 a7 0b 	call	0x174e	; 0x174e <OLED_write_c>
	 OLED_write_c(0xda); //common pads hardware: alternative
    1760:	8a ed       	ldi	r24, 0xDA	; 218
    1762:	0e 94 a7 0b 	call	0x174e	; 0x174e <OLED_write_c>
	 OLED_write_c(0x12);
    1766:	82 e1       	ldi	r24, 0x12	; 18
    1768:	0e 94 a7 0b 	call	0x174e	; 0x174e <OLED_write_c>
	 OLED_write_c(0xc8); //common output scan direction:com63~com0
    176c:	88 ec       	ldi	r24, 0xC8	; 200
    176e:	0e 94 a7 0b 	call	0x174e	; 0x174e <OLED_write_c>
	 OLED_write_c(0xa8); //multiplex ration mode:63
    1772:	88 ea       	ldi	r24, 0xA8	; 168
    1774:	0e 94 a7 0b 	call	0x174e	; 0x174e <OLED_write_c>
	 OLED_write_c(0x3f);
    1778:	8f e3       	ldi	r24, 0x3F	; 63
    177a:	0e 94 a7 0b 	call	0x174e	; 0x174e <OLED_write_c>
	 OLED_write_c(0xd5); //display divide ratio/osc. freq. mode
    177e:	85 ed       	ldi	r24, 0xD5	; 213
    1780:	0e 94 a7 0b 	call	0x174e	; 0x174e <OLED_write_c>
	 OLED_write_c(0x80);
    1784:	80 e8       	ldi	r24, 0x80	; 128
    1786:	0e 94 a7 0b 	call	0x174e	; 0x174e <OLED_write_c>
	 OLED_write_c(0x81); //contrast control
    178a:	81 e8       	ldi	r24, 0x81	; 129
    178c:	0e 94 a7 0b 	call	0x174e	; 0x174e <OLED_write_c>
	 OLED_write_c(0x50);
    1790:	80 e5       	ldi	r24, 0x50	; 80
    1792:	0e 94 a7 0b 	call	0x174e	; 0x174e <OLED_write_c>
	 OLED_write_c(0xd9); //set pre-charge period
    1796:	89 ed       	ldi	r24, 0xD9	; 217
    1798:	0e 94 a7 0b 	call	0x174e	; 0x174e <OLED_write_c>
	 OLED_write_c(0x21);
    179c:	81 e2       	ldi	r24, 0x21	; 33
    179e:	0e 94 a7 0b 	call	0x174e	; 0x174e <OLED_write_c>
	 OLED_write_c(0x20); //Set Memory Addressing Mode
    17a2:	80 e2       	ldi	r24, 0x20	; 32
    17a4:	0e 94 a7 0b 	call	0x174e	; 0x174e <OLED_write_c>
	 OLED_write_c(0x02);
    17a8:	82 e0       	ldi	r24, 0x02	; 2
    17aa:	0e 94 a7 0b 	call	0x174e	; 0x174e <OLED_write_c>
	 OLED_write_c(0xdb); //VCOM deselect level mode
    17ae:	8b ed       	ldi	r24, 0xDB	; 219
    17b0:	0e 94 a7 0b 	call	0x174e	; 0x174e <OLED_write_c>
	 OLED_write_c(0x30);
    17b4:	80 e3       	ldi	r24, 0x30	; 48
    17b6:	0e 94 a7 0b 	call	0x174e	; 0x174e <OLED_write_c>
	 OLED_write_c(0xad); //master configuration
    17ba:	8d ea       	ldi	r24, 0xAD	; 173
    17bc:	0e 94 a7 0b 	call	0x174e	; 0x174e <OLED_write_c>
	 OLED_write_c(0x00);
    17c0:	80 e0       	ldi	r24, 0x00	; 0
    17c2:	0e 94 a7 0b 	call	0x174e	; 0x174e <OLED_write_c>
	 OLED_write_c(0xa4); //out follows RAM content
    17c6:	84 ea       	ldi	r24, 0xA4	; 164
    17c8:	0e 94 a7 0b 	call	0x174e	; 0x174e <OLED_write_c>
	 OLED_write_c(0xa6); //set normal display
    17cc:	86 ea       	ldi	r24, 0xA6	; 166
    17ce:	0e 94 a7 0b 	call	0x174e	; 0x174e <OLED_write_c>
	 OLED_write_c(0xaf); // display on
    17d2:	8f ea       	ldi	r24, 0xAF	; 175
    17d4:	0e 94 a7 0b 	call	0x174e	; 0x174e <OLED_write_c>
    17d8:	08 95       	ret

000017da <OLED_write_d>:
	oled [0]= command ;
}

void OLED_write_d(uint8_t data){
	volatile char * oled = ( char *) 0x1200 ;
	oled [0]= data ;
    17da:	80 93 00 12 	sts	0x1200, r24	; 0x801200 <__bss_end+0xfd7>
    17de:	08 95       	ret

000017e0 <OLED_go_to_line>:
}

void OLED_go_to_line(uint8_t line){
	uint8_t data = line | 0xB0;
	OLED_write_c(data);
    17e0:	80 6b       	ori	r24, 0xB0	; 176
    17e2:	0e 94 a7 0b 	call	0x174e	; 0x174e <OLED_write_c>
    17e6:	08 95       	ret

000017e8 <OLED_go_to_column>:
}

void OLED_go_to_column(uint8_t column){
    17e8:	cf 93       	push	r28
	uint8_t lower = column & 0xF;
    17ea:	c8 2f       	mov	r28, r24
    17ec:	cf 70       	andi	r28, 0x0F	; 15
	uint8_t upper = (column >> 4) | 0x10;
    17ee:	82 95       	swap	r24
    17f0:	8f 70       	andi	r24, 0x0F	; 15
	OLED_write_c(upper);
    17f2:	80 61       	ori	r24, 0x10	; 16
    17f4:	0e 94 a7 0b 	call	0x174e	; 0x174e <OLED_write_c>
	OLED_write_c(lower);
    17f8:	8c 2f       	mov	r24, r28
    17fa:	0e 94 a7 0b 	call	0x174e	; 0x174e <OLED_write_c>
}
    17fe:	cf 91       	pop	r28
    1800:	08 95       	ret

00001802 <OLED_go_to_pos>:

void OLED_go_to_pos(uint8_t line, uint8_t column){
    1802:	cf 93       	push	r28
    1804:	c6 2f       	mov	r28, r22
	OLED_go_to_line(line);
    1806:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <OLED_go_to_line>
	OLED_go_to_column(column);
    180a:	8c 2f       	mov	r24, r28
    180c:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <OLED_go_to_column>
}
    1810:	cf 91       	pop	r28
    1812:	08 95       	ret

00001814 <OLED_home>:

void OLED_home(){
	OLED_go_to_pos(0,0);
    1814:	60 e0       	ldi	r22, 0x00	; 0
    1816:	80 e0       	ldi	r24, 0x00	; 0
    1818:	0e 94 01 0c 	call	0x1802	; 0x1802 <OLED_go_to_pos>
    181c:	08 95       	ret

0000181e <OLED_print_c>:
}

void OLED_print_c(uint8_t letter){
    181e:	cf 93       	push	r28
    1820:	df 93       	push	r29
    1822:	d8 2f       	mov	r29, r24
	for (uint8_t i = 0; i < 8; i++){
    1824:	c0 e0       	ldi	r28, 0x00	; 0
    1826:	11 c0       	rjmp	.+34     	; 0x184a <OLED_print_c+0x2c>
		uint8_t address = pgm_read_byte(&(font8[(letter - 0x20)][i]));
    1828:	ed 2f       	mov	r30, r29
    182a:	f0 e0       	ldi	r31, 0x00	; 0
    182c:	b0 97       	sbiw	r30, 0x20	; 32
    182e:	ee 0f       	add	r30, r30
    1830:	ff 1f       	adc	r31, r31
    1832:	ee 0f       	add	r30, r30
    1834:	ff 1f       	adc	r31, r31
    1836:	ee 0f       	add	r30, r30
    1838:	ff 1f       	adc	r31, r31
    183a:	ec 0f       	add	r30, r28
    183c:	f1 1d       	adc	r31, r1
    183e:	e5 5b       	subi	r30, 0xB5	; 181
    1840:	fe 4f       	sbci	r31, 0xFE	; 254
    1842:	84 91       	lpm	r24, Z
		OLED_write_d(address);
    1844:	0e 94 ed 0b 	call	0x17da	; 0x17da <OLED_write_d>
void OLED_home(){
	OLED_go_to_pos(0,0);
}

void OLED_print_c(uint8_t letter){
	for (uint8_t i = 0; i < 8; i++){
    1848:	cf 5f       	subi	r28, 0xFF	; 255
    184a:	c8 30       	cpi	r28, 0x08	; 8
    184c:	68 f3       	brcs	.-38     	; 0x1828 <OLED_print_c+0xa>
		uint8_t address = pgm_read_byte(&(font8[(letter - 0x20)][i]));
		OLED_write_d(address);
		}
}
    184e:	df 91       	pop	r29
    1850:	cf 91       	pop	r28
    1852:	08 95       	ret

00001854 <OLED_print_num>:

void OLED_print_num(uint8_t num){
    1854:	cf 93       	push	r28
    1856:	df 93       	push	r29
    1858:	d8 2f       	mov	r29, r24
	for (uint8_t i = 0; i < 8; i++){
    185a:	c0 e0       	ldi	r28, 0x00	; 0
    185c:	11 c0       	rjmp	.+34     	; 0x1880 <OLED_print_num+0x2c>
		uint8_t address = pgm_read_byte(&(font8[(num + 0x12)][i]));
    185e:	ed 2f       	mov	r30, r29
    1860:	f0 e0       	ldi	r31, 0x00	; 0
    1862:	72 96       	adiw	r30, 0x12	; 18
    1864:	ee 0f       	add	r30, r30
    1866:	ff 1f       	adc	r31, r31
    1868:	ee 0f       	add	r30, r30
    186a:	ff 1f       	adc	r31, r31
    186c:	ee 0f       	add	r30, r30
    186e:	ff 1f       	adc	r31, r31
    1870:	ec 0f       	add	r30, r28
    1872:	f1 1d       	adc	r31, r1
    1874:	e5 5b       	subi	r30, 0xB5	; 181
    1876:	fe 4f       	sbci	r31, 0xFE	; 254
    1878:	84 91       	lpm	r24, Z
		OLED_write_d(address);
    187a:	0e 94 ed 0b 	call	0x17da	; 0x17da <OLED_write_d>
		OLED_write_d(address);
		}
}

void OLED_print_num(uint8_t num){
	for (uint8_t i = 0; i < 8; i++){
    187e:	cf 5f       	subi	r28, 0xFF	; 255
    1880:	c8 30       	cpi	r28, 0x08	; 8
    1882:	68 f3       	brcs	.-38     	; 0x185e <OLED_print_num+0xa>
		uint8_t address = pgm_read_byte(&(font8[(num + 0x12)][i]));
		OLED_write_d(address);
	}
}
    1884:	df 91       	pop	r29
    1886:	cf 91       	pop	r28
    1888:	08 95       	ret

0000188a <OLED_printf>:

void OLED_printf(char text[]){
    188a:	1f 93       	push	r17
    188c:	cf 93       	push	r28
    188e:	df 93       	push	r29
    1890:	ec 01       	movw	r28, r24
	for (uint8_t i = 0; i < strlen(text); i++){
    1892:	10 e0       	ldi	r17, 0x00	; 0
    1894:	07 c0       	rjmp	.+14     	; 0x18a4 <OLED_printf+0x1a>
		OLED_print_c(text[i]);
    1896:	fe 01       	movw	r30, r28
    1898:	e8 0f       	add	r30, r24
    189a:	f9 1f       	adc	r31, r25
    189c:	80 81       	ld	r24, Z
    189e:	0e 94 0f 0c 	call	0x181e	; 0x181e <OLED_print_c>
		OLED_write_d(address);
	}
}

void OLED_printf(char text[]){
	for (uint8_t i = 0; i < strlen(text); i++){
    18a2:	1f 5f       	subi	r17, 0xFF	; 255
    18a4:	81 2f       	mov	r24, r17
    18a6:	90 e0       	ldi	r25, 0x00	; 0
    18a8:	fe 01       	movw	r30, r28
    18aa:	01 90       	ld	r0, Z+
    18ac:	00 20       	and	r0, r0
    18ae:	e9 f7       	brne	.-6      	; 0x18aa <OLED_printf+0x20>
    18b0:	31 97       	sbiw	r30, 0x01	; 1
    18b2:	ec 1b       	sub	r30, r28
    18b4:	fd 0b       	sbc	r31, r29
    18b6:	8e 17       	cp	r24, r30
    18b8:	9f 07       	cpc	r25, r31
    18ba:	68 f3       	brcs	.-38     	; 0x1896 <OLED_printf+0xc>
		OLED_print_c(text[i]);
	}	
}
    18bc:	df 91       	pop	r29
    18be:	cf 91       	pop	r28
    18c0:	1f 91       	pop	r17
    18c2:	08 95       	ret

000018c4 <OLED_reset>:




void OLED_reset(){
    18c4:	cf 93       	push	r28
	OLED_write_c(0b10110000);
    18c6:	80 eb       	ldi	r24, 0xB0	; 176
    18c8:	0e 94 a7 0b 	call	0x174e	; 0x174e <OLED_write_c>
	for (uint8_t i = 0; i < 128; i++){
    18cc:	c0 e0       	ldi	r28, 0x00	; 0
    18ce:	04 c0       	rjmp	.+8      	; 0x18d8 <OLED_reset+0x14>
		OLED_write_d(0x00);
    18d0:	80 e0       	ldi	r24, 0x00	; 0
    18d2:	0e 94 ed 0b 	call	0x17da	; 0x17da <OLED_write_d>



void OLED_reset(){
	OLED_write_c(0b10110000);
	for (uint8_t i = 0; i < 128; i++){
    18d6:	cf 5f       	subi	r28, 0xFF	; 255
    18d8:	cc 23       	and	r28, r28
    18da:	d4 f7       	brge	.-12     	; 0x18d0 <OLED_reset+0xc>
		OLED_write_d(0x00);
	}
	OLED_write_c(0b10110001);
    18dc:	81 eb       	ldi	r24, 0xB1	; 177
    18de:	0e 94 a7 0b 	call	0x174e	; 0x174e <OLED_write_c>
	for (uint8_t i = 0; i < 128; i++){
    18e2:	c0 e0       	ldi	r28, 0x00	; 0
    18e4:	04 c0       	rjmp	.+8      	; 0x18ee <OLED_reset+0x2a>
		OLED_write_d(0x00);
    18e6:	80 e0       	ldi	r24, 0x00	; 0
    18e8:	0e 94 ed 0b 	call	0x17da	; 0x17da <OLED_write_d>
	OLED_write_c(0b10110000);
	for (uint8_t i = 0; i < 128; i++){
		OLED_write_d(0x00);
	}
	OLED_write_c(0b10110001);
	for (uint8_t i = 0; i < 128; i++){
    18ec:	cf 5f       	subi	r28, 0xFF	; 255
    18ee:	cc 23       	and	r28, r28
    18f0:	d4 f7       	brge	.-12     	; 0x18e6 <OLED_reset+0x22>
		OLED_write_d(0x00);
	}
	OLED_write_c(0b10110010);
    18f2:	82 eb       	ldi	r24, 0xB2	; 178
    18f4:	0e 94 a7 0b 	call	0x174e	; 0x174e <OLED_write_c>
	for (uint8_t i = 0; i < 128; i++){
    18f8:	c0 e0       	ldi	r28, 0x00	; 0
    18fa:	04 c0       	rjmp	.+8      	; 0x1904 <OLED_reset+0x40>
		OLED_write_d(0x00);
    18fc:	80 e0       	ldi	r24, 0x00	; 0
    18fe:	0e 94 ed 0b 	call	0x17da	; 0x17da <OLED_write_d>
	OLED_write_c(0b10110001);
	for (uint8_t i = 0; i < 128; i++){
		OLED_write_d(0x00);
	}
	OLED_write_c(0b10110010);
	for (uint8_t i = 0; i < 128; i++){
    1902:	cf 5f       	subi	r28, 0xFF	; 255
    1904:	cc 23       	and	r28, r28
    1906:	d4 f7       	brge	.-12     	; 0x18fc <OLED_reset+0x38>
		OLED_write_d(0x00);
	}
	OLED_write_c(0b10110011);
    1908:	83 eb       	ldi	r24, 0xB3	; 179
    190a:	0e 94 a7 0b 	call	0x174e	; 0x174e <OLED_write_c>
	for (uint8_t i = 0; i < 128; i++){
    190e:	c0 e0       	ldi	r28, 0x00	; 0
    1910:	04 c0       	rjmp	.+8      	; 0x191a <OLED_reset+0x56>
		OLED_write_d(0x00);
    1912:	80 e0       	ldi	r24, 0x00	; 0
    1914:	0e 94 ed 0b 	call	0x17da	; 0x17da <OLED_write_d>
	OLED_write_c(0b10110010);
	for (uint8_t i = 0; i < 128; i++){
		OLED_write_d(0x00);
	}
	OLED_write_c(0b10110011);
	for (uint8_t i = 0; i < 128; i++){
    1918:	cf 5f       	subi	r28, 0xFF	; 255
    191a:	cc 23       	and	r28, r28
    191c:	d4 f7       	brge	.-12     	; 0x1912 <OLED_reset+0x4e>
		OLED_write_d(0x00);
	}
	OLED_write_c(0b10110100);
    191e:	84 eb       	ldi	r24, 0xB4	; 180
    1920:	0e 94 a7 0b 	call	0x174e	; 0x174e <OLED_write_c>
	for (uint8_t i = 0; i < 128; i++){
    1924:	c0 e0       	ldi	r28, 0x00	; 0
    1926:	04 c0       	rjmp	.+8      	; 0x1930 <OLED_reset+0x6c>
		OLED_write_d(0x00);
    1928:	80 e0       	ldi	r24, 0x00	; 0
    192a:	0e 94 ed 0b 	call	0x17da	; 0x17da <OLED_write_d>
	OLED_write_c(0b10110011);
	for (uint8_t i = 0; i < 128; i++){
		OLED_write_d(0x00);
	}
	OLED_write_c(0b10110100);
	for (uint8_t i = 0; i < 128; i++){
    192e:	cf 5f       	subi	r28, 0xFF	; 255
    1930:	cc 23       	and	r28, r28
    1932:	d4 f7       	brge	.-12     	; 0x1928 <OLED_reset+0x64>
		OLED_write_d(0x00);
	}
	OLED_write_c(0b10110101);
    1934:	85 eb       	ldi	r24, 0xB5	; 181
    1936:	0e 94 a7 0b 	call	0x174e	; 0x174e <OLED_write_c>
	for (uint8_t i = 0; i < 128; i++){
    193a:	c0 e0       	ldi	r28, 0x00	; 0
    193c:	04 c0       	rjmp	.+8      	; 0x1946 <OLED_reset+0x82>
		OLED_write_d(0x00);
    193e:	80 e0       	ldi	r24, 0x00	; 0
    1940:	0e 94 ed 0b 	call	0x17da	; 0x17da <OLED_write_d>
	OLED_write_c(0b10110100);
	for (uint8_t i = 0; i < 128; i++){
		OLED_write_d(0x00);
	}
	OLED_write_c(0b10110101);
	for (uint8_t i = 0; i < 128; i++){
    1944:	cf 5f       	subi	r28, 0xFF	; 255
    1946:	cc 23       	and	r28, r28
    1948:	d4 f7       	brge	.-12     	; 0x193e <OLED_reset+0x7a>
		OLED_write_d(0x00);
	}
	OLED_write_c(0b10110110);
    194a:	86 eb       	ldi	r24, 0xB6	; 182
    194c:	0e 94 a7 0b 	call	0x174e	; 0x174e <OLED_write_c>
	for (uint8_t i = 0; i < 128; i++){
    1950:	c0 e0       	ldi	r28, 0x00	; 0
    1952:	04 c0       	rjmp	.+8      	; 0x195c <OLED_reset+0x98>
		OLED_write_d(0x00);
    1954:	80 e0       	ldi	r24, 0x00	; 0
    1956:	0e 94 ed 0b 	call	0x17da	; 0x17da <OLED_write_d>
	OLED_write_c(0b10110101);
	for (uint8_t i = 0; i < 128; i++){
		OLED_write_d(0x00);
	}
	OLED_write_c(0b10110110);
	for (uint8_t i = 0; i < 128; i++){
    195a:	cf 5f       	subi	r28, 0xFF	; 255
    195c:	cc 23       	and	r28, r28
    195e:	d4 f7       	brge	.-12     	; 0x1954 <OLED_reset+0x90>
		OLED_write_d(0x00);
	}
	OLED_write_c(0b10110111);
    1960:	87 eb       	ldi	r24, 0xB7	; 183
    1962:	0e 94 a7 0b 	call	0x174e	; 0x174e <OLED_write_c>
	for (uint8_t i = 0; i < 128; i++){
    1966:	c0 e0       	ldi	r28, 0x00	; 0
    1968:	04 c0       	rjmp	.+8      	; 0x1972 <OLED_reset+0xae>
		OLED_write_d(0x00);
    196a:	80 e0       	ldi	r24, 0x00	; 0
    196c:	0e 94 ed 0b 	call	0x17da	; 0x17da <OLED_write_d>
	OLED_write_c(0b10110110);
	for (uint8_t i = 0; i < 128; i++){
		OLED_write_d(0x00);
	}
	OLED_write_c(0b10110111);
	for (uint8_t i = 0; i < 128; i++){
    1970:	cf 5f       	subi	r28, 0xFF	; 255
    1972:	cc 23       	and	r28, r28
    1974:	d4 f7       	brge	.-12     	; 0x196a <OLED_reset+0xa6>
		OLED_write_d(0x00);
	}
}
    1976:	cf 91       	pop	r28
    1978:	08 95       	ret

0000197a <SPI_init>:
    197a:	87 b3       	in	r24, 0x17	; 23
    197c:	80 6b       	ori	r24, 0xB0	; 176
    197e:	87 bb       	out	0x17, r24	; 23
    1980:	8d b1       	in	r24, 0x0d	; 13
    1982:	81 65       	ori	r24, 0x51	; 81
    1984:	8d b9       	out	0x0d, r24	; 13
    1986:	88 b3       	in	r24, 0x18	; 24
    1988:	80 61       	ori	r24, 0x10	; 16
    198a:	88 bb       	out	0x18, r24	; 24
    198c:	08 95       	ret

0000198e <SPI_write>:
    198e:	8f b9       	out	0x0f, r24	; 15
    1990:	77 9b       	sbis	0x0e, 7	; 14
    1992:	fe cf       	rjmp	.-4      	; 0x1990 <SPI_write+0x2>
    1994:	08 95       	ret

00001996 <SPI_read>:
    1996:	8f ef       	ldi	r24, 0xFF	; 255
    1998:	8f b9       	out	0x0f, r24	; 15
    199a:	77 9b       	sbis	0x0e, 7	; 14
    199c:	fe cf       	rjmp	.-4      	; 0x199a <SPI_read+0x4>
    199e:	8f b1       	in	r24, 0x0f	; 15
    19a0:	08 95       	ret

000019a2 <__divmodhi4>:
    19a2:	97 fb       	bst	r25, 7
    19a4:	07 2e       	mov	r0, r23
    19a6:	16 f4       	brtc	.+4      	; 0x19ac <__divmodhi4+0xa>
    19a8:	00 94       	com	r0
    19aa:	07 d0       	rcall	.+14     	; 0x19ba <__divmodhi4_neg1>
    19ac:	77 fd       	sbrc	r23, 7
    19ae:	09 d0       	rcall	.+18     	; 0x19c2 <__divmodhi4_neg2>
    19b0:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <__udivmodhi4>
    19b4:	07 fc       	sbrc	r0, 7
    19b6:	05 d0       	rcall	.+10     	; 0x19c2 <__divmodhi4_neg2>
    19b8:	3e f4       	brtc	.+14     	; 0x19c8 <__divmodhi4_exit>

000019ba <__divmodhi4_neg1>:
    19ba:	90 95       	com	r25
    19bc:	81 95       	neg	r24
    19be:	9f 4f       	sbci	r25, 0xFF	; 255
    19c0:	08 95       	ret

000019c2 <__divmodhi4_neg2>:
    19c2:	70 95       	com	r23
    19c4:	61 95       	neg	r22
    19c6:	7f 4f       	sbci	r23, 0xFF	; 255

000019c8 <__divmodhi4_exit>:
    19c8:	08 95       	ret

000019ca <__udivmodhi4>:
    19ca:	aa 1b       	sub	r26, r26
    19cc:	bb 1b       	sub	r27, r27
    19ce:	51 e1       	ldi	r21, 0x11	; 17
    19d0:	07 c0       	rjmp	.+14     	; 0x19e0 <__udivmodhi4_ep>

000019d2 <__udivmodhi4_loop>:
    19d2:	aa 1f       	adc	r26, r26
    19d4:	bb 1f       	adc	r27, r27
    19d6:	a6 17       	cp	r26, r22
    19d8:	b7 07       	cpc	r27, r23
    19da:	10 f0       	brcs	.+4      	; 0x19e0 <__udivmodhi4_ep>
    19dc:	a6 1b       	sub	r26, r22
    19de:	b7 0b       	sbc	r27, r23

000019e0 <__udivmodhi4_ep>:
    19e0:	88 1f       	adc	r24, r24
    19e2:	99 1f       	adc	r25, r25
    19e4:	5a 95       	dec	r21
    19e6:	a9 f7       	brne	.-22     	; 0x19d2 <__udivmodhi4_loop>
    19e8:	80 95       	com	r24
    19ea:	90 95       	com	r25
    19ec:	bc 01       	movw	r22, r24
    19ee:	cd 01       	movw	r24, r26
    19f0:	08 95       	ret

000019f2 <strcpy_P>:
    19f2:	fb 01       	movw	r30, r22
    19f4:	dc 01       	movw	r26, r24
    19f6:	05 90       	lpm	r0, Z+
    19f8:	0d 92       	st	X+, r0
    19fa:	00 20       	and	r0, r0
    19fc:	e1 f7       	brne	.-8      	; 0x19f6 <strcpy_P+0x4>
    19fe:	08 95       	ret

00001a00 <fdevopen>:
    1a00:	0f 93       	push	r16
    1a02:	1f 93       	push	r17
    1a04:	cf 93       	push	r28
    1a06:	df 93       	push	r29
    1a08:	00 97       	sbiw	r24, 0x00	; 0
    1a0a:	31 f4       	brne	.+12     	; 0x1a18 <fdevopen+0x18>
    1a0c:	61 15       	cp	r22, r1
    1a0e:	71 05       	cpc	r23, r1
    1a10:	19 f4       	brne	.+6      	; 0x1a18 <fdevopen+0x18>
    1a12:	80 e0       	ldi	r24, 0x00	; 0
    1a14:	90 e0       	ldi	r25, 0x00	; 0
    1a16:	3a c0       	rjmp	.+116    	; 0x1a8c <fdevopen+0x8c>
    1a18:	8b 01       	movw	r16, r22
    1a1a:	ec 01       	movw	r28, r24
    1a1c:	6e e0       	ldi	r22, 0x0E	; 14
    1a1e:	70 e0       	ldi	r23, 0x00	; 0
    1a20:	81 e0       	ldi	r24, 0x01	; 1
    1a22:	90 e0       	ldi	r25, 0x00	; 0
    1a24:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <calloc>
    1a28:	fc 01       	movw	r30, r24
    1a2a:	89 2b       	or	r24, r25
    1a2c:	91 f3       	breq	.-28     	; 0x1a12 <fdevopen+0x12>
    1a2e:	80 e8       	ldi	r24, 0x80	; 128
    1a30:	83 83       	std	Z+3, r24	; 0x03
    1a32:	01 15       	cp	r16, r1
    1a34:	11 05       	cpc	r17, r1
    1a36:	71 f0       	breq	.+28     	; 0x1a54 <fdevopen+0x54>
    1a38:	13 87       	std	Z+11, r17	; 0x0b
    1a3a:	02 87       	std	Z+10, r16	; 0x0a
    1a3c:	81 e8       	ldi	r24, 0x81	; 129
    1a3e:	83 83       	std	Z+3, r24	; 0x03
    1a40:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <__iob>
    1a44:	90 91 20 02 	lds	r25, 0x0220	; 0x800220 <__iob+0x1>
    1a48:	89 2b       	or	r24, r25
    1a4a:	21 f4       	brne	.+8      	; 0x1a54 <fdevopen+0x54>
    1a4c:	f0 93 20 02 	sts	0x0220, r31	; 0x800220 <__iob+0x1>
    1a50:	e0 93 1f 02 	sts	0x021F, r30	; 0x80021f <__iob>
    1a54:	20 97       	sbiw	r28, 0x00	; 0
    1a56:	c9 f0       	breq	.+50     	; 0x1a8a <fdevopen+0x8a>
    1a58:	d1 87       	std	Z+9, r29	; 0x09
    1a5a:	c0 87       	std	Z+8, r28	; 0x08
    1a5c:	83 81       	ldd	r24, Z+3	; 0x03
    1a5e:	82 60       	ori	r24, 0x02	; 2
    1a60:	83 83       	std	Z+3, r24	; 0x03
    1a62:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <__iob+0x2>
    1a66:	90 91 22 02 	lds	r25, 0x0222	; 0x800222 <__iob+0x3>
    1a6a:	89 2b       	or	r24, r25
    1a6c:	71 f4       	brne	.+28     	; 0x1a8a <fdevopen+0x8a>
    1a6e:	f0 93 22 02 	sts	0x0222, r31	; 0x800222 <__iob+0x3>
    1a72:	e0 93 21 02 	sts	0x0221, r30	; 0x800221 <__iob+0x2>
    1a76:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <__iob+0x4>
    1a7a:	90 91 24 02 	lds	r25, 0x0224	; 0x800224 <__iob+0x5>
    1a7e:	89 2b       	or	r24, r25
    1a80:	21 f4       	brne	.+8      	; 0x1a8a <fdevopen+0x8a>
    1a82:	f0 93 24 02 	sts	0x0224, r31	; 0x800224 <__iob+0x5>
    1a86:	e0 93 23 02 	sts	0x0223, r30	; 0x800223 <__iob+0x4>
    1a8a:	cf 01       	movw	r24, r30
    1a8c:	df 91       	pop	r29
    1a8e:	cf 91       	pop	r28
    1a90:	1f 91       	pop	r17
    1a92:	0f 91       	pop	r16
    1a94:	08 95       	ret

00001a96 <puts>:
    1a96:	0f 93       	push	r16
    1a98:	1f 93       	push	r17
    1a9a:	cf 93       	push	r28
    1a9c:	df 93       	push	r29
    1a9e:	e0 91 21 02 	lds	r30, 0x0221	; 0x800221 <__iob+0x2>
    1aa2:	f0 91 22 02 	lds	r31, 0x0222	; 0x800222 <__iob+0x3>
    1aa6:	23 81       	ldd	r18, Z+3	; 0x03
    1aa8:	21 ff       	sbrs	r18, 1
    1aaa:	1b c0       	rjmp	.+54     	; 0x1ae2 <puts+0x4c>
    1aac:	8c 01       	movw	r16, r24
    1aae:	d0 e0       	ldi	r29, 0x00	; 0
    1ab0:	c0 e0       	ldi	r28, 0x00	; 0
    1ab2:	f8 01       	movw	r30, r16
    1ab4:	81 91       	ld	r24, Z+
    1ab6:	8f 01       	movw	r16, r30
    1ab8:	60 91 21 02 	lds	r22, 0x0221	; 0x800221 <__iob+0x2>
    1abc:	70 91 22 02 	lds	r23, 0x0222	; 0x800222 <__iob+0x3>
    1ac0:	db 01       	movw	r26, r22
    1ac2:	18 96       	adiw	r26, 0x08	; 8
    1ac4:	ed 91       	ld	r30, X+
    1ac6:	fc 91       	ld	r31, X
    1ac8:	19 97       	sbiw	r26, 0x09	; 9
    1aca:	88 23       	and	r24, r24
    1acc:	31 f0       	breq	.+12     	; 0x1ada <puts+0x44>
    1ace:	09 95       	icall
    1ad0:	89 2b       	or	r24, r25
    1ad2:	79 f3       	breq	.-34     	; 0x1ab2 <puts+0x1c>
    1ad4:	df ef       	ldi	r29, 0xFF	; 255
    1ad6:	cf ef       	ldi	r28, 0xFF	; 255
    1ad8:	ec cf       	rjmp	.-40     	; 0x1ab2 <puts+0x1c>
    1ada:	8a e0       	ldi	r24, 0x0A	; 10
    1adc:	09 95       	icall
    1ade:	89 2b       	or	r24, r25
    1ae0:	19 f0       	breq	.+6      	; 0x1ae8 <puts+0x52>
    1ae2:	8f ef       	ldi	r24, 0xFF	; 255
    1ae4:	9f ef       	ldi	r25, 0xFF	; 255
    1ae6:	02 c0       	rjmp	.+4      	; 0x1aec <puts+0x56>
    1ae8:	8d 2f       	mov	r24, r29
    1aea:	9c 2f       	mov	r25, r28
    1aec:	df 91       	pop	r29
    1aee:	cf 91       	pop	r28
    1af0:	1f 91       	pop	r17
    1af2:	0f 91       	pop	r16
    1af4:	08 95       	ret

00001af6 <calloc>:
    1af6:	0f 93       	push	r16
    1af8:	1f 93       	push	r17
    1afa:	cf 93       	push	r28
    1afc:	df 93       	push	r29
    1afe:	86 9f       	mul	r24, r22
    1b00:	80 01       	movw	r16, r0
    1b02:	87 9f       	mul	r24, r23
    1b04:	10 0d       	add	r17, r0
    1b06:	96 9f       	mul	r25, r22
    1b08:	10 0d       	add	r17, r0
    1b0a:	11 24       	eor	r1, r1
    1b0c:	c8 01       	movw	r24, r16
    1b0e:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <malloc>
    1b12:	ec 01       	movw	r28, r24
    1b14:	00 97       	sbiw	r24, 0x00	; 0
    1b16:	29 f0       	breq	.+10     	; 0x1b22 <calloc+0x2c>
    1b18:	a8 01       	movw	r20, r16
    1b1a:	60 e0       	ldi	r22, 0x00	; 0
    1b1c:	70 e0       	ldi	r23, 0x00	; 0
    1b1e:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <memset>
    1b22:	ce 01       	movw	r24, r28
    1b24:	df 91       	pop	r29
    1b26:	cf 91       	pop	r28
    1b28:	1f 91       	pop	r17
    1b2a:	0f 91       	pop	r16
    1b2c:	08 95       	ret

00001b2e <malloc>:
    1b2e:	0f 93       	push	r16
    1b30:	1f 93       	push	r17
    1b32:	cf 93       	push	r28
    1b34:	df 93       	push	r29
    1b36:	82 30       	cpi	r24, 0x02	; 2
    1b38:	91 05       	cpc	r25, r1
    1b3a:	10 f4       	brcc	.+4      	; 0x1b40 <malloc+0x12>
    1b3c:	82 e0       	ldi	r24, 0x02	; 2
    1b3e:	90 e0       	ldi	r25, 0x00	; 0
    1b40:	e0 91 27 02 	lds	r30, 0x0227	; 0x800227 <__flp>
    1b44:	f0 91 28 02 	lds	r31, 0x0228	; 0x800228 <__flp+0x1>
    1b48:	20 e0       	ldi	r18, 0x00	; 0
    1b4a:	30 e0       	ldi	r19, 0x00	; 0
    1b4c:	a0 e0       	ldi	r26, 0x00	; 0
    1b4e:	b0 e0       	ldi	r27, 0x00	; 0
    1b50:	30 97       	sbiw	r30, 0x00	; 0
    1b52:	19 f1       	breq	.+70     	; 0x1b9a <malloc+0x6c>
    1b54:	40 81       	ld	r20, Z
    1b56:	51 81       	ldd	r21, Z+1	; 0x01
    1b58:	02 81       	ldd	r16, Z+2	; 0x02
    1b5a:	13 81       	ldd	r17, Z+3	; 0x03
    1b5c:	48 17       	cp	r20, r24
    1b5e:	59 07       	cpc	r21, r25
    1b60:	c8 f0       	brcs	.+50     	; 0x1b94 <malloc+0x66>
    1b62:	84 17       	cp	r24, r20
    1b64:	95 07       	cpc	r25, r21
    1b66:	69 f4       	brne	.+26     	; 0x1b82 <malloc+0x54>
    1b68:	10 97       	sbiw	r26, 0x00	; 0
    1b6a:	31 f0       	breq	.+12     	; 0x1b78 <malloc+0x4a>
    1b6c:	12 96       	adiw	r26, 0x02	; 2
    1b6e:	0c 93       	st	X, r16
    1b70:	12 97       	sbiw	r26, 0x02	; 2
    1b72:	13 96       	adiw	r26, 0x03	; 3
    1b74:	1c 93       	st	X, r17
    1b76:	27 c0       	rjmp	.+78     	; 0x1bc6 <malloc+0x98>
    1b78:	00 93 27 02 	sts	0x0227, r16	; 0x800227 <__flp>
    1b7c:	10 93 28 02 	sts	0x0228, r17	; 0x800228 <__flp+0x1>
    1b80:	22 c0       	rjmp	.+68     	; 0x1bc6 <malloc+0x98>
    1b82:	21 15       	cp	r18, r1
    1b84:	31 05       	cpc	r19, r1
    1b86:	19 f0       	breq	.+6      	; 0x1b8e <malloc+0x60>
    1b88:	42 17       	cp	r20, r18
    1b8a:	53 07       	cpc	r21, r19
    1b8c:	18 f4       	brcc	.+6      	; 0x1b94 <malloc+0x66>
    1b8e:	9a 01       	movw	r18, r20
    1b90:	bd 01       	movw	r22, r26
    1b92:	ef 01       	movw	r28, r30
    1b94:	df 01       	movw	r26, r30
    1b96:	f8 01       	movw	r30, r16
    1b98:	db cf       	rjmp	.-74     	; 0x1b50 <malloc+0x22>
    1b9a:	21 15       	cp	r18, r1
    1b9c:	31 05       	cpc	r19, r1
    1b9e:	f9 f0       	breq	.+62     	; 0x1bde <malloc+0xb0>
    1ba0:	28 1b       	sub	r18, r24
    1ba2:	39 0b       	sbc	r19, r25
    1ba4:	24 30       	cpi	r18, 0x04	; 4
    1ba6:	31 05       	cpc	r19, r1
    1ba8:	80 f4       	brcc	.+32     	; 0x1bca <malloc+0x9c>
    1baa:	8a 81       	ldd	r24, Y+2	; 0x02
    1bac:	9b 81       	ldd	r25, Y+3	; 0x03
    1bae:	61 15       	cp	r22, r1
    1bb0:	71 05       	cpc	r23, r1
    1bb2:	21 f0       	breq	.+8      	; 0x1bbc <malloc+0x8e>
    1bb4:	fb 01       	movw	r30, r22
    1bb6:	93 83       	std	Z+3, r25	; 0x03
    1bb8:	82 83       	std	Z+2, r24	; 0x02
    1bba:	04 c0       	rjmp	.+8      	; 0x1bc4 <malloc+0x96>
    1bbc:	90 93 28 02 	sts	0x0228, r25	; 0x800228 <__flp+0x1>
    1bc0:	80 93 27 02 	sts	0x0227, r24	; 0x800227 <__flp>
    1bc4:	fe 01       	movw	r30, r28
    1bc6:	32 96       	adiw	r30, 0x02	; 2
    1bc8:	44 c0       	rjmp	.+136    	; 0x1c52 <malloc+0x124>
    1bca:	fe 01       	movw	r30, r28
    1bcc:	e2 0f       	add	r30, r18
    1bce:	f3 1f       	adc	r31, r19
    1bd0:	81 93       	st	Z+, r24
    1bd2:	91 93       	st	Z+, r25
    1bd4:	22 50       	subi	r18, 0x02	; 2
    1bd6:	31 09       	sbc	r19, r1
    1bd8:	39 83       	std	Y+1, r19	; 0x01
    1bda:	28 83       	st	Y, r18
    1bdc:	3a c0       	rjmp	.+116    	; 0x1c52 <malloc+0x124>
    1bde:	20 91 25 02 	lds	r18, 0x0225	; 0x800225 <__brkval>
    1be2:	30 91 26 02 	lds	r19, 0x0226	; 0x800226 <__brkval+0x1>
    1be6:	23 2b       	or	r18, r19
    1be8:	41 f4       	brne	.+16     	; 0x1bfa <malloc+0xcc>
    1bea:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    1bee:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    1bf2:	30 93 26 02 	sts	0x0226, r19	; 0x800226 <__brkval+0x1>
    1bf6:	20 93 25 02 	sts	0x0225, r18	; 0x800225 <__brkval>
    1bfa:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1bfe:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1c02:	21 15       	cp	r18, r1
    1c04:	31 05       	cpc	r19, r1
    1c06:	41 f4       	brne	.+16     	; 0x1c18 <malloc+0xea>
    1c08:	2d b7       	in	r18, 0x3d	; 61
    1c0a:	3e b7       	in	r19, 0x3e	; 62
    1c0c:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    1c10:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    1c14:	24 1b       	sub	r18, r20
    1c16:	35 0b       	sbc	r19, r21
    1c18:	e0 91 25 02 	lds	r30, 0x0225	; 0x800225 <__brkval>
    1c1c:	f0 91 26 02 	lds	r31, 0x0226	; 0x800226 <__brkval+0x1>
    1c20:	e2 17       	cp	r30, r18
    1c22:	f3 07       	cpc	r31, r19
    1c24:	a0 f4       	brcc	.+40     	; 0x1c4e <malloc+0x120>
    1c26:	2e 1b       	sub	r18, r30
    1c28:	3f 0b       	sbc	r19, r31
    1c2a:	28 17       	cp	r18, r24
    1c2c:	39 07       	cpc	r19, r25
    1c2e:	78 f0       	brcs	.+30     	; 0x1c4e <malloc+0x120>
    1c30:	ac 01       	movw	r20, r24
    1c32:	4e 5f       	subi	r20, 0xFE	; 254
    1c34:	5f 4f       	sbci	r21, 0xFF	; 255
    1c36:	24 17       	cp	r18, r20
    1c38:	35 07       	cpc	r19, r21
    1c3a:	48 f0       	brcs	.+18     	; 0x1c4e <malloc+0x120>
    1c3c:	4e 0f       	add	r20, r30
    1c3e:	5f 1f       	adc	r21, r31
    1c40:	50 93 26 02 	sts	0x0226, r21	; 0x800226 <__brkval+0x1>
    1c44:	40 93 25 02 	sts	0x0225, r20	; 0x800225 <__brkval>
    1c48:	81 93       	st	Z+, r24
    1c4a:	91 93       	st	Z+, r25
    1c4c:	02 c0       	rjmp	.+4      	; 0x1c52 <malloc+0x124>
    1c4e:	e0 e0       	ldi	r30, 0x00	; 0
    1c50:	f0 e0       	ldi	r31, 0x00	; 0
    1c52:	cf 01       	movw	r24, r30
    1c54:	df 91       	pop	r29
    1c56:	cf 91       	pop	r28
    1c58:	1f 91       	pop	r17
    1c5a:	0f 91       	pop	r16
    1c5c:	08 95       	ret

00001c5e <free>:
    1c5e:	cf 93       	push	r28
    1c60:	df 93       	push	r29
    1c62:	00 97       	sbiw	r24, 0x00	; 0
    1c64:	09 f4       	brne	.+2      	; 0x1c68 <free+0xa>
    1c66:	81 c0       	rjmp	.+258    	; 0x1d6a <free+0x10c>
    1c68:	fc 01       	movw	r30, r24
    1c6a:	32 97       	sbiw	r30, 0x02	; 2
    1c6c:	13 82       	std	Z+3, r1	; 0x03
    1c6e:	12 82       	std	Z+2, r1	; 0x02
    1c70:	a0 91 27 02 	lds	r26, 0x0227	; 0x800227 <__flp>
    1c74:	b0 91 28 02 	lds	r27, 0x0228	; 0x800228 <__flp+0x1>
    1c78:	10 97       	sbiw	r26, 0x00	; 0
    1c7a:	81 f4       	brne	.+32     	; 0x1c9c <free+0x3e>
    1c7c:	20 81       	ld	r18, Z
    1c7e:	31 81       	ldd	r19, Z+1	; 0x01
    1c80:	82 0f       	add	r24, r18
    1c82:	93 1f       	adc	r25, r19
    1c84:	20 91 25 02 	lds	r18, 0x0225	; 0x800225 <__brkval>
    1c88:	30 91 26 02 	lds	r19, 0x0226	; 0x800226 <__brkval+0x1>
    1c8c:	28 17       	cp	r18, r24
    1c8e:	39 07       	cpc	r19, r25
    1c90:	51 f5       	brne	.+84     	; 0x1ce6 <free+0x88>
    1c92:	f0 93 26 02 	sts	0x0226, r31	; 0x800226 <__brkval+0x1>
    1c96:	e0 93 25 02 	sts	0x0225, r30	; 0x800225 <__brkval>
    1c9a:	67 c0       	rjmp	.+206    	; 0x1d6a <free+0x10c>
    1c9c:	ed 01       	movw	r28, r26
    1c9e:	20 e0       	ldi	r18, 0x00	; 0
    1ca0:	30 e0       	ldi	r19, 0x00	; 0
    1ca2:	ce 17       	cp	r28, r30
    1ca4:	df 07       	cpc	r29, r31
    1ca6:	40 f4       	brcc	.+16     	; 0x1cb8 <free+0x5a>
    1ca8:	4a 81       	ldd	r20, Y+2	; 0x02
    1caa:	5b 81       	ldd	r21, Y+3	; 0x03
    1cac:	9e 01       	movw	r18, r28
    1cae:	41 15       	cp	r20, r1
    1cb0:	51 05       	cpc	r21, r1
    1cb2:	f1 f0       	breq	.+60     	; 0x1cf0 <free+0x92>
    1cb4:	ea 01       	movw	r28, r20
    1cb6:	f5 cf       	rjmp	.-22     	; 0x1ca2 <free+0x44>
    1cb8:	d3 83       	std	Z+3, r29	; 0x03
    1cba:	c2 83       	std	Z+2, r28	; 0x02
    1cbc:	40 81       	ld	r20, Z
    1cbe:	51 81       	ldd	r21, Z+1	; 0x01
    1cc0:	84 0f       	add	r24, r20
    1cc2:	95 1f       	adc	r25, r21
    1cc4:	c8 17       	cp	r28, r24
    1cc6:	d9 07       	cpc	r29, r25
    1cc8:	59 f4       	brne	.+22     	; 0x1ce0 <free+0x82>
    1cca:	88 81       	ld	r24, Y
    1ccc:	99 81       	ldd	r25, Y+1	; 0x01
    1cce:	84 0f       	add	r24, r20
    1cd0:	95 1f       	adc	r25, r21
    1cd2:	02 96       	adiw	r24, 0x02	; 2
    1cd4:	91 83       	std	Z+1, r25	; 0x01
    1cd6:	80 83       	st	Z, r24
    1cd8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cda:	9b 81       	ldd	r25, Y+3	; 0x03
    1cdc:	93 83       	std	Z+3, r25	; 0x03
    1cde:	82 83       	std	Z+2, r24	; 0x02
    1ce0:	21 15       	cp	r18, r1
    1ce2:	31 05       	cpc	r19, r1
    1ce4:	29 f4       	brne	.+10     	; 0x1cf0 <free+0x92>
    1ce6:	f0 93 28 02 	sts	0x0228, r31	; 0x800228 <__flp+0x1>
    1cea:	e0 93 27 02 	sts	0x0227, r30	; 0x800227 <__flp>
    1cee:	3d c0       	rjmp	.+122    	; 0x1d6a <free+0x10c>
    1cf0:	e9 01       	movw	r28, r18
    1cf2:	fb 83       	std	Y+3, r31	; 0x03
    1cf4:	ea 83       	std	Y+2, r30	; 0x02
    1cf6:	49 91       	ld	r20, Y+
    1cf8:	59 91       	ld	r21, Y+
    1cfa:	c4 0f       	add	r28, r20
    1cfc:	d5 1f       	adc	r29, r21
    1cfe:	ec 17       	cp	r30, r28
    1d00:	fd 07       	cpc	r31, r29
    1d02:	61 f4       	brne	.+24     	; 0x1d1c <free+0xbe>
    1d04:	80 81       	ld	r24, Z
    1d06:	91 81       	ldd	r25, Z+1	; 0x01
    1d08:	84 0f       	add	r24, r20
    1d0a:	95 1f       	adc	r25, r21
    1d0c:	02 96       	adiw	r24, 0x02	; 2
    1d0e:	e9 01       	movw	r28, r18
    1d10:	99 83       	std	Y+1, r25	; 0x01
    1d12:	88 83       	st	Y, r24
    1d14:	82 81       	ldd	r24, Z+2	; 0x02
    1d16:	93 81       	ldd	r25, Z+3	; 0x03
    1d18:	9b 83       	std	Y+3, r25	; 0x03
    1d1a:	8a 83       	std	Y+2, r24	; 0x02
    1d1c:	e0 e0       	ldi	r30, 0x00	; 0
    1d1e:	f0 e0       	ldi	r31, 0x00	; 0
    1d20:	12 96       	adiw	r26, 0x02	; 2
    1d22:	8d 91       	ld	r24, X+
    1d24:	9c 91       	ld	r25, X
    1d26:	13 97       	sbiw	r26, 0x03	; 3
    1d28:	00 97       	sbiw	r24, 0x00	; 0
    1d2a:	19 f0       	breq	.+6      	; 0x1d32 <free+0xd4>
    1d2c:	fd 01       	movw	r30, r26
    1d2e:	dc 01       	movw	r26, r24
    1d30:	f7 cf       	rjmp	.-18     	; 0x1d20 <free+0xc2>
    1d32:	8d 91       	ld	r24, X+
    1d34:	9c 91       	ld	r25, X
    1d36:	11 97       	sbiw	r26, 0x01	; 1
    1d38:	9d 01       	movw	r18, r26
    1d3a:	2e 5f       	subi	r18, 0xFE	; 254
    1d3c:	3f 4f       	sbci	r19, 0xFF	; 255
    1d3e:	82 0f       	add	r24, r18
    1d40:	93 1f       	adc	r25, r19
    1d42:	20 91 25 02 	lds	r18, 0x0225	; 0x800225 <__brkval>
    1d46:	30 91 26 02 	lds	r19, 0x0226	; 0x800226 <__brkval+0x1>
    1d4a:	28 17       	cp	r18, r24
    1d4c:	39 07       	cpc	r19, r25
    1d4e:	69 f4       	brne	.+26     	; 0x1d6a <free+0x10c>
    1d50:	30 97       	sbiw	r30, 0x00	; 0
    1d52:	29 f4       	brne	.+10     	; 0x1d5e <free+0x100>
    1d54:	10 92 28 02 	sts	0x0228, r1	; 0x800228 <__flp+0x1>
    1d58:	10 92 27 02 	sts	0x0227, r1	; 0x800227 <__flp>
    1d5c:	02 c0       	rjmp	.+4      	; 0x1d62 <free+0x104>
    1d5e:	13 82       	std	Z+3, r1	; 0x03
    1d60:	12 82       	std	Z+2, r1	; 0x02
    1d62:	b0 93 26 02 	sts	0x0226, r27	; 0x800226 <__brkval+0x1>
    1d66:	a0 93 25 02 	sts	0x0225, r26	; 0x800225 <__brkval>
    1d6a:	df 91       	pop	r29
    1d6c:	cf 91       	pop	r28
    1d6e:	08 95       	ret

00001d70 <memset>:
    1d70:	dc 01       	movw	r26, r24
    1d72:	01 c0       	rjmp	.+2      	; 0x1d76 <memset+0x6>
    1d74:	6d 93       	st	X+, r22
    1d76:	41 50       	subi	r20, 0x01	; 1
    1d78:	50 40       	sbci	r21, 0x00	; 0
    1d7a:	e0 f7       	brcc	.-8      	; 0x1d74 <memset+0x4>
    1d7c:	08 95       	ret

00001d7e <_exit>:
    1d7e:	f8 94       	cli

00001d80 <__stop_program>:
    1d80:	ff cf       	rjmp	.-2      	; 0x1d80 <__stop_program>
