
Gruppe44.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000038  00800100  000007f4  00000888  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007f4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001e  00800138  00800138  000008c0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008c0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000008f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  0000092c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000138d  00000000  00000000  00000a1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a6e  00000000  00000000  00001da9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009c3  00000000  00000000  00002817  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000250  00000000  00000000  000031dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005bd  00000000  00000000  0000342c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000055c  00000000  00000000  000039e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00003f45  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__vector_1>
   8:	0c 94 c3 00 	jmp	0x186	; 0x186 <__vector_2>
   c:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__vector_3>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e4 ef       	ldi	r30, 0xF4	; 244
  84:	f7 e0       	ldi	r31, 0x07	; 7
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a8 33       	cpi	r26, 0x38	; 56
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	21 e0       	ldi	r18, 0x01	; 1
  94:	a8 e3       	ldi	r26, 0x38	; 56
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a6 35       	cpi	r26, 0x56	; 86
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 0f 01 	call	0x21e	; 0x21e <main>
  a6:	0c 94 f8 03 	jmp	0x7f0	; 0x7f0 <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <adc_init>:



void adc_init (void){
	
	DDRD |= (1 << PD5); // Set port PD5 to 1
  ae:	81 b3       	in	r24, 0x11	; 17
  b0:	80 62       	ori	r24, 0x20	; 32
  b2:	81 bb       	out	0x11, r24	; 17
	TCCR1A |= (1 << COM1A0)|(1 << COM1B0); // Timer/Counter1 Control Register A (TCCR1A): Setting bit 6 and 4 to 1 - "Toggle OCnA/OCnB on Compare Match."
  b4:	8f b5       	in	r24, 0x2f	; 47
  b6:	80 65       	ori	r24, 0x50	; 80
  b8:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1 << WGM12)|(1 << CS10); // Timer/Counter1 Control Register B (TCCR1B): Setting bit 3 to 1 - "CTC-mode", and bit 0 to 1 "clkI/O/1 (No prescaling)"
  ba:	8e b5       	in	r24, 0x2e	; 46
  bc:	89 60       	ori	r24, 0x09	; 9
  be:	8e bd       	out	0x2e, r24	; 46
	OCR1A = 0x1; // Setting Compare Match bit - which bit the counter triggers on
  c0:	81 e0       	ldi	r24, 0x01	; 1
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	9b bd       	out	0x2b, r25	; 43
  c6:	8a bd       	out	0x2a, r24	; 42
  c8:	08 95       	ret

000000ca <adc_read>:
}

void adc_read(void){
	// SEND TO ADC
	volatile char * adc = ( char *) 0x1400; // Set pointer at starting memory of ADC
	adc [0] = 0xff; // Send random value to initiate
  ca:	8f ef       	ldi	r24, 0xFF	; 255
  cc:	80 93 00 14 	sts	0x1400, r24	; 0x801400 <__bss_end+0x12aa>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d0:	84 e1       	ldi	r24, 0x14	; 20
  d2:	8a 95       	dec	r24
  d4:	f1 f7       	brne	.-4      	; 0xd2 <adc_read+0x8>
	
	// WAIT
	_delay_us(60); // Is this one necessary?
	
	// READ FROM ADC
	for (int i=0;i<4;i++) // Need to read 4 values - analog input 0 to 3
  d6:	80 e0       	ldi	r24, 0x00	; 0
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	0b c0       	rjmp	.+22     	; 0xf2 <adc_read+0x28>
	{
		uint8_t number = adc [0]; // Read the ADC value and store it in variable
  dc:	20 91 00 14 	lds	r18, 0x1400	; 0x801400 <__bss_end+0x12aa>
		ADC_states[i] = number;
  e0:	fc 01       	movw	r30, r24
  e2:	ee 0f       	add	r30, r30
  e4:	ff 1f       	adc	r31, r31
  e6:	ec 5b       	subi	r30, 0xBC	; 188
  e8:	fe 4f       	sbci	r31, 0xFE	; 254
  ea:	30 e0       	ldi	r19, 0x00	; 0
  ec:	31 83       	std	Z+1, r19	; 0x01
  ee:	20 83       	st	Z, r18
	
	// WAIT
	_delay_us(60); // Is this one necessary?
	
	// READ FROM ADC
	for (int i=0;i<4;i++) // Need to read 4 values - analog input 0 to 3
  f0:	01 96       	adiw	r24, 0x01	; 1
  f2:	84 30       	cpi	r24, 0x04	; 4
  f4:	91 05       	cpc	r25, r1
  f6:	94 f3       	brlt	.-28     	; 0xdc <adc_read+0x12>
		ADC_states[i] = number;
		//if (i == 0){
		//printf( "%d ", number); // Print analog input i TODO: Change this from debugging later
		//}
	}
}
  f8:	08 95       	ret

000000fa <adc_calibrate>:

void adc_calibrate(void){
	adc_read();
  fa:	0e 94 65 00 	call	0xca	; 0xca <adc_read>
	X_neutral = ADC_states[0];
  fe:	e4 e4       	ldi	r30, 0x44	; 68
 100:	f1 e0       	ldi	r31, 0x01	; 1
 102:	80 81       	ld	r24, Z
 104:	91 81       	ldd	r25, Z+1	; 0x01
 106:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <X_neutral+0x1>
 10a:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <X_neutral>
	Y_neutral = ADC_states[1];
 10e:	82 81       	ldd	r24, Z+2	; 0x02
 110:	93 81       	ldd	r25, Z+3	; 0x03
 112:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <__data_end+0x1>
 116:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <__data_end>
 11a:	08 95       	ret

0000011c <USART_Init>:
 11c:	9c bf       	out	0x3c, r25	; 60
 11e:	80 b9       	out	0x00, r24	; 0
 120:	88 e1       	ldi	r24, 0x18	; 24
 122:	81 b9       	out	0x01, r24	; 1
 124:	8e e8       	ldi	r24, 0x8E	; 142
 126:	8c bf       	out	0x3c, r24	; 60
 128:	08 95       	ret

0000012a <USART_Transmit>:
 12a:	15 9b       	sbis	0x02, 5	; 2
 12c:	fe cf       	rjmp	.-4      	; 0x12a <USART_Transmit>
 12e:	83 b9       	out	0x03, r24	; 3
 130:	08 95       	ret

00000132 <USART_Receive>:
 132:	17 9b       	sbis	0x02, 7	; 2
 134:	fe cf       	rjmp	.-4      	; 0x132 <USART_Receive>
 136:	83 b1       	in	r24, 0x03	; 3
 138:	08 95       	ret

0000013a <__vector_1>:
#define F_CPU 16000000
#define MYUBRR FOSC/16/BAUD-1 // = 31

#include "util/delay.h"

ISR(INT0_vect){
 13a:	1f 92       	push	r1
 13c:	0f 92       	push	r0
 13e:	0f b6       	in	r0, 0x3f	; 63
 140:	0f 92       	push	r0
 142:	11 24       	eor	r1, r1
 144:	2f 93       	push	r18
 146:	3f 93       	push	r19
 148:	4f 93       	push	r20
 14a:	5f 93       	push	r21
 14c:	6f 93       	push	r22
 14e:	7f 93       	push	r23
 150:	8f 93       	push	r24
 152:	9f 93       	push	r25
 154:	af 93       	push	r26
 156:	bf 93       	push	r27
 158:	ef 93       	push	r30
 15a:	ff 93       	push	r31
	printf("\r\nRight button\r\n");
 15c:	86 e0       	ldi	r24, 0x06	; 6
 15e:	91 e0       	ldi	r25, 0x01	; 1
 160:	0e 94 84 02 	call	0x508	; 0x508 <puts>
}
 164:	ff 91       	pop	r31
 166:	ef 91       	pop	r30
 168:	bf 91       	pop	r27
 16a:	af 91       	pop	r26
 16c:	9f 91       	pop	r25
 16e:	8f 91       	pop	r24
 170:	7f 91       	pop	r23
 172:	6f 91       	pop	r22
 174:	5f 91       	pop	r21
 176:	4f 91       	pop	r20
 178:	3f 91       	pop	r19
 17a:	2f 91       	pop	r18
 17c:	0f 90       	pop	r0
 17e:	0f be       	out	0x3f, r0	; 63
 180:	0f 90       	pop	r0
 182:	1f 90       	pop	r1
 184:	18 95       	reti

00000186 <__vector_2>:
ISR(INT1_vect){
 186:	1f 92       	push	r1
 188:	0f 92       	push	r0
 18a:	0f b6       	in	r0, 0x3f	; 63
 18c:	0f 92       	push	r0
 18e:	11 24       	eor	r1, r1
 190:	2f 93       	push	r18
 192:	3f 93       	push	r19
 194:	4f 93       	push	r20
 196:	5f 93       	push	r21
 198:	6f 93       	push	r22
 19a:	7f 93       	push	r23
 19c:	8f 93       	push	r24
 19e:	9f 93       	push	r25
 1a0:	af 93       	push	r26
 1a2:	bf 93       	push	r27
 1a4:	ef 93       	push	r30
 1a6:	ff 93       	push	r31
	printf("\r\nLeft button\r\n");
 1a8:	86 e1       	ldi	r24, 0x16	; 22
 1aa:	91 e0       	ldi	r25, 0x01	; 1
 1ac:	0e 94 84 02 	call	0x508	; 0x508 <puts>
}
 1b0:	ff 91       	pop	r31
 1b2:	ef 91       	pop	r30
 1b4:	bf 91       	pop	r27
 1b6:	af 91       	pop	r26
 1b8:	9f 91       	pop	r25
 1ba:	8f 91       	pop	r24
 1bc:	7f 91       	pop	r23
 1be:	6f 91       	pop	r22
 1c0:	5f 91       	pop	r21
 1c2:	4f 91       	pop	r20
 1c4:	3f 91       	pop	r19
 1c6:	2f 91       	pop	r18
 1c8:	0f 90       	pop	r0
 1ca:	0f be       	out	0x3f, r0	; 63
 1cc:	0f 90       	pop	r0
 1ce:	1f 90       	pop	r1
 1d0:	18 95       	reti

000001d2 <__vector_3>:
ISR(INT2_vect){
 1d2:	1f 92       	push	r1
 1d4:	0f 92       	push	r0
 1d6:	0f b6       	in	r0, 0x3f	; 63
 1d8:	0f 92       	push	r0
 1da:	11 24       	eor	r1, r1
 1dc:	2f 93       	push	r18
 1de:	3f 93       	push	r19
 1e0:	4f 93       	push	r20
 1e2:	5f 93       	push	r21
 1e4:	6f 93       	push	r22
 1e6:	7f 93       	push	r23
 1e8:	8f 93       	push	r24
 1ea:	9f 93       	push	r25
 1ec:	af 93       	push	r26
 1ee:	bf 93       	push	r27
 1f0:	ef 93       	push	r30
 1f2:	ff 93       	push	r31
	printf("\r\nJoystick button\r\n");
 1f4:	85 e2       	ldi	r24, 0x25	; 37
 1f6:	91 e0       	ldi	r25, 0x01	; 1
 1f8:	0e 94 84 02 	call	0x508	; 0x508 <puts>
}
 1fc:	ff 91       	pop	r31
 1fe:	ef 91       	pop	r30
 200:	bf 91       	pop	r27
 202:	af 91       	pop	r26
 204:	9f 91       	pop	r25
 206:	8f 91       	pop	r24
 208:	7f 91       	pop	r23
 20a:	6f 91       	pop	r22
 20c:	5f 91       	pop	r21
 20e:	4f 91       	pop	r20
 210:	3f 91       	pop	r19
 212:	2f 91       	pop	r18
 214:	0f 90       	pop	r0
 216:	0f be       	out	0x3f, r0	; 63
 218:	0f 90       	pop	r0
 21a:	1f 90       	pop	r1
 21c:	18 95       	reti

0000021e <main>:


int main(void)
{
	//FIX CODE SO THIS ONLY RUNS ONCE
	USART_Init(31);
 21e:	8f e1       	ldi	r24, 0x1F	; 31
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	0e 94 8e 00 	call	0x11c	; 0x11c <USART_Init>
	fdevopen(USART_Transmit, USART_Receive);
 226:	69 e9       	ldi	r22, 0x99	; 153
 228:	70 e0       	ldi	r23, 0x00	; 0
 22a:	85 e9       	ldi	r24, 0x95	; 149
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	0e 94 39 02 	call	0x472	; 0x472 <fdevopen>
	
	adc_init();
 232:	0e 94 57 00 	call	0xae	; 0xae <adc_init>
	
	
	// PINx & 0x01
	DDRD &= ~(1 << PIND)|(1 << PIND); //Set port to input
 236:	20 b3       	in	r18, 0x10	; 16
 238:	81 e0       	ldi	r24, 0x01	; 1
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	ac 01       	movw	r20, r24
 23e:	02 c0       	rjmp	.+4      	; 0x244 <main+0x26>
 240:	44 0f       	add	r20, r20
 242:	55 1f       	adc	r21, r21
 244:	2a 95       	dec	r18
 246:	e2 f7       	brpl	.-8      	; 0x240 <main+0x22>
 248:	9a 01       	movw	r18, r20
 24a:	20 95       	com	r18
 24c:	30 95       	com	r19
 24e:	40 b3       	in	r20, 0x10	; 16
 250:	02 c0       	rjmp	.+4      	; 0x256 <main+0x38>
 252:	88 0f       	add	r24, r24
 254:	99 1f       	adc	r25, r25
 256:	4a 95       	dec	r20
 258:	e2 f7       	brpl	.-8      	; 0x252 <main+0x34>
 25a:	82 2b       	or	r24, r18
 25c:	93 2b       	or	r25, r19
 25e:	91 b3       	in	r25, 0x11	; 17
 260:	89 23       	and	r24, r25
 262:	81 bb       	out	0x11, r24	; 17
	DDRE &= ~(1 << PINE0);
 264:	86 b1       	in	r24, 0x06	; 6
 266:	8e 7f       	andi	r24, 0xFE	; 254
 268:	86 b9       	out	0x06, r24	; 6
	PORTE |= (1 << PINE0); // Internal pull up
 26a:	87 b1       	in	r24, 0x07	; 7
 26c:	81 60       	ori	r24, 0x01	; 1
 26e:	87 b9       	out	0x07, r24	; 7
	
	MCUCR |= (1 << SRE ); // enable XMEM
 270:	85 b7       	in	r24, 0x35	; 53
 272:	80 68       	ori	r24, 0x80	; 128
 274:	85 bf       	out	0x35, r24	; 53
	MCUCR |= (1 << ISC11)|(1 << ISC10)|(1 << ISC01)|(1 << ISC00); //Sets the interrupt at positive flank
 276:	85 b7       	in	r24, 0x35	; 53
 278:	8f 60       	ori	r24, 0x0F	; 15
 27a:	85 bf       	out	0x35, r24	; 53
	GICR |= (1 << INT0)|(1 << INT1)|(1 << INT2); //Enables the interrupt
 27c:	8b b7       	in	r24, 0x3b	; 59
 27e:	80 6e       	ori	r24, 0xE0	; 224
 280:	8b bf       	out	0x3b, r24	; 59
	SFIOR |= (1 << XMM0 ); // mask unused bits
 282:	80 b7       	in	r24, 0x30	; 48
 284:	88 60       	ori	r24, 0x08	; 8
 286:	80 bf       	out	0x30, r24	; 48
	
	//MCUCR = 0x80; // Initialize SRAM
	//SFIOR = 0x20;
	sei();
 288:	78 94       	sei
	adc_calibrate();
 28a:	0e 94 7d 00 	call	0xfa	; 0xfa <adc_calibrate>
	OLED_init();
 28e:	0e 94 82 01 	call	0x304	; 0x304 <OLED_init>
	OLED_reset();
 292:	0e 94 de 01 	call	0x3bc	; 0x3bc <OLED_reset>
	OLED_write_c(0b10110011);
	for (uint8_t i = 0; i < 128; i++){
		OLED_write_d(0x0);
	}*/
	
	OLED_write_c(0xB5); // 0xB + page number
 296:	85 eb       	ldi	r24, 0xB5	; 181
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	0e 94 7f 01 	call	0x2fe	; 0x2fe <OLED_write_c>
	OLED_write_c(0b00000100);
 29e:	84 e0       	ldi	r24, 0x04	; 4
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	0e 94 7f 01 	call	0x2fe	; 0x2fe <OLED_write_c>
	OLED_write_c(0b00010000);
 2a6:	80 e1       	ldi	r24, 0x10	; 16
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	0e 94 7f 01 	call	0x2fe	; 0x2fe <OLED_write_c>
	for (uint8_t i = 0; i < 8; i++){
 2ae:	c0 e0       	ldi	r28, 0x00	; 0
 2b0:	05 c0       	rjmp	.+10     	; 0x2bc <main+0x9e>
		OLED_write_d(0xFF);
 2b2:	8f ef       	ldi	r24, 0xFF	; 255
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	0e 94 db 01 	call	0x3b6	; 0x3b6 <OLED_write_d>
	}*/
	
	OLED_write_c(0xB5); // 0xB + page number
	OLED_write_c(0b00000100);
	OLED_write_c(0b00010000);
	for (uint8_t i = 0; i < 8; i++){
 2ba:	cf 5f       	subi	r28, 0xFF	; 255
 2bc:	c8 30       	cpi	r28, 0x08	; 8
 2be:	c8 f3       	brcs	.-14     	; 0x2b2 <main+0x94>
		OLED_write_d(0xFF);
	}
	
	OLED_write_c(0xB6); // 0xB + page number
 2c0:	86 eb       	ldi	r24, 0xB6	; 182
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	0e 94 7f 01 	call	0x2fe	; 0x2fe <OLED_write_c>
	OLED_write_c(0b00000100); // 
 2c8:	84 e0       	ldi	r24, 0x04	; 4
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	0e 94 7f 01 	call	0x2fe	; 0x2fe <OLED_write_c>
	OLED_write_c(0b00010000);
 2d0:	80 e1       	ldi	r24, 0x10	; 16
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	0e 94 7f 01 	call	0x2fe	; 0x2fe <OLED_write_c>
	for (uint8_t i = 0; i < 8; i++){
 2d8:	c0 e0       	ldi	r28, 0x00	; 0
 2da:	05 c0       	rjmp	.+10     	; 0x2e6 <main+0xc8>
		OLED_write_d(0xFf);
 2dc:	8f ef       	ldi	r24, 0xFF	; 255
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	0e 94 db 01 	call	0x3b6	; 0x3b6 <OLED_write_d>
	}
	
	OLED_write_c(0xB6); // 0xB + page number
	OLED_write_c(0b00000100); // 
	OLED_write_c(0b00010000);
	for (uint8_t i = 0; i < 8; i++){
 2e4:	cf 5f       	subi	r28, 0xFF	; 255
 2e6:	c8 30       	cpi	r28, 0x08	; 8
 2e8:	c8 f3       	brcs	.-14     	; 0x2dc <main+0xbe>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2ea:	5f ef       	ldi	r21, 0xFF	; 255
 2ec:	81 ee       	ldi	r24, 0xE1	; 225
 2ee:	94 e0       	ldi	r25, 0x04	; 4
 2f0:	51 50       	subi	r21, 0x01	; 1
 2f2:	80 40       	sbci	r24, 0x00	; 0
 2f4:	90 40       	sbci	r25, 0x00	; 0
 2f6:	e1 f7       	brne	.-8      	; 0x2f0 <main+0xd2>
 2f8:	00 c0       	rjmp	.+0      	; 0x2fa <main+0xdc>
 2fa:	00 00       	nop
 2fc:	f6 cf       	rjmp	.-20     	; 0x2ea <main+0xcc>

000002fe <OLED_write_c>:
void OLED_write_d(uint8_t data){
	volatile char * oled = ( char *) 0x1200 ;
	oled [0]= data ;
}

void OLED_home(){
 2fe:	80 93 00 10 	sts	0x1000, r24	; 0x801000 <__bss_end+0xeaa>
 302:	08 95       	ret

00000304 <OLED_init>:
 304:	8e ea       	ldi	r24, 0xAE	; 174
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	0e 94 7f 01 	call	0x2fe	; 0x2fe <OLED_write_c>
 30c:	81 ea       	ldi	r24, 0xA1	; 161
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	0e 94 7f 01 	call	0x2fe	; 0x2fe <OLED_write_c>
 314:	8a ed       	ldi	r24, 0xDA	; 218
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	0e 94 7f 01 	call	0x2fe	; 0x2fe <OLED_write_c>
 31c:	82 e1       	ldi	r24, 0x12	; 18
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	0e 94 7f 01 	call	0x2fe	; 0x2fe <OLED_write_c>
 324:	88 ec       	ldi	r24, 0xC8	; 200
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	0e 94 7f 01 	call	0x2fe	; 0x2fe <OLED_write_c>
 32c:	88 ea       	ldi	r24, 0xA8	; 168
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	0e 94 7f 01 	call	0x2fe	; 0x2fe <OLED_write_c>
 334:	8f e3       	ldi	r24, 0x3F	; 63
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	0e 94 7f 01 	call	0x2fe	; 0x2fe <OLED_write_c>
 33c:	85 ed       	ldi	r24, 0xD5	; 213
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	0e 94 7f 01 	call	0x2fe	; 0x2fe <OLED_write_c>
 344:	80 e8       	ldi	r24, 0x80	; 128
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	0e 94 7f 01 	call	0x2fe	; 0x2fe <OLED_write_c>
 34c:	81 e8       	ldi	r24, 0x81	; 129
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	0e 94 7f 01 	call	0x2fe	; 0x2fe <OLED_write_c>
 354:	80 e5       	ldi	r24, 0x50	; 80
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	0e 94 7f 01 	call	0x2fe	; 0x2fe <OLED_write_c>
 35c:	89 ed       	ldi	r24, 0xD9	; 217
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	0e 94 7f 01 	call	0x2fe	; 0x2fe <OLED_write_c>
 364:	81 e2       	ldi	r24, 0x21	; 33
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	0e 94 7f 01 	call	0x2fe	; 0x2fe <OLED_write_c>
 36c:	80 e2       	ldi	r24, 0x20	; 32
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	0e 94 7f 01 	call	0x2fe	; 0x2fe <OLED_write_c>
 374:	82 e0       	ldi	r24, 0x02	; 2
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	0e 94 7f 01 	call	0x2fe	; 0x2fe <OLED_write_c>
 37c:	8b ed       	ldi	r24, 0xDB	; 219
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	0e 94 7f 01 	call	0x2fe	; 0x2fe <OLED_write_c>
 384:	80 e3       	ldi	r24, 0x30	; 48
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	0e 94 7f 01 	call	0x2fe	; 0x2fe <OLED_write_c>
 38c:	8d ea       	ldi	r24, 0xAD	; 173
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	0e 94 7f 01 	call	0x2fe	; 0x2fe <OLED_write_c>
 394:	80 e0       	ldi	r24, 0x00	; 0
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	0e 94 7f 01 	call	0x2fe	; 0x2fe <OLED_write_c>
 39c:	84 ea       	ldi	r24, 0xA4	; 164
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	0e 94 7f 01 	call	0x2fe	; 0x2fe <OLED_write_c>
 3a4:	86 ea       	ldi	r24, 0xA6	; 166
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	0e 94 7f 01 	call	0x2fe	; 0x2fe <OLED_write_c>
 3ac:	8f ea       	ldi	r24, 0xAF	; 175
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	0e 94 7f 01 	call	0x2fe	; 0x2fe <OLED_write_c>
 3b4:	08 95       	ret

000003b6 <OLED_write_d>:
 3b6:	80 93 00 12 	sts	0x1200, r24	; 0x801200 <__bss_end+0x10aa>
 3ba:	08 95       	ret

000003bc <OLED_reset>:
	
}

void OLED_reset(){
 3bc:	cf 93       	push	r28
	OLED_write_c(0b10110000);
 3be:	80 eb       	ldi	r24, 0xB0	; 176
 3c0:	0e 94 7f 01 	call	0x2fe	; 0x2fe <OLED_write_c>
	for (uint8_t i = 0; i < 128; i++){
 3c4:	c0 e0       	ldi	r28, 0x00	; 0
 3c6:	04 c0       	rjmp	.+8      	; 0x3d0 <OLED_reset+0x14>
		OLED_write_d(0x0);
 3c8:	80 e0       	ldi	r24, 0x00	; 0
 3ca:	0e 94 db 01 	call	0x3b6	; 0x3b6 <OLED_write_d>
	
}

void OLED_reset(){
	OLED_write_c(0b10110000);
	for (uint8_t i = 0; i < 128; i++){
 3ce:	cf 5f       	subi	r28, 0xFF	; 255
 3d0:	cc 23       	and	r28, r28
 3d2:	d4 f7       	brge	.-12     	; 0x3c8 <OLED_reset+0xc>
		OLED_write_d(0x0);
	}
	OLED_write_c(0b10110001);
 3d4:	81 eb       	ldi	r24, 0xB1	; 177
 3d6:	0e 94 7f 01 	call	0x2fe	; 0x2fe <OLED_write_c>
	for (uint8_t i = 0; i < 128; i++){
 3da:	c0 e0       	ldi	r28, 0x00	; 0
 3dc:	04 c0       	rjmp	.+8      	; 0x3e6 <OLED_reset+0x2a>
		OLED_write_d(0x0);
 3de:	80 e0       	ldi	r24, 0x00	; 0
 3e0:	0e 94 db 01 	call	0x3b6	; 0x3b6 <OLED_write_d>
	OLED_write_c(0b10110000);
	for (uint8_t i = 0; i < 128; i++){
		OLED_write_d(0x0);
	}
	OLED_write_c(0b10110001);
	for (uint8_t i = 0; i < 128; i++){
 3e4:	cf 5f       	subi	r28, 0xFF	; 255
 3e6:	cc 23       	and	r28, r28
 3e8:	d4 f7       	brge	.-12     	; 0x3de <OLED_reset+0x22>
		OLED_write_d(0x0);
	}
	OLED_write_c(0b10110010);
 3ea:	82 eb       	ldi	r24, 0xB2	; 178
 3ec:	0e 94 7f 01 	call	0x2fe	; 0x2fe <OLED_write_c>
	for (uint8_t i = 0; i < 128; i++){
 3f0:	c0 e0       	ldi	r28, 0x00	; 0
 3f2:	04 c0       	rjmp	.+8      	; 0x3fc <OLED_reset+0x40>
		OLED_write_d(0x0);
 3f4:	80 e0       	ldi	r24, 0x00	; 0
 3f6:	0e 94 db 01 	call	0x3b6	; 0x3b6 <OLED_write_d>
	OLED_write_c(0b10110001);
	for (uint8_t i = 0; i < 128; i++){
		OLED_write_d(0x0);
	}
	OLED_write_c(0b10110010);
	for (uint8_t i = 0; i < 128; i++){
 3fa:	cf 5f       	subi	r28, 0xFF	; 255
 3fc:	cc 23       	and	r28, r28
 3fe:	d4 f7       	brge	.-12     	; 0x3f4 <OLED_reset+0x38>
		OLED_write_d(0x0);
	}
	OLED_write_c(0b10110011);
 400:	83 eb       	ldi	r24, 0xB3	; 179
 402:	0e 94 7f 01 	call	0x2fe	; 0x2fe <OLED_write_c>
	for (uint8_t i = 0; i < 128; i++){
 406:	c0 e0       	ldi	r28, 0x00	; 0
 408:	04 c0       	rjmp	.+8      	; 0x412 <__DATA_REGION_LENGTH__+0x12>
		OLED_write_d(0x0);
 40a:	80 e0       	ldi	r24, 0x00	; 0
 40c:	0e 94 db 01 	call	0x3b6	; 0x3b6 <OLED_write_d>
	OLED_write_c(0b10110010);
	for (uint8_t i = 0; i < 128; i++){
		OLED_write_d(0x0);
	}
	OLED_write_c(0b10110011);
	for (uint8_t i = 0; i < 128; i++){
 410:	cf 5f       	subi	r28, 0xFF	; 255
 412:	cc 23       	and	r28, r28
 414:	d4 f7       	brge	.-12     	; 0x40a <__DATA_REGION_LENGTH__+0xa>
		OLED_write_d(0x0);
	}
	OLED_write_c(0b10110100);
 416:	84 eb       	ldi	r24, 0xB4	; 180
 418:	0e 94 7f 01 	call	0x2fe	; 0x2fe <OLED_write_c>
	for (uint8_t i = 0; i < 128; i++){
 41c:	c0 e0       	ldi	r28, 0x00	; 0
 41e:	04 c0       	rjmp	.+8      	; 0x428 <__DATA_REGION_LENGTH__+0x28>
		OLED_write_d(0x0);
 420:	80 e0       	ldi	r24, 0x00	; 0
 422:	0e 94 db 01 	call	0x3b6	; 0x3b6 <OLED_write_d>
	OLED_write_c(0b10110011);
	for (uint8_t i = 0; i < 128; i++){
		OLED_write_d(0x0);
	}
	OLED_write_c(0b10110100);
	for (uint8_t i = 0; i < 128; i++){
 426:	cf 5f       	subi	r28, 0xFF	; 255
 428:	cc 23       	and	r28, r28
 42a:	d4 f7       	brge	.-12     	; 0x420 <__DATA_REGION_LENGTH__+0x20>
		OLED_write_d(0x0);
	}
	OLED_write_c(0b10110101);
 42c:	85 eb       	ldi	r24, 0xB5	; 181
 42e:	0e 94 7f 01 	call	0x2fe	; 0x2fe <OLED_write_c>
	for (uint8_t i = 0; i < 128; i++){
 432:	c0 e0       	ldi	r28, 0x00	; 0
 434:	04 c0       	rjmp	.+8      	; 0x43e <__DATA_REGION_LENGTH__+0x3e>
		OLED_write_d(0x0);
 436:	80 e0       	ldi	r24, 0x00	; 0
 438:	0e 94 db 01 	call	0x3b6	; 0x3b6 <OLED_write_d>
	OLED_write_c(0b10110100);
	for (uint8_t i = 0; i < 128; i++){
		OLED_write_d(0x0);
	}
	OLED_write_c(0b10110101);
	for (uint8_t i = 0; i < 128; i++){
 43c:	cf 5f       	subi	r28, 0xFF	; 255
 43e:	cc 23       	and	r28, r28
 440:	d4 f7       	brge	.-12     	; 0x436 <__DATA_REGION_LENGTH__+0x36>
		OLED_write_d(0x0);
	}
	OLED_write_c(0b10110110);
 442:	86 eb       	ldi	r24, 0xB6	; 182
 444:	0e 94 7f 01 	call	0x2fe	; 0x2fe <OLED_write_c>
	for (uint8_t i = 0; i < 128; i++){
 448:	c0 e0       	ldi	r28, 0x00	; 0
 44a:	04 c0       	rjmp	.+8      	; 0x454 <__DATA_REGION_LENGTH__+0x54>
		OLED_write_d(0x0);
 44c:	80 e0       	ldi	r24, 0x00	; 0
 44e:	0e 94 db 01 	call	0x3b6	; 0x3b6 <OLED_write_d>
	OLED_write_c(0b10110101);
	for (uint8_t i = 0; i < 128; i++){
		OLED_write_d(0x0);
	}
	OLED_write_c(0b10110110);
	for (uint8_t i = 0; i < 128; i++){
 452:	cf 5f       	subi	r28, 0xFF	; 255
 454:	cc 23       	and	r28, r28
 456:	d4 f7       	brge	.-12     	; 0x44c <__DATA_REGION_LENGTH__+0x4c>
		OLED_write_d(0x0);
	}
	OLED_write_c(0b10110111);
 458:	87 eb       	ldi	r24, 0xB7	; 183
 45a:	0e 94 7f 01 	call	0x2fe	; 0x2fe <OLED_write_c>
	for (uint8_t i = 0; i < 128; i++){
 45e:	c0 e0       	ldi	r28, 0x00	; 0
 460:	04 c0       	rjmp	.+8      	; 0x46a <__DATA_REGION_LENGTH__+0x6a>
		OLED_write_d(0x0);
 462:	80 e0       	ldi	r24, 0x00	; 0
 464:	0e 94 db 01 	call	0x3b6	; 0x3b6 <OLED_write_d>
	OLED_write_c(0b10110110);
	for (uint8_t i = 0; i < 128; i++){
		OLED_write_d(0x0);
	}
	OLED_write_c(0b10110111);
	for (uint8_t i = 0; i < 128; i++){
 468:	cf 5f       	subi	r28, 0xFF	; 255
 46a:	cc 23       	and	r28, r28
 46c:	d4 f7       	brge	.-12     	; 0x462 <__DATA_REGION_LENGTH__+0x62>
		OLED_write_d(0x0);
	}
}
 46e:	cf 91       	pop	r28
 470:	08 95       	ret

00000472 <fdevopen>:
 472:	0f 93       	push	r16
 474:	1f 93       	push	r17
 476:	cf 93       	push	r28
 478:	df 93       	push	r29
 47a:	00 97       	sbiw	r24, 0x00	; 0
 47c:	31 f4       	brne	.+12     	; 0x48a <fdevopen+0x18>
 47e:	61 15       	cp	r22, r1
 480:	71 05       	cpc	r23, r1
 482:	19 f4       	brne	.+6      	; 0x48a <fdevopen+0x18>
 484:	80 e0       	ldi	r24, 0x00	; 0
 486:	90 e0       	ldi	r25, 0x00	; 0
 488:	3a c0       	rjmp	.+116    	; 0x4fe <fdevopen+0x8c>
 48a:	8b 01       	movw	r16, r22
 48c:	ec 01       	movw	r28, r24
 48e:	6e e0       	ldi	r22, 0x0E	; 14
 490:	70 e0       	ldi	r23, 0x00	; 0
 492:	81 e0       	ldi	r24, 0x01	; 1
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	0e 94 b4 02 	call	0x568	; 0x568 <calloc>
 49a:	fc 01       	movw	r30, r24
 49c:	89 2b       	or	r24, r25
 49e:	91 f3       	breq	.-28     	; 0x484 <fdevopen+0x12>
 4a0:	80 e8       	ldi	r24, 0x80	; 128
 4a2:	83 83       	std	Z+3, r24	; 0x03
 4a4:	01 15       	cp	r16, r1
 4a6:	11 05       	cpc	r17, r1
 4a8:	71 f0       	breq	.+28     	; 0x4c6 <fdevopen+0x54>
 4aa:	13 87       	std	Z+11, r17	; 0x0b
 4ac:	02 87       	std	Z+10, r16	; 0x0a
 4ae:	81 e8       	ldi	r24, 0x81	; 129
 4b0:	83 83       	std	Z+3, r24	; 0x03
 4b2:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <__iob>
 4b6:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <__iob+0x1>
 4ba:	89 2b       	or	r24, r25
 4bc:	21 f4       	brne	.+8      	; 0x4c6 <fdevopen+0x54>
 4be:	f0 93 4d 01 	sts	0x014D, r31	; 0x80014d <__iob+0x1>
 4c2:	e0 93 4c 01 	sts	0x014C, r30	; 0x80014c <__iob>
 4c6:	20 97       	sbiw	r28, 0x00	; 0
 4c8:	c9 f0       	breq	.+50     	; 0x4fc <fdevopen+0x8a>
 4ca:	d1 87       	std	Z+9, r29	; 0x09
 4cc:	c0 87       	std	Z+8, r28	; 0x08
 4ce:	83 81       	ldd	r24, Z+3	; 0x03
 4d0:	82 60       	ori	r24, 0x02	; 2
 4d2:	83 83       	std	Z+3, r24	; 0x03
 4d4:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <__iob+0x2>
 4d8:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <__iob+0x3>
 4dc:	89 2b       	or	r24, r25
 4de:	71 f4       	brne	.+28     	; 0x4fc <fdevopen+0x8a>
 4e0:	f0 93 4f 01 	sts	0x014F, r31	; 0x80014f <__iob+0x3>
 4e4:	e0 93 4e 01 	sts	0x014E, r30	; 0x80014e <__iob+0x2>
 4e8:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <__iob+0x4>
 4ec:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <__iob+0x5>
 4f0:	89 2b       	or	r24, r25
 4f2:	21 f4       	brne	.+8      	; 0x4fc <fdevopen+0x8a>
 4f4:	f0 93 51 01 	sts	0x0151, r31	; 0x800151 <__iob+0x5>
 4f8:	e0 93 50 01 	sts	0x0150, r30	; 0x800150 <__iob+0x4>
 4fc:	cf 01       	movw	r24, r30
 4fe:	df 91       	pop	r29
 500:	cf 91       	pop	r28
 502:	1f 91       	pop	r17
 504:	0f 91       	pop	r16
 506:	08 95       	ret

00000508 <puts>:
 508:	0f 93       	push	r16
 50a:	1f 93       	push	r17
 50c:	cf 93       	push	r28
 50e:	df 93       	push	r29
 510:	e0 91 4e 01 	lds	r30, 0x014E	; 0x80014e <__iob+0x2>
 514:	f0 91 4f 01 	lds	r31, 0x014F	; 0x80014f <__iob+0x3>
 518:	23 81       	ldd	r18, Z+3	; 0x03
 51a:	21 ff       	sbrs	r18, 1
 51c:	1b c0       	rjmp	.+54     	; 0x554 <puts+0x4c>
 51e:	8c 01       	movw	r16, r24
 520:	d0 e0       	ldi	r29, 0x00	; 0
 522:	c0 e0       	ldi	r28, 0x00	; 0
 524:	f8 01       	movw	r30, r16
 526:	81 91       	ld	r24, Z+
 528:	8f 01       	movw	r16, r30
 52a:	60 91 4e 01 	lds	r22, 0x014E	; 0x80014e <__iob+0x2>
 52e:	70 91 4f 01 	lds	r23, 0x014F	; 0x80014f <__iob+0x3>
 532:	db 01       	movw	r26, r22
 534:	18 96       	adiw	r26, 0x08	; 8
 536:	ed 91       	ld	r30, X+
 538:	fc 91       	ld	r31, X
 53a:	19 97       	sbiw	r26, 0x09	; 9
 53c:	88 23       	and	r24, r24
 53e:	31 f0       	breq	.+12     	; 0x54c <puts+0x44>
 540:	09 95       	icall
 542:	89 2b       	or	r24, r25
 544:	79 f3       	breq	.-34     	; 0x524 <puts+0x1c>
 546:	df ef       	ldi	r29, 0xFF	; 255
 548:	cf ef       	ldi	r28, 0xFF	; 255
 54a:	ec cf       	rjmp	.-40     	; 0x524 <puts+0x1c>
 54c:	8a e0       	ldi	r24, 0x0A	; 10
 54e:	09 95       	icall
 550:	89 2b       	or	r24, r25
 552:	19 f0       	breq	.+6      	; 0x55a <puts+0x52>
 554:	8f ef       	ldi	r24, 0xFF	; 255
 556:	9f ef       	ldi	r25, 0xFF	; 255
 558:	02 c0       	rjmp	.+4      	; 0x55e <puts+0x56>
 55a:	8d 2f       	mov	r24, r29
 55c:	9c 2f       	mov	r25, r28
 55e:	df 91       	pop	r29
 560:	cf 91       	pop	r28
 562:	1f 91       	pop	r17
 564:	0f 91       	pop	r16
 566:	08 95       	ret

00000568 <calloc>:
 568:	0f 93       	push	r16
 56a:	1f 93       	push	r17
 56c:	cf 93       	push	r28
 56e:	df 93       	push	r29
 570:	86 9f       	mul	r24, r22
 572:	80 01       	movw	r16, r0
 574:	87 9f       	mul	r24, r23
 576:	10 0d       	add	r17, r0
 578:	96 9f       	mul	r25, r22
 57a:	10 0d       	add	r17, r0
 57c:	11 24       	eor	r1, r1
 57e:	c8 01       	movw	r24, r16
 580:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <malloc>
 584:	ec 01       	movw	r28, r24
 586:	00 97       	sbiw	r24, 0x00	; 0
 588:	29 f0       	breq	.+10     	; 0x594 <calloc+0x2c>
 58a:	a8 01       	movw	r20, r16
 58c:	60 e0       	ldi	r22, 0x00	; 0
 58e:	70 e0       	ldi	r23, 0x00	; 0
 590:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <memset>
 594:	ce 01       	movw	r24, r28
 596:	df 91       	pop	r29
 598:	cf 91       	pop	r28
 59a:	1f 91       	pop	r17
 59c:	0f 91       	pop	r16
 59e:	08 95       	ret

000005a0 <malloc>:
 5a0:	0f 93       	push	r16
 5a2:	1f 93       	push	r17
 5a4:	cf 93       	push	r28
 5a6:	df 93       	push	r29
 5a8:	82 30       	cpi	r24, 0x02	; 2
 5aa:	91 05       	cpc	r25, r1
 5ac:	10 f4       	brcc	.+4      	; 0x5b2 <malloc+0x12>
 5ae:	82 e0       	ldi	r24, 0x02	; 2
 5b0:	90 e0       	ldi	r25, 0x00	; 0
 5b2:	e0 91 54 01 	lds	r30, 0x0154	; 0x800154 <__flp>
 5b6:	f0 91 55 01 	lds	r31, 0x0155	; 0x800155 <__flp+0x1>
 5ba:	20 e0       	ldi	r18, 0x00	; 0
 5bc:	30 e0       	ldi	r19, 0x00	; 0
 5be:	a0 e0       	ldi	r26, 0x00	; 0
 5c0:	b0 e0       	ldi	r27, 0x00	; 0
 5c2:	30 97       	sbiw	r30, 0x00	; 0
 5c4:	19 f1       	breq	.+70     	; 0x60c <malloc+0x6c>
 5c6:	40 81       	ld	r20, Z
 5c8:	51 81       	ldd	r21, Z+1	; 0x01
 5ca:	02 81       	ldd	r16, Z+2	; 0x02
 5cc:	13 81       	ldd	r17, Z+3	; 0x03
 5ce:	48 17       	cp	r20, r24
 5d0:	59 07       	cpc	r21, r25
 5d2:	c8 f0       	brcs	.+50     	; 0x606 <malloc+0x66>
 5d4:	84 17       	cp	r24, r20
 5d6:	95 07       	cpc	r25, r21
 5d8:	69 f4       	brne	.+26     	; 0x5f4 <malloc+0x54>
 5da:	10 97       	sbiw	r26, 0x00	; 0
 5dc:	31 f0       	breq	.+12     	; 0x5ea <malloc+0x4a>
 5de:	12 96       	adiw	r26, 0x02	; 2
 5e0:	0c 93       	st	X, r16
 5e2:	12 97       	sbiw	r26, 0x02	; 2
 5e4:	13 96       	adiw	r26, 0x03	; 3
 5e6:	1c 93       	st	X, r17
 5e8:	27 c0       	rjmp	.+78     	; 0x638 <malloc+0x98>
 5ea:	00 93 54 01 	sts	0x0154, r16	; 0x800154 <__flp>
 5ee:	10 93 55 01 	sts	0x0155, r17	; 0x800155 <__flp+0x1>
 5f2:	22 c0       	rjmp	.+68     	; 0x638 <malloc+0x98>
 5f4:	21 15       	cp	r18, r1
 5f6:	31 05       	cpc	r19, r1
 5f8:	19 f0       	breq	.+6      	; 0x600 <malloc+0x60>
 5fa:	42 17       	cp	r20, r18
 5fc:	53 07       	cpc	r21, r19
 5fe:	18 f4       	brcc	.+6      	; 0x606 <malloc+0x66>
 600:	9a 01       	movw	r18, r20
 602:	bd 01       	movw	r22, r26
 604:	ef 01       	movw	r28, r30
 606:	df 01       	movw	r26, r30
 608:	f8 01       	movw	r30, r16
 60a:	db cf       	rjmp	.-74     	; 0x5c2 <malloc+0x22>
 60c:	21 15       	cp	r18, r1
 60e:	31 05       	cpc	r19, r1
 610:	f9 f0       	breq	.+62     	; 0x650 <malloc+0xb0>
 612:	28 1b       	sub	r18, r24
 614:	39 0b       	sbc	r19, r25
 616:	24 30       	cpi	r18, 0x04	; 4
 618:	31 05       	cpc	r19, r1
 61a:	80 f4       	brcc	.+32     	; 0x63c <malloc+0x9c>
 61c:	8a 81       	ldd	r24, Y+2	; 0x02
 61e:	9b 81       	ldd	r25, Y+3	; 0x03
 620:	61 15       	cp	r22, r1
 622:	71 05       	cpc	r23, r1
 624:	21 f0       	breq	.+8      	; 0x62e <malloc+0x8e>
 626:	fb 01       	movw	r30, r22
 628:	93 83       	std	Z+3, r25	; 0x03
 62a:	82 83       	std	Z+2, r24	; 0x02
 62c:	04 c0       	rjmp	.+8      	; 0x636 <malloc+0x96>
 62e:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <__flp+0x1>
 632:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <__flp>
 636:	fe 01       	movw	r30, r28
 638:	32 96       	adiw	r30, 0x02	; 2
 63a:	44 c0       	rjmp	.+136    	; 0x6c4 <malloc+0x124>
 63c:	fe 01       	movw	r30, r28
 63e:	e2 0f       	add	r30, r18
 640:	f3 1f       	adc	r31, r19
 642:	81 93       	st	Z+, r24
 644:	91 93       	st	Z+, r25
 646:	22 50       	subi	r18, 0x02	; 2
 648:	31 09       	sbc	r19, r1
 64a:	39 83       	std	Y+1, r19	; 0x01
 64c:	28 83       	st	Y, r18
 64e:	3a c0       	rjmp	.+116    	; 0x6c4 <malloc+0x124>
 650:	20 91 52 01 	lds	r18, 0x0152	; 0x800152 <__brkval>
 654:	30 91 53 01 	lds	r19, 0x0153	; 0x800153 <__brkval+0x1>
 658:	23 2b       	or	r18, r19
 65a:	41 f4       	brne	.+16     	; 0x66c <malloc+0xcc>
 65c:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 660:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 664:	30 93 53 01 	sts	0x0153, r19	; 0x800153 <__brkval+0x1>
 668:	20 93 52 01 	sts	0x0152, r18	; 0x800152 <__brkval>
 66c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 670:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 674:	21 15       	cp	r18, r1
 676:	31 05       	cpc	r19, r1
 678:	41 f4       	brne	.+16     	; 0x68a <malloc+0xea>
 67a:	2d b7       	in	r18, 0x3d	; 61
 67c:	3e b7       	in	r19, 0x3e	; 62
 67e:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 682:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 686:	24 1b       	sub	r18, r20
 688:	35 0b       	sbc	r19, r21
 68a:	e0 91 52 01 	lds	r30, 0x0152	; 0x800152 <__brkval>
 68e:	f0 91 53 01 	lds	r31, 0x0153	; 0x800153 <__brkval+0x1>
 692:	e2 17       	cp	r30, r18
 694:	f3 07       	cpc	r31, r19
 696:	a0 f4       	brcc	.+40     	; 0x6c0 <malloc+0x120>
 698:	2e 1b       	sub	r18, r30
 69a:	3f 0b       	sbc	r19, r31
 69c:	28 17       	cp	r18, r24
 69e:	39 07       	cpc	r19, r25
 6a0:	78 f0       	brcs	.+30     	; 0x6c0 <malloc+0x120>
 6a2:	ac 01       	movw	r20, r24
 6a4:	4e 5f       	subi	r20, 0xFE	; 254
 6a6:	5f 4f       	sbci	r21, 0xFF	; 255
 6a8:	24 17       	cp	r18, r20
 6aa:	35 07       	cpc	r19, r21
 6ac:	48 f0       	brcs	.+18     	; 0x6c0 <malloc+0x120>
 6ae:	4e 0f       	add	r20, r30
 6b0:	5f 1f       	adc	r21, r31
 6b2:	50 93 53 01 	sts	0x0153, r21	; 0x800153 <__brkval+0x1>
 6b6:	40 93 52 01 	sts	0x0152, r20	; 0x800152 <__brkval>
 6ba:	81 93       	st	Z+, r24
 6bc:	91 93       	st	Z+, r25
 6be:	02 c0       	rjmp	.+4      	; 0x6c4 <malloc+0x124>
 6c0:	e0 e0       	ldi	r30, 0x00	; 0
 6c2:	f0 e0       	ldi	r31, 0x00	; 0
 6c4:	cf 01       	movw	r24, r30
 6c6:	df 91       	pop	r29
 6c8:	cf 91       	pop	r28
 6ca:	1f 91       	pop	r17
 6cc:	0f 91       	pop	r16
 6ce:	08 95       	ret

000006d0 <free>:
 6d0:	cf 93       	push	r28
 6d2:	df 93       	push	r29
 6d4:	00 97       	sbiw	r24, 0x00	; 0
 6d6:	09 f4       	brne	.+2      	; 0x6da <free+0xa>
 6d8:	81 c0       	rjmp	.+258    	; 0x7dc <free+0x10c>
 6da:	fc 01       	movw	r30, r24
 6dc:	32 97       	sbiw	r30, 0x02	; 2
 6de:	13 82       	std	Z+3, r1	; 0x03
 6e0:	12 82       	std	Z+2, r1	; 0x02
 6e2:	a0 91 54 01 	lds	r26, 0x0154	; 0x800154 <__flp>
 6e6:	b0 91 55 01 	lds	r27, 0x0155	; 0x800155 <__flp+0x1>
 6ea:	10 97       	sbiw	r26, 0x00	; 0
 6ec:	81 f4       	brne	.+32     	; 0x70e <free+0x3e>
 6ee:	20 81       	ld	r18, Z
 6f0:	31 81       	ldd	r19, Z+1	; 0x01
 6f2:	82 0f       	add	r24, r18
 6f4:	93 1f       	adc	r25, r19
 6f6:	20 91 52 01 	lds	r18, 0x0152	; 0x800152 <__brkval>
 6fa:	30 91 53 01 	lds	r19, 0x0153	; 0x800153 <__brkval+0x1>
 6fe:	28 17       	cp	r18, r24
 700:	39 07       	cpc	r19, r25
 702:	51 f5       	brne	.+84     	; 0x758 <free+0x88>
 704:	f0 93 53 01 	sts	0x0153, r31	; 0x800153 <__brkval+0x1>
 708:	e0 93 52 01 	sts	0x0152, r30	; 0x800152 <__brkval>
 70c:	67 c0       	rjmp	.+206    	; 0x7dc <free+0x10c>
 70e:	ed 01       	movw	r28, r26
 710:	20 e0       	ldi	r18, 0x00	; 0
 712:	30 e0       	ldi	r19, 0x00	; 0
 714:	ce 17       	cp	r28, r30
 716:	df 07       	cpc	r29, r31
 718:	40 f4       	brcc	.+16     	; 0x72a <free+0x5a>
 71a:	4a 81       	ldd	r20, Y+2	; 0x02
 71c:	5b 81       	ldd	r21, Y+3	; 0x03
 71e:	9e 01       	movw	r18, r28
 720:	41 15       	cp	r20, r1
 722:	51 05       	cpc	r21, r1
 724:	f1 f0       	breq	.+60     	; 0x762 <free+0x92>
 726:	ea 01       	movw	r28, r20
 728:	f5 cf       	rjmp	.-22     	; 0x714 <free+0x44>
 72a:	d3 83       	std	Z+3, r29	; 0x03
 72c:	c2 83       	std	Z+2, r28	; 0x02
 72e:	40 81       	ld	r20, Z
 730:	51 81       	ldd	r21, Z+1	; 0x01
 732:	84 0f       	add	r24, r20
 734:	95 1f       	adc	r25, r21
 736:	c8 17       	cp	r28, r24
 738:	d9 07       	cpc	r29, r25
 73a:	59 f4       	brne	.+22     	; 0x752 <free+0x82>
 73c:	88 81       	ld	r24, Y
 73e:	99 81       	ldd	r25, Y+1	; 0x01
 740:	84 0f       	add	r24, r20
 742:	95 1f       	adc	r25, r21
 744:	02 96       	adiw	r24, 0x02	; 2
 746:	91 83       	std	Z+1, r25	; 0x01
 748:	80 83       	st	Z, r24
 74a:	8a 81       	ldd	r24, Y+2	; 0x02
 74c:	9b 81       	ldd	r25, Y+3	; 0x03
 74e:	93 83       	std	Z+3, r25	; 0x03
 750:	82 83       	std	Z+2, r24	; 0x02
 752:	21 15       	cp	r18, r1
 754:	31 05       	cpc	r19, r1
 756:	29 f4       	brne	.+10     	; 0x762 <free+0x92>
 758:	f0 93 55 01 	sts	0x0155, r31	; 0x800155 <__flp+0x1>
 75c:	e0 93 54 01 	sts	0x0154, r30	; 0x800154 <__flp>
 760:	3d c0       	rjmp	.+122    	; 0x7dc <free+0x10c>
 762:	e9 01       	movw	r28, r18
 764:	fb 83       	std	Y+3, r31	; 0x03
 766:	ea 83       	std	Y+2, r30	; 0x02
 768:	49 91       	ld	r20, Y+
 76a:	59 91       	ld	r21, Y+
 76c:	c4 0f       	add	r28, r20
 76e:	d5 1f       	adc	r29, r21
 770:	ec 17       	cp	r30, r28
 772:	fd 07       	cpc	r31, r29
 774:	61 f4       	brne	.+24     	; 0x78e <free+0xbe>
 776:	80 81       	ld	r24, Z
 778:	91 81       	ldd	r25, Z+1	; 0x01
 77a:	84 0f       	add	r24, r20
 77c:	95 1f       	adc	r25, r21
 77e:	02 96       	adiw	r24, 0x02	; 2
 780:	e9 01       	movw	r28, r18
 782:	99 83       	std	Y+1, r25	; 0x01
 784:	88 83       	st	Y, r24
 786:	82 81       	ldd	r24, Z+2	; 0x02
 788:	93 81       	ldd	r25, Z+3	; 0x03
 78a:	9b 83       	std	Y+3, r25	; 0x03
 78c:	8a 83       	std	Y+2, r24	; 0x02
 78e:	e0 e0       	ldi	r30, 0x00	; 0
 790:	f0 e0       	ldi	r31, 0x00	; 0
 792:	12 96       	adiw	r26, 0x02	; 2
 794:	8d 91       	ld	r24, X+
 796:	9c 91       	ld	r25, X
 798:	13 97       	sbiw	r26, 0x03	; 3
 79a:	00 97       	sbiw	r24, 0x00	; 0
 79c:	19 f0       	breq	.+6      	; 0x7a4 <free+0xd4>
 79e:	fd 01       	movw	r30, r26
 7a0:	dc 01       	movw	r26, r24
 7a2:	f7 cf       	rjmp	.-18     	; 0x792 <free+0xc2>
 7a4:	8d 91       	ld	r24, X+
 7a6:	9c 91       	ld	r25, X
 7a8:	11 97       	sbiw	r26, 0x01	; 1
 7aa:	9d 01       	movw	r18, r26
 7ac:	2e 5f       	subi	r18, 0xFE	; 254
 7ae:	3f 4f       	sbci	r19, 0xFF	; 255
 7b0:	82 0f       	add	r24, r18
 7b2:	93 1f       	adc	r25, r19
 7b4:	20 91 52 01 	lds	r18, 0x0152	; 0x800152 <__brkval>
 7b8:	30 91 53 01 	lds	r19, 0x0153	; 0x800153 <__brkval+0x1>
 7bc:	28 17       	cp	r18, r24
 7be:	39 07       	cpc	r19, r25
 7c0:	69 f4       	brne	.+26     	; 0x7dc <free+0x10c>
 7c2:	30 97       	sbiw	r30, 0x00	; 0
 7c4:	29 f4       	brne	.+10     	; 0x7d0 <free+0x100>
 7c6:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <__flp+0x1>
 7ca:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <__flp>
 7ce:	02 c0       	rjmp	.+4      	; 0x7d4 <free+0x104>
 7d0:	13 82       	std	Z+3, r1	; 0x03
 7d2:	12 82       	std	Z+2, r1	; 0x02
 7d4:	b0 93 53 01 	sts	0x0153, r27	; 0x800153 <__brkval+0x1>
 7d8:	a0 93 52 01 	sts	0x0152, r26	; 0x800152 <__brkval>
 7dc:	df 91       	pop	r29
 7de:	cf 91       	pop	r28
 7e0:	08 95       	ret

000007e2 <memset>:
 7e2:	dc 01       	movw	r26, r24
 7e4:	01 c0       	rjmp	.+2      	; 0x7e8 <memset+0x6>
 7e6:	6d 93       	st	X+, r22
 7e8:	41 50       	subi	r20, 0x01	; 1
 7ea:	50 40       	sbci	r21, 0x00	; 0
 7ec:	e0 f7       	brcc	.-8      	; 0x7e6 <memset+0x4>
 7ee:	08 95       	ret

000007f0 <_exit>:
 7f0:	f8 94       	cli

000007f2 <__stop_program>:
 7f2:	ff cf       	rjmp	.-2      	; 0x7f2 <__stop_program>
